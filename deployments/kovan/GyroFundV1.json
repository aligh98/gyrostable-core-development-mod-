{
  "address": "0xFD8ca66dEBcF6F1F918edeFB9d3072914A507e38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_portfolioWeightEpsilon",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_initialPoolWeights",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_gyroPoolAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_routerAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_underlyingTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_underlyingTokenOracleAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_underlyingTokenSymbols",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_stablecoinAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_memoryParam",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gyroPriceOracle",
      "outputs": [
        {
          "internalType": "contract GyroPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gyroRouter",
      "outputs": [
        {
          "internalType": "contract GyroRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_BPTokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minGyroMinted",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_BPTokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minGyroMinted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "realMint",
          "type": "bool"
        }
      ],
      "name": "mintChecksPass",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolProperties",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialPoolWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPoolPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_BPTokensOut",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsOut",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxGyroRedeemed",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_gyroRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_BPTokensOut",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsOut",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxGyroRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "realRedeem",
          "type": "bool"
        }
      ],
      "name": "redeemChecksPass",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x845be9132e995a4b21dbb0dc7493d2cf2a68c6a5187cde237bd9b4416bf2e0f4",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x94e3d92264097A750E7500B6B45545a1A6EDD45B",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "4474718",
    "logsBloom": "0x
    "blockHash": "0x91763bf4e0fd82eaad983e5df45cb7d9522ad4b9b0804571e11706f7cc94f884",
    "transactionHash": "0x845be9132e995a4b21dbb0dc7493d2cf2a68c6a5187cde237bd9b4416bf2e0f4",
    "logs": [],
    "blockNumber": 23389041,
    "cumulativeGasUsed": "5025612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    [
      "500000000000000000",
      "500000000000000000"
    ],
    [
      "0xdc6d6e66d690339a97dfb51d50c1f7415d30d8f6",
      "0x56Ca37E2a2B6C9129d748415ec0c1e5E2Bc089de"
    ],
    "0x98719C5FF4ab9076c26af542069EDd27Eeb96DEA",
    "0x30FDdd6F88220A0E641ba6110F0d036d37bfa2a9",
    [
      "0xd0a1e359811322d97991e03f863a0c30c2cf029c",
      "0x2f375e94fc336cdec2dc0ccb5277fe59cbf1cae5",
      "0x1528f3fcc26d13f7079325fb78d9442607781c8c"
    ],
    [
      "0x4c561a6c55b6637CF5decac0B6ad016F252092d1",
      "0x4c561a6c55b6637CF5decac0B6ad016F252092d1",
      "0x4c561a6c55b6637CF5decac0B6ad016F252092d1"
    ],
    [
      "0x5745544800000000000000000000000000000000000000000000000000000000",
      "0x5553444300000000000000000000000000000000000000000000000000000000",
      "0x4441490000000000000000000000000000000000000000000000000000000000"
    ],
    [
      "0x2f375e94fc336cdec2dc0ccb5277fe59cbf1cae5",
      "0x1528f3fcc26d13f7079325fb78d9442607781c8c"
    ],
    "999993123563518195"
  ],
  "solcInputHash": "69cfe5e3194d275709b15863e9c31e00",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_portfolioWeightEpsilon\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialPoolWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_gyroPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_underlyingTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyingTokenOracleAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_underlyingTokenSymbols\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_stablecoinAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_memoryParam\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gyroPriceOracle\",\"outputs\":[{\"internalType\":\"contract GyroPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gyroRouter\",\"outputs\":[{\"internalType\":\"contract GyroRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_BPTokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minGyroMinted\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_BPTokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minGyroMinted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"realMint\",\"type\":\"bool\"}],\"name\":\"mintChecksPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolProperties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPoolWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPoolPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_BPTokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxGyroRedeemed\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_gyroRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_BPTokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxGyroRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"realRedeem\",\"type\":\"bool\"}],\"name\":\"redeemChecksPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GyroFund.sol\":\"GyroFundV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/ExtendedMath.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./abdk/ABDKMath64x64.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary ExtendedMath {\\n    using ABDKMath64x64 for int128;\\n    using ABDKMath64x64 for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 constant decimals = 18;\\n    uint256 constant decimalScale = 10**decimals;\\n\\n    function powf(int128 _x, int128 _y) internal pure returns (int128 _xExpy) {\\n        // 2^(y * log2(x))\\n        return _y.mul(_x.log_2()).exp_2();\\n    }\\n\\n    /**\\n     * @return value * (base ** exponent)\\n     */\\n    function mulPow(\\n        uint256 value,\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 decimal\\n    ) internal pure returns (uint256) {\\n        int128 basef = base.fromScaled(decimal);\\n        int128 expf = exponent.fromScaled(decimal);\\n        return powf(basef, expf).mulu(value);\\n    }\\n\\n    function scaledMul(\\n        uint256 a,\\n        uint256 b,\\n        uint256 _decimals\\n    ) internal pure returns (uint256) {\\n        return a.mul(b).div(10**_decimals);\\n    }\\n\\n    function scaledMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return scaledMul(a, b, decimals);\\n    }\\n\\n    function scaledDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return scaledDiv(a, b, decimals);\\n    }\\n\\n    function scaledDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 _decimals\\n    ) internal pure returns (uint256) {\\n        return a.mul(10**_decimals).div(b);\\n    }\\n\\n    function scaledPow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        return scaledPow(base, exp, decimals);\\n    }\\n\\n    function scaledPow(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 _decimals\\n    ) internal pure returns (uint256) {\\n        uint256 result = 1e18;\\n        for (uint256 i = 0; i < exp; i++) {\\n            result = scaledMul(result, base, _decimals);\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0f405b04411eace49e29c3e52740bbdd40c31bd452abb171fc9b3d0ef0e91b8f\",\"license\":\"Unlicense\"},\"contracts/GyroFund.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./GyroPriceOracle.sol\\\";\\nimport \\\"./GyroRouter.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./abdk/ABDKMath64x64.sol\\\";\\n\\ninterface GyroFund is IERC20 {\\n    event Mint(address minter, uint256 amount);\\n    event Redeem(address redeemer, uint256 amount);\\n\\n    function mint(\\n        address[] memory _tokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted\\n    ) external returns (uint256);\\n\\n    function redeem(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed\\n    ) external returns (uint256);\\n\\n    function mintChecksPass(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted,\\n        bool realMint\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function redeemChecksPass(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed,\\n        bool realRedeem\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\\ncontract GyroFundV1 is GyroFund, Ownable, ERC20 {\\n    using ExtendedMath for int128;\\n    using ABDKMath64x64 for uint256;\\n    using ABDKMath64x64 for int128;\\n    using SafeMath for uint256;\\n    using ExtendedMath for uint256;\\n\\n    GyroPriceOracle public gyroPriceOracle;\\n    GyroRouter public gyroRouter;\\n    PriceOracle public priceOracle;\\n\\n    struct TokenProperties {\\n        address oracleAddress;\\n        bytes32 tokenSymbol;\\n        uint16 tokenIndex;\\n    }\\n\\n    struct PoolProperties {\\n        address poolAddress;\\n        uint256 initialPoolWeight;\\n        uint256 initialPoolPrice;\\n    }\\n\\n    struct PoolStatus {\\n        bool _allPoolsHealthy;\\n        bool _allPoolsWithinEpsilon;\\n        bool[] _inputPoolHealth;\\n        bool[] _poolsWithinEpsilon;\\n    }\\n\\n    struct Weights {\\n        uint256[] _idealWeights;\\n        uint256[] _currentWeights;\\n        uint256[] _hypotheticalWeights;\\n        uint256 _nav;\\n        uint256 _dollarValue;\\n        uint256 _totalPortfolioValue;\\n        bool _launch;\\n        uint256 errorCode;\\n        uint256[] _zeroArray;\\n        uint256 gyroAmount;\\n    }\\n\\n    struct FlowLogger {\\n        uint256 _inflowHistory;\\n        uint256 _outflowHistory;\\n        uint256 _currentBlock;\\n        uint256 _lastSeenBlock;\\n    }\\n\\n    PoolProperties[] public poolProperties;\\n\\n    mapping(address => TokenProperties) _tokenAddressToProperties;\\n    mapping(address => bool) _checkPoolIsValid;\\n\\n    mapping(address => bool) _checkIsStablecoin;\\n\\n    address[] underlyingTokenAddresses;\\n\\n    uint256 portfolioWeightEpsilon;\\n    uint256 lastSeenBlock;\\n    uint256 inflowHistory;\\n    uint256 outflowHistory;\\n    uint256 memoryParam;\\n\\n    uint256 constant WOULD_UNBALANCE_GYROSCOPE = 1;\\n    uint256 constant TOO_MUCH_SLIPPAGE = 2;\\n\\n    constructor(\\n        uint256 _portfolioWeightEpsilon,\\n        uint256[] memory _initialPoolWeights,\\n        address[] memory _gyroPoolAddresses,\\n        address _priceOracleAddress,\\n        address _routerAddress,\\n        address[] memory _underlyingTokenAddresses,\\n        address[] memory _underlyingTokenOracleAddresses,\\n        bytes32[] memory _underlyingTokenSymbols,\\n        address[] memory _stablecoinAddresses,\\n        uint256 _memoryParam\\n    ) ERC20(\\\"Gyro Stable Coin\\\", \\\"GYRO\\\") Ownable() {\\n        gyroPriceOracle = GyroPriceOracle(_priceOracleAddress);\\n        gyroRouter = GyroRouter(_routerAddress);\\n\\n        lastSeenBlock = block.number;\\n        inflowHistory = 0;\\n        outflowHistory = 0;\\n        memoryParam = _memoryParam;\\n\\n        underlyingTokenAddresses = _underlyingTokenAddresses;\\n\\n        portfolioWeightEpsilon = _portfolioWeightEpsilon;\\n\\n        for (uint256 i = 0; i < _gyroPoolAddresses.length; i++) {\\n            _checkPoolIsValid[_gyroPoolAddresses[i]] = true;\\n        }\\n\\n        for (uint256 i = 0; i < _gyroPoolAddresses.length; i++) {\\n            poolProperties.push(\\n                PoolProperties({\\n                    poolAddress: _gyroPoolAddresses[i],\\n                    initialPoolWeight: _initialPoolWeights[i],\\n                    initialPoolPrice: 0\\n                })\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < _underlyingTokenAddresses.length; i++) {\\n            _tokenAddressToProperties[_underlyingTokenAddresses[i]] = TokenProperties({\\n                oracleAddress: _underlyingTokenOracleAddresses[i],\\n                tokenSymbol: _underlyingTokenSymbols[i],\\n                tokenIndex: uint16(i)\\n            });\\n        }\\n\\n        // Calculate BPT prices for all pools\\n        uint256[] memory _underlyingPrices = getAllTokenPrices();\\n\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            BPool _bPool = BPool(poolProperties[i].poolAddress);\\n\\n            //For each pool get the addresses of the underlying tokens\\n            address[] memory _bPoolUnderlyingTokens = _bPool.getFinalTokens();\\n\\n            //For each pool fill the underlying token prices array\\n            uint256[] memory _bPoolUnderlyingTokenPrices =\\n                new uint256[](_bPoolUnderlyingTokens.length);\\n            for (uint256 j = 0; j < _bPoolUnderlyingTokens.length; j++) {\\n                _bPoolUnderlyingTokenPrices[j] = _underlyingPrices[\\n                    _tokenAddressToProperties[_bPoolUnderlyingTokens[j]].tokenIndex\\n                ];\\n            }\\n\\n            // Calculate BPT price for the pool\\n            address poolAddress = poolProperties[i].poolAddress;\\n            poolProperties[i].initialPoolPrice = gyroPriceOracle.getBPTPrice(\\n                poolAddress,\\n                _bPoolUnderlyingTokenPrices\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < _stablecoinAddresses.length; i++) {\\n            _checkIsStablecoin[_stablecoinAddresses[i]] = true;\\n        }\\n    }\\n\\n    function calculateImpliedPoolWeights(uint256[] memory _BPTPrices)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        // order of _BPTPrices must be same as order of poolProperties\\n        uint256[] memory _newWeights = new uint256[](_BPTPrices.length);\\n        uint256[] memory _weightedReturns = new uint256[](_BPTPrices.length);\\n\\n        uint256[] memory _initPoolPrices = new uint256[](_BPTPrices.length);\\n        uint256[] memory _initWeights = new uint256[](_BPTPrices.length);\\n\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            _initPoolPrices[i] = poolProperties[i].initialPoolPrice;\\n            _initWeights[i] = poolProperties[i].initialPoolWeight;\\n        }\\n\\n        for (uint256 i = 0; i < _BPTPrices.length; i++) {\\n            _weightedReturns[i] = _BPTPrices[i].scaledDiv(_initPoolPrices[i]).scaledMul(\\n                _initWeights[i]\\n            );\\n        }\\n\\n        uint256 _returnsSum = 0;\\n        for (uint256 i = 0; i < _BPTPrices.length; i++) {\\n            _returnsSum = _returnsSum.add(_weightedReturns[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _BPTPrices.length; i++) {\\n            _newWeights[i] = _weightedReturns[i].scaledDiv(_returnsSum);\\n        }\\n\\n        return _newWeights;\\n    }\\n\\n    function nav(uint256 _totalPortfolioValue) internal view returns (uint256 _nav) {\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply > 0) {\\n            _nav = _totalPortfolioValue.scaledDiv(totalSupply());\\n        } else {\\n            _nav = 1e18;\\n        }\\n\\n        return _nav;\\n    }\\n\\n    function calculatePortfolioWeights(uint256[] memory _BPTAmounts, uint256[] memory _BPTPrices)\\n        internal\\n        pure\\n        returns (uint256[] memory, uint256)\\n    {\\n        uint256[] memory _weights;\\n        uint256 _totalPortfolioValue = 0;\\n\\n        for (uint256 i = 0; i < _BPTAmounts.length; i++) {\\n            _totalPortfolioValue = _totalPortfolioValue.add(\\n                _BPTAmounts[i].scaledMul(_BPTPrices[i])\\n            );\\n        }\\n\\n        if (_totalPortfolioValue == 0) {\\n            return (_weights, _totalPortfolioValue);\\n        }\\n\\n        _weights = new uint256[](_BPTPrices.length);\\n\\n        for (uint256 i = 0; i < _BPTAmounts.length; i++) {\\n            _weights[i] = _BPTAmounts[i].scaledMul(_BPTPrices[i]).scaledDiv(_totalPortfolioValue);\\n        }\\n\\n        return (_weights, _totalPortfolioValue);\\n    }\\n\\n    function checkStablecoinHealth(uint256 stablecoinPrice, address stablecoinAddress)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        // TODO: revisit\\n        //Price\\n        bool _stablecoinHealthy = true;\\n\\n        if (stablecoinPrice >= 1.05e18) {\\n            _stablecoinHealthy = false;\\n        } else if (stablecoinPrice <= 0.95e18) {\\n            _stablecoinHealthy = false;\\n        }\\n\\n        //Volume (to do)\\n\\n        return _stablecoinHealthy;\\n    }\\n\\n    function absValueSub(uint256 _number1, uint256 _number2) internal pure returns (uint256) {\\n        if (_number1 >= _number2) {\\n            return _number1.sub(_number2);\\n        } else {\\n            return _number2.sub(_number1);\\n        }\\n    }\\n\\n    function getPrice(address _token, bytes32 _tokenSymbol) internal view returns (uint256) {\\n        return\\n            PriceOracle(_tokenAddressToProperties[_token].oracleAddress).getPrice(\\n                bytes32ToString(_tokenSymbol)\\n            );\\n    }\\n\\n    function bytes32ToString(bytes32 x) private pure returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint256 charCount = 0;\\n        for (uint256 j = 0; j < 32; j++) {\\n            bytes1 char = bytes1(bytes32(uint256(x) * 2**(8 * j)));\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    function getAllTokenPrices() internal view returns (uint256[] memory) {\\n        uint256[] memory _allUnderlyingPrices = new uint256[](underlyingTokenAddresses.length);\\n        for (uint256 i = 0; i < underlyingTokenAddresses.length; i++) {\\n            address _tokenAddress = underlyingTokenAddresses[i];\\n            bytes32 _tokenSymbol =\\n                _tokenAddressToProperties[underlyingTokenAddresses[i]].tokenSymbol;\\n            uint256 _tokenPrice = getPrice(_tokenAddress, _tokenSymbol);\\n            _allUnderlyingPrices[i] = _tokenPrice;\\n        }\\n        return _allUnderlyingPrices;\\n    }\\n\\n    function registerToken(address token, address oracleAddress) external {\\n        _tokenAddressToProperties[token].oracleAddress = oracleAddress;\\n    }\\n\\n    function calculateAllPoolPrices(uint256[] memory _allUnderlyingPrices)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _currentBPTPrices = new uint256[](poolProperties.length);\\n\\n        // Calculate BPT prices for all pools\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            BPool _bPool = BPool(poolProperties[i].poolAddress);\\n\\n            address[] memory _bPoolUnderlyingTokens = _bPool.getFinalTokens();\\n\\n            //For each pool fill the underlying token prices array\\n            uint256[] memory _bPoolUnderlyingTokenPrices =\\n                new uint256[](underlyingTokenAddresses.length);\\n            for (uint256 j = 0; j < _bPoolUnderlyingTokens.length; j++) {\\n                _bPoolUnderlyingTokenPrices[j] = _allUnderlyingPrices[\\n                    _tokenAddressToProperties[_bPoolUnderlyingTokens[j]].tokenIndex\\n                ];\\n            }\\n\\n            // Calculate BPT price for the pool\\n            _currentBPTPrices[i] = gyroPriceOracle.getBPTPrice(\\n                poolProperties[i].poolAddress,\\n                _bPoolUnderlyingTokenPrices\\n            );\\n        }\\n\\n        return _currentBPTPrices;\\n    }\\n\\n    function poolHealthHelper(\\n        uint256[] memory _allUnderlyingPrices,\\n        uint256 _poolIndex,\\n        address[] memory _BPTokensIn,\\n        bool _allPoolsHealthy\\n    ) internal view returns (bool, bool) {\\n        bool _poolHealthy = true;\\n\\n        BPool _bPool = BPool(poolProperties[_poolIndex].poolAddress);\\n        address[] memory _bPoolUnderlyingTokens = _bPool.getFinalTokens();\\n\\n        //Go through the underlying tokens within the pool\\n        for (uint256 j = 0; j < _bPoolUnderlyingTokens.length; j++) {\\n            if (_checkIsStablecoin[_bPoolUnderlyingTokens[j]]) {\\n                uint256 _stablecoinPrice =\\n                    _allUnderlyingPrices[\\n                        _tokenAddressToProperties[_bPoolUnderlyingTokens[j]].tokenIndex\\n                    ];\\n\\n                if (!checkStablecoinHealth(_stablecoinPrice, _BPTokensIn[_poolIndex])) {\\n                    _poolHealthy = false;\\n                    _allPoolsHealthy = false;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return (_poolHealthy, _allPoolsHealthy);\\n    }\\n\\n    function checkPoolsWithinEpsilon(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _idealWeights\\n    ) internal view returns (bool, bool[] memory) {\\n        bool _allPoolsWithinEpsilon = true;\\n        bool[] memory _poolsWithinEpsilon = new bool[](_BPTokensIn.length);\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            // Check 1: check whether hypothetical weight will be within epsilon\\n            _poolsWithinEpsilon[i] = true;\\n            if (_hypotheticalWeights[i] >= _idealWeights[i].add(portfolioWeightEpsilon)) {\\n                _allPoolsWithinEpsilon = false;\\n                _poolsWithinEpsilon[i] = false;\\n            } else if (_hypotheticalWeights[i].add(portfolioWeightEpsilon) <= _idealWeights[i]) {\\n                _allPoolsWithinEpsilon = false;\\n                _poolsWithinEpsilon[i] = false;\\n            }\\n        }\\n\\n        return (_allPoolsWithinEpsilon, _poolsWithinEpsilon);\\n    }\\n\\n    function checkAllPoolsHealthy(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _idealWeights,\\n        uint256[] memory _allUnderlyingPrices\\n    )\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool[] memory,\\n            bool[] memory\\n        )\\n    {\\n        // Check safety of input tokens\\n        bool _allPoolsWithinEpsilon;\\n        bool[] memory _poolsWithinEpsilon = new bool[](_BPTokensIn.length);\\n        bool[] memory _inputPoolHealth = new bool[](_BPTokensIn.length);\\n        bool _allPoolsHealthy = true;\\n\\n        (_allPoolsWithinEpsilon, _poolsWithinEpsilon) = checkPoolsWithinEpsilon(\\n            _BPTokensIn,\\n            _hypotheticalWeights,\\n            _idealWeights\\n        );\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            (_inputPoolHealth[i], _allPoolsHealthy) = poolHealthHelper(\\n                _allUnderlyingPrices,\\n                i,\\n                _BPTokensIn,\\n                _allPoolsHealthy\\n            );\\n        }\\n\\n        return (_allPoolsHealthy, _allPoolsWithinEpsilon, _inputPoolHealth, _poolsWithinEpsilon);\\n    }\\n\\n    function safeToMintOutsideEpsilon(\\n        address[] memory _BPTokensIn,\\n        bool[] memory _inputPoolHealth,\\n        uint256[] memory _inputBPTWeights,\\n        uint256[] memory _idealWeights,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _currentWeights,\\n        bool[] memory _poolsWithinEpsilon\\n    ) internal pure returns (bool _anyCheckFail) {\\n        //Check that amount above epsilon is decreasing\\n        //Check that unhealthy pools have input weight below ideal weight\\n        //If both true, then mint\\n        //note: should always be able to mint at the ideal weights!\\n        _anyCheckFail = false;\\n        for (uint256 i; i < _BPTokensIn.length; i++) {\\n            if (!_inputPoolHealth[i]) {\\n                if (_inputBPTWeights[i] > _idealWeights[i]) {\\n                    _anyCheckFail = true;\\n                    break;\\n                }\\n            }\\n\\n            if (!_poolsWithinEpsilon[i]) {\\n                // check if _hypotheticalWeights[i] is closer to _idealWeights[i] than _currentWeights[i]\\n                uint256 _distanceHypotheticalToIdeal =\\n                    absValueSub(_hypotheticalWeights[i], _idealWeights[i]);\\n                uint256 _distanceCurrentToIdeal = absValueSub(_currentWeights[i], _idealWeights[i]);\\n\\n                if (_distanceHypotheticalToIdeal >= _distanceCurrentToIdeal) {\\n                    _anyCheckFail = true;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (!_anyCheckFail) {\\n            return true;\\n        }\\n    }\\n\\n    function checkBPTokenOrder(address[] memory _BPTokensIn) internal view returns (bool _correct) {\\n        require(\\n            _BPTokensIn.length == poolProperties.length,\\n            \\\"bptokens do not have the correct number of addreses\\\"\\n        );\\n        _correct = true;\\n\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            if (poolProperties[i].poolAddress != _BPTokensIn[i]) {\\n                _correct = false;\\n                break;\\n            }\\n        }\\n\\n        return _correct;\\n    }\\n\\n    function checkUnhealthyMovesToIdeal(\\n        address[] memory _BPTokensIn,\\n        bool[] memory _inputPoolHealth,\\n        uint256[] memory _inputBPTWeights,\\n        uint256[] memory _idealWeights\\n    ) internal pure returns (bool _launch) {\\n        bool _unhealthyMovesTowardIdeal = true;\\n        for (uint256 i; i < _BPTokensIn.length; i++) {\\n            if (!_inputPoolHealth[i]) {\\n                if (_inputBPTWeights[i] > _idealWeights[i]) {\\n                    _unhealthyMovesTowardIdeal = false;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (_unhealthyMovesTowardIdeal) {\\n            _launch = true;\\n        }\\n    }\\n\\n    function safeToMint(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _idealWeights,\\n        uint256[] memory _allUnderlyingPrices,\\n        uint256[] memory _amountsIn,\\n        uint256[] memory _currentBPTPrices,\\n        uint256[] memory _currentWeights\\n    ) internal view returns (bool _launch) {\\n        _launch = false;\\n\\n        PoolStatus memory poolStatus;\\n\\n        (\\n            poolStatus._allPoolsHealthy,\\n            poolStatus._allPoolsWithinEpsilon,\\n            poolStatus._inputPoolHealth,\\n            poolStatus._poolsWithinEpsilon\\n        ) = checkAllPoolsHealthy(\\n            _BPTokensIn,\\n            _hypotheticalWeights,\\n            _idealWeights,\\n            _allUnderlyingPrices\\n        );\\n\\n        // if check 1 succeeds and all pools healthy, then proceed with minting\\n        if (poolStatus._allPoolsHealthy) {\\n            if (poolStatus._allPoolsWithinEpsilon) {\\n                _launch = true;\\n            }\\n        } else {\\n            // calculate proportional values of assets user wants to pay with\\n            (uint256[] memory _inputBPTWeights, uint256 _totalPortfolioValue) =\\n                calculatePortfolioWeights(_amountsIn, _currentBPTPrices);\\n            if (_totalPortfolioValue == 0) {\\n                _inputBPTWeights = _idealWeights;\\n            }\\n\\n            //Check that unhealthy pools have input weight below ideal weight. If true, mint\\n            if (poolStatus._allPoolsWithinEpsilon) {\\n                _launch = checkUnhealthyMovesToIdeal(\\n                    _BPTokensIn,\\n                    poolStatus._inputPoolHealth,\\n                    _inputBPTWeights,\\n                    _idealWeights\\n                );\\n            }\\n            //Outside of the epsilon boundary\\n            else {\\n                _launch = safeToMintOutsideEpsilon(\\n                    _BPTokensIn,\\n                    poolStatus._inputPoolHealth,\\n                    _inputBPTWeights,\\n                    _idealWeights,\\n                    _hypotheticalWeights,\\n                    _currentWeights,\\n                    poolStatus._poolsWithinEpsilon\\n                );\\n            }\\n        }\\n\\n        return _launch;\\n    }\\n\\n    function safeToRedeem(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _idealWeights,\\n        uint256[] memory _currentWeights\\n    ) internal view returns (bool) {\\n        bool _launch = false;\\n        bool _allPoolsWithinEpsilon;\\n        bool[] memory _poolsWithinEpsilon = new bool[](_BPTokensOut.length);\\n\\n        (_allPoolsWithinEpsilon, _poolsWithinEpsilon) = checkPoolsWithinEpsilon(\\n            _BPTokensOut,\\n            _hypotheticalWeights,\\n            _idealWeights\\n        );\\n        if (_allPoolsWithinEpsilon) {\\n            _launch = true;\\n            return _launch;\\n        }\\n\\n        // check if weights that are beyond epsilon boundary are closer to ideal than current weights\\n        bool _checkFail = false;\\n        for (uint256 i; i < _BPTokensOut.length; i++) {\\n            if (!_poolsWithinEpsilon[i]) {\\n                // check if _hypotheticalWeights[i] is closer to _idealWeights[i] than _currentWeights[i]\\n                uint256 _distanceHypotheticalToIdeal =\\n                    absValueSub(_hypotheticalWeights[i], _idealWeights[i]);\\n                uint256 _distanceCurrentToIdeal = absValueSub(_currentWeights[i], _idealWeights[i]);\\n\\n                if (_distanceHypotheticalToIdeal >= _distanceCurrentToIdeal) {\\n                    _checkFail = true;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (!_checkFail) {\\n            _launch = true;\\n        }\\n\\n        return _launch;\\n    }\\n\\n    function calculateAllWeights(\\n        uint256[] memory _currentBPTPrices,\\n        address[] memory _BPTokens,\\n        uint256[] memory _amountsIn,\\n        uint256[] memory _amountsOut\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256[] memory _idealWeights,\\n            uint256[] memory _currentWeights,\\n            uint256[] memory _hypotheticalWeights,\\n            uint256 _nav,\\n            uint256 _totalPortfolioValue\\n        )\\n    {\\n        //Calculate the up to date ideal portfolio weights\\n        _idealWeights = calculateImpliedPoolWeights(_currentBPTPrices);\\n\\n        //Calculate the hypothetical weights if the new BPT tokens were added\\n        uint256[] memory _BPTNewAmounts = new uint256[](_BPTokens.length);\\n        uint256[] memory _BPTCurrentAmounts = new uint256[](_BPTokens.length);\\n\\n        for (uint256 i = 0; i < _BPTokens.length; i++) {\\n            BPool _bPool = BPool(_BPTokens[i]);\\n            _BPTCurrentAmounts[i] = _bPool.balanceOf(address(this));\\n            _BPTNewAmounts[i] = _BPTCurrentAmounts[i].add(_amountsIn[i]).sub(_amountsOut[i]);\\n        }\\n\\n        (_currentWeights, _totalPortfolioValue) = calculatePortfolioWeights(\\n            _BPTCurrentAmounts,\\n            _currentBPTPrices\\n        );\\n        if (_totalPortfolioValue == 0) {\\n            _currentWeights = _idealWeights;\\n        }\\n\\n        _nav = nav(_totalPortfolioValue);\\n\\n        (_hypotheticalWeights, ) = calculatePortfolioWeights(_BPTNewAmounts, _currentBPTPrices);\\n\\n        return (_idealWeights, _currentWeights, _hypotheticalWeights, _nav, _totalPortfolioValue);\\n    }\\n\\n    //_amountsIn in should have a zero index if nothing has been submitted for a particular token\\n    // _BPTokensIn and _amountsIn should have same indexes as poolProperties\\n    function mint(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted\\n    ) public override returns (uint256 amountToMint) {\\n        bool realMint = true;\\n\\n        FlowLogger memory flowLogger;\\n\\n        bool _launch;\\n        uint256 errorCode;\\n\\n        (\\n            _launch,\\n            amountToMint,\\n            errorCode,\\n            flowLogger._inflowHistory,\\n            flowLogger._outflowHistory,\\n            flowLogger._currentBlock,\\n            flowLogger._lastSeenBlock\\n        ) = mintChecksPass(_BPTokensIn, _amountsIn, _minGyroMinted, realMint);\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            bool success =\\n                IERC20(_BPTokensIn[i]).transferFrom(msg.sender, address(this), _amountsIn[i]);\\n            require(success, \\\"failed to transfer tokens, check allowance\\\");\\n        }\\n\\n        _mint(msg.sender, amountToMint);\\n\\n        finalizeFlowLogger(\\n            flowLogger._inflowHistory,\\n            flowLogger._outflowHistory,\\n            amountToMint,\\n            0,\\n            flowLogger._currentBlock,\\n            flowLogger._lastSeenBlock\\n        );\\n\\n        emit Mint(msg.sender, amountToMint);\\n\\n        return amountToMint;\\n    }\\n\\n    function mintChecksPass(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted,\\n        bool realMint\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (Weights memory weights, FlowLogger memory flowLogger) =\\n            mintChecksPassInternal(_BPTokensIn, _amountsIn, _minGyroMinted, realMint);\\n\\n        return (\\n            weights._launch,\\n            weights.gyroAmount,\\n            weights.errorCode,\\n            flowLogger._inflowHistory,\\n            flowLogger._outflowHistory,\\n            flowLogger._currentBlock,\\n            flowLogger._lastSeenBlock\\n        );\\n    }\\n\\n    function mintChecksPassInternal(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted,\\n        bool realMint\\n    ) internal view returns (Weights memory, FlowLogger memory) {\\n        require(\\n            _BPTokensIn.length == _amountsIn.length,\\n            \\\"tokensIn and valuesIn should have the same number of elements\\\"\\n        );\\n\\n        //Filter 1: Require that the tokens are supported and in correct order\\n        bool _orderCorrect = checkBPTokenOrder(_BPTokensIn);\\n        require(_orderCorrect, \\\"Input tokens in wrong order or contains invalid tokens\\\");\\n\\n        uint256[] memory _allUnderlyingPrices = getAllTokenPrices();\\n\\n        uint256[] memory _currentBPTPrices = calculateAllPoolPrices(_allUnderlyingPrices);\\n\\n        Weights memory weights;\\n\\n        weights._zeroArray = new uint256[](_BPTokensIn.length);\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            weights._zeroArray[i] = 0;\\n        }\\n\\n        (\\n            weights._idealWeights,\\n            weights._currentWeights,\\n            weights._hypotheticalWeights,\\n            weights._nav,\\n            weights._totalPortfolioValue\\n        ) = calculateAllWeights(_currentBPTPrices, _BPTokensIn, _amountsIn, weights._zeroArray);\\n\\n        weights._launch = safeToMint(\\n            _BPTokensIn,\\n            weights._hypotheticalWeights,\\n            weights._idealWeights,\\n            _allUnderlyingPrices,\\n            _amountsIn,\\n            _currentBPTPrices,\\n            weights._currentWeights\\n        );\\n\\n        weights.errorCode = 0;\\n        if (realMint) {\\n            require(\\n                weights._launch,\\n                \\\"This combination of tokens would move gyroscope weights too far from target.\\\"\\n            );\\n        } else {\\n            weights.errorCode |= WOULD_UNBALANCE_GYROSCOPE;\\n        }\\n\\n        weights._dollarValue = 0;\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            weights._dollarValue = weights._dollarValue.add(\\n                _amountsIn[i].scaledMul(_currentBPTPrices[i])\\n            );\\n        }\\n\\n        FlowLogger memory flowLogger;\\n        (\\n            flowLogger._inflowHistory,\\n            flowLogger._outflowHistory,\\n            flowLogger._currentBlock,\\n            flowLogger._lastSeenBlock\\n        ) = initializeFlowLogger();\\n\\n        weights.gyroAmount = gyroPriceOracle.getAmountToMint(\\n            weights._dollarValue,\\n            flowLogger._inflowHistory,\\n            weights._nav\\n        );\\n\\n        if (realMint) {\\n            require(weights.gyroAmount >= _minGyroMinted, \\\"Too much slippage is expected\\\");\\n        } else {\\n            if (weights.gyroAmount < _minGyroMinted) {\\n                weights._launch = false;\\n                weights.errorCode |= TOO_MUCH_SLIPPAGE;\\n            }\\n        }\\n\\n        return (weights, flowLogger);\\n    }\\n\\n    function redeemChecksPass(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed,\\n        bool realRedeem\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (Weights memory weights, FlowLogger memory flowLogger) =\\n            redeemChecksPassInternal(_BPTokensOut, _amountsOut, _maxGyroRedeemed, realRedeem);\\n        return (\\n            weights._launch,\\n            weights.gyroAmount,\\n            weights.errorCode,\\n            flowLogger._inflowHistory,\\n            flowLogger._outflowHistory,\\n            flowLogger._currentBlock,\\n            flowLogger._lastSeenBlock\\n        );\\n    }\\n\\n    function redeemChecksPassInternal(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed,\\n        bool realRedeem\\n    ) internal view returns (Weights memory, FlowLogger memory) {\\n        require(\\n            _BPTokensOut.length == _amountsOut.length,\\n            \\\"tokensIn and valuesIn should have the same number of elements\\\"\\n        );\\n\\n        //Filter 1: Require that the tokens are supported and in correct order\\n        require(\\n            checkBPTokenOrder(_BPTokensOut),\\n            \\\"Input tokens in wrong order or contains invalid tokens\\\"\\n        );\\n\\n        Weights memory weights;\\n\\n        weights._zeroArray = new uint256[](_BPTokensOut.length);\\n        for (uint256 i = 0; i < _BPTokensOut.length; i++) {\\n            weights._zeroArray[i] = 0;\\n        }\\n\\n        uint256[] memory _allUnderlyingPrices = getAllTokenPrices();\\n\\n        uint256[] memory _currentBPTPrices = calculateAllPoolPrices(_allUnderlyingPrices);\\n\\n        (\\n            weights._idealWeights,\\n            weights._currentWeights,\\n            weights._hypotheticalWeights,\\n            weights._nav,\\n            weights._totalPortfolioValue\\n        ) = calculateAllWeights(_currentBPTPrices, _BPTokensOut, weights._zeroArray, _amountsOut);\\n\\n        weights._launch = safeToRedeem(\\n            _BPTokensOut,\\n            weights._hypotheticalWeights,\\n            weights._idealWeights,\\n            weights._currentWeights\\n        );\\n\\n        weights.errorCode = 0;\\n        if (realRedeem) {\\n            require(\\n                weights._launch,\\n                \\\"This combination of tokens would move gyroscope weights too far from target.\\\"\\n            );\\n        } else {\\n            weights.errorCode |= WOULD_UNBALANCE_GYROSCOPE;\\n        }\\n\\n        weights._dollarValue = 0;\\n\\n        for (uint256 i = 0; i < _BPTokensOut.length; i++) {\\n            weights._dollarValue = weights._dollarValue.add(\\n                _amountsOut[i].scaledMul(_currentBPTPrices[i])\\n            );\\n        }\\n\\n        FlowLogger memory flowLogger;\\n        (\\n            flowLogger._inflowHistory,\\n            flowLogger._outflowHistory,\\n            flowLogger._currentBlock,\\n            flowLogger._lastSeenBlock\\n        ) = initializeFlowLogger();\\n\\n        weights.gyroAmount = gyroPriceOracle.getAmountToRedeem(\\n            weights._dollarValue,\\n            flowLogger._outflowHistory,\\n            weights._nav\\n        );\\n\\n        if (realRedeem) {\\n            require(weights.gyroAmount <= _maxGyroRedeemed, \\\"Too much slippage is expected\\\");\\n        } else {\\n            if (weights.gyroAmount > _maxGyroRedeemed) {\\n                weights._launch = false;\\n                weights.errorCode |= TOO_MUCH_SLIPPAGE;\\n            }\\n        }\\n\\n        return (weights, flowLogger);\\n    }\\n\\n    function redeem(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed\\n    ) public override returns (uint256 _gyroRedeemed) {\\n        bool realRedeem = true;\\n        bool _launch;\\n        uint256 errorCode;\\n\\n        FlowLogger memory flowLogger;\\n\\n        (\\n            _launch,\\n            _gyroRedeemed,\\n            errorCode,\\n            flowLogger._inflowHistory,\\n            flowLogger._outflowHistory,\\n            flowLogger._currentBlock,\\n            flowLogger._lastSeenBlock\\n        ) = redeemChecksPass(_BPTokensOut, _amountsOut, _maxGyroRedeemed, realRedeem);\\n\\n        _burn(msg.sender, _gyroRedeemed);\\n\\n        gyroRouter.withdraw(_BPTokensOut, _amountsOut);\\n\\n        for (uint256 i = 0; i < _amountsOut.length; i++) {\\n            bool success =\\n                IERC20(_BPTokensOut[i]).transferFrom(address(this), msg.sender, _amountsOut[i]);\\n            require(success, \\\"failed to transfer tokens\\\");\\n        }\\n\\n        emit Redeem(msg.sender, _gyroRedeemed);\\n        finalizeFlowLogger(\\n            flowLogger._inflowHistory,\\n            flowLogger._outflowHistory,\\n            0,\\n            _gyroRedeemed,\\n            flowLogger._currentBlock,\\n            flowLogger._lastSeenBlock\\n        );\\n        return _gyroRedeemed;\\n    }\\n\\n    function initializeFlowLogger()\\n        internal\\n        view\\n        returns (\\n            uint256 _inflowHistory,\\n            uint256 _outflowHistory,\\n            uint256 _currentBlock,\\n            uint256 _lastSeenBlock\\n        )\\n    {\\n        _lastSeenBlock = lastSeenBlock;\\n        _currentBlock = block.number;\\n        _inflowHistory = inflowHistory;\\n        _outflowHistory = outflowHistory;\\n\\n        uint256 _memoryParam = memoryParam;\\n\\n        if (_lastSeenBlock < _currentBlock) {\\n            _inflowHistory = _inflowHistory.scaledMul(\\n                _memoryParam.scaledPow(_currentBlock.sub(_lastSeenBlock))\\n            );\\n            _outflowHistory = _outflowHistory.scaledMul(\\n                _memoryParam.scaledPow(_currentBlock.sub(_lastSeenBlock))\\n            );\\n        }\\n\\n        return (_inflowHistory, _outflowHistory, _currentBlock, _lastSeenBlock);\\n    }\\n\\n    function finalizeFlowLogger(\\n        uint256 _inflowHistory,\\n        uint256 _outflowHistory,\\n        uint256 _gyroMinted,\\n        uint256 _gyroRedeemed,\\n        uint256 _currentBlock,\\n        uint256 _lastSeenBlock\\n    ) internal {\\n        if (_gyroMinted > 0) {\\n            inflowHistory = _inflowHistory.add(_gyroMinted);\\n        }\\n        if (_gyroRedeemed > 0) {\\n            outflowHistory = _outflowHistory.add(_gyroRedeemed);\\n        }\\n        if (_lastSeenBlock < _currentBlock) {\\n            lastSeenBlock = _currentBlock;\\n        }\\n    }\\n\\n    function poolAddresses() public view returns (address[] memory) {\\n        address[] memory _addresses = new address[](poolProperties.length);\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            _addresses[i] = poolProperties[i].poolAddress;\\n        }\\n        return _addresses;\\n    }\\n\\n    function getUnderlyingTokenAddresses() external view returns (address[] memory) {\\n        address[] memory _addresses = new address[](underlyingTokenAddresses.length);\\n        for (uint256 i = 0; i < underlyingTokenAddresses.length; i++) {\\n            _addresses[i] = underlyingTokenAddresses[i];\\n        }\\n        return _addresses;\\n    }\\n}\\n\",\"keccak256\":\"0x0bf321d729e70aa63c58a8149f32c73f853fe63d9b24b97995a41adfa5e93fce\",\"license\":\"Unlicense\"},\"contracts/GyroPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./balancer/BPool.sol\\\";\\nimport \\\"./abdk/ABDKMath64x64.sol\\\";\\nimport \\\"./compound/UniswapAnchoredView.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./ExtendedMath.sol\\\";\\n\\ninterface PriceOracle {\\n    function getPrice(string memory tokenSymbol) external view returns (uint256);\\n}\\n\\ninterface GyroPriceOracle {\\n    function getAmountToMint(\\n        uint256 _dollarValueIn,\\n        uint256 _inflowHistory,\\n        uint256 _nav\\n    ) external view returns (uint256);\\n\\n    function getAmountToRedeem(\\n        uint256 _dollarValueOut,\\n        uint256 _outflowHistory,\\n        uint256 _nav\\n    ) external view returns (uint256 _gyroAmount);\\n\\n    function getBPTPrice(address _bPoolAddress, uint256[] memory _underlyingPrices)\\n        external\\n        view\\n        returns (uint256 _bptPrice);\\n}\\n\\ncontract GyroPriceOracleV1 is GyroPriceOracle {\\n    using ExtendedMath for int128;\\n    using ExtendedMath for uint256;\\n    using ABDKMath64x64 for uint256;\\n    using ABDKMath64x64 for int128;\\n    using SafeMath for uint256;\\n\\n    uint256 constant bpoolDecimals = 18;\\n\\n    function getAmountToMint(\\n        uint256 _dollarValueIn,\\n        uint256 _inflowHistory,\\n        uint256 _nav\\n    ) external pure override returns (uint256 _gyroAmount) {\\n        uint256 _one = 1e18;\\n        if (_nav < _one) {\\n            _gyroAmount = _dollarValueIn;\\n        } else {\\n            // gyroAmount = dollarValueIn * (1 - eps_inflowHistory) or min of 0\\n            uint256 _eps = 1e11;\\n            uint256 _scaling = _eps.scaledMul(_inflowHistory);\\n            if (_scaling >= _one) {\\n                _gyroAmount = 0;\\n            } else {\\n                _gyroAmount = _dollarValueIn.scaledMul(_one.sub(_scaling));\\n            }\\n        }\\n        _gyroAmount = _dollarValueIn;\\n        return _gyroAmount;\\n    }\\n\\n    function getAmountToRedeem(\\n        uint256 _dollarValueOut,\\n        uint256 _outflowHistory,\\n        uint256 _nav\\n    ) external pure override returns (uint256 _gyroAmount) {\\n        if (_nav < 1e18) {\\n            // gyroAmount = dollarValueOut * (1 + eps*outflowHistory)\\n            uint256 _eps = 1e11;\\n            uint256 _scaling = _eps.scaledMul(_outflowHistory).add(1e18);\\n            _gyroAmount = _dollarValueOut.scaledMul(_scaling);\\n        } else {\\n            _gyroAmount = _dollarValueOut;\\n        }\\n\\n        return _gyroAmount;\\n    }\\n\\n    function getBPTPrice(address _bPoolAddress, uint256[] memory _underlyingPrices)\\n        public\\n        view\\n        override\\n        returns (uint256 _bptPrice)\\n    {\\n        /* calculations:\\n            bptSupply = # of BPT tokens\\n            bPoolWeights = array of pool weights (require _underlyingPrices comes in same order)\\n            k = constant = product of reserves^weight\\n            bptPrice = (k * product of (p_i / w_i)^w_i ) / bptSupply\\n\\n            functions from ABDKMath64x64 library\\n            -- exp_2 = binary exponent\\n            -- log_2 = binary logarithm\\n            -- mul = calculate x*y\\n\\n            x^y = 2^(y log_2 x)\\n            exp_2( mul(y, log_2(x)) )\\n        */\\n        BPool _bPool = BPool(_bPoolAddress);\\n        uint256 _bptSupply = _bPool.totalSupply();\\n        address[] memory _tokens = _bPool.getFinalTokens();\\n\\n        uint256 _k = uint256(1e18); // check that these are the right to get value 1\\n        uint256 _weightedProd = uint256(1e18);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            uint256 _weight = _bPool.getNormalizedWeight(_tokens[i]);\\n            uint256 _price = _underlyingPrices[i];\\n            uint256 _tokenBalance = _bPool.getBalance(_tokens[i]);\\n            uint256 _decimals = ERC20(_tokens[i]).decimals();\\n            // _k = _k * _tokenBalance ** _weight\\n            // console.log(\\\"balance\\\", _tokenBalance, \\\"weight\\\", _weight, \\\"decimal\\\", _decimals);\\n\\n            if (_decimals < bpoolDecimals) {\\n                _tokenBalance = _tokenBalance.mul(10**(bpoolDecimals - _decimals));\\n                _price = _price.mul(10**(bpoolDecimals - _decimals));\\n            }\\n\\n            // console.log(\\\"balance\\\", _tokenBalance, \\\"weight\\\", _weight);\\n            // console.log(\\\"decimal\\\", _decimals, \\\"price\\\", _price);\\n\\n            _k = _k.mulPow(_tokenBalance, _weight, bpoolDecimals);\\n\\n            // _weightedProd = _weightedProd * (_price / _weight) ** _weight;\\n            _weightedProd = _weightedProd.mulPow(\\n                _price.scaledDiv(_weight, bpoolDecimals),\\n                _weight,\\n                bpoolDecimals\\n            );\\n            // console.log(\\\"_k\\\", _k, \\\"_weightedProd\\\", _weightedProd);\\n        }\\n\\n        uint256 result = _k.scaledMul(_weightedProd).scaledDiv(_bptSupply);\\n        // console.log(\\\"final _weightedProd\\\", _weightedProd, \\\"supply\\\", _bptSupply);\\n        console.log(\\\"final _k\\\", _k, \\\"result\\\", result);\\n        return result;\\n    }\\n}\\n\\ncontract CompoundPriceWrapper is PriceOracle {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant oraclePriceScale = 1000000;\\n    address compoundOracle;\\n\\n    constructor(address _compoundOracle) {\\n        compoundOracle = _compoundOracle;\\n    }\\n\\n    function getPrice(string memory tokenSymbol) public view override returns (uint256) {\\n        if (keccak256(bytes(tokenSymbol)) == keccak256(bytes(\\\"WETH\\\"))) {\\n            tokenSymbol = \\\"ETH\\\";\\n        }\\n        UniswapAnchoredView oracle = UniswapAnchoredView(compoundOracle);\\n        uint256 unscaledPrice = oracle.price(tokenSymbol);\\n        TokenConfig memory tokenConfig = oracle.getTokenConfigBySymbol(tokenSymbol);\\n        return unscaledPrice.mul(tokenConfig.baseUnit).div(oraclePriceScale);\\n    }\\n}\\n\\ncontract DummyPriceWrapper is PriceOracle {\\n    function getPrice(string memory tokenSymbol) public pure override returns (uint256) {\\n        if (keccak256(bytes(tokenSymbol)) == keccak256(bytes(\\\"DAI\\\"))) {\\n            return 1e18;\\n        } else if (keccak256(bytes(tokenSymbol)) == keccak256(bytes(\\\"USDC\\\"))) {\\n            return 1e6;\\n        } else if (keccak256(bytes(tokenSymbol)) == keccak256(bytes(\\\"WETH\\\"))) {\\n            return 1350e18;\\n        } else {\\n            revert(\\\"symbol not supported\\\");\\n        }\\n    }\\n}\\n\\n// contract MakerPriceWrapper is PriceOracle {\\n//     address makerOracle;\\n\\n//     constructor(address _makerOracle) {\\n//         makerOracle = _makerOracle;\\n//     }\\n\\n//     // function getPrice(address token, string tokenSymbol) external returns (uint256) {\\n//     //     return UniswapPriceOracle(makerOracle).getPriceOtherName(token);\\n//     // }\\n// }\\n\",\"keccak256\":\"0x3031f17d1e3c951be9e245147558fbeba29f12ea28ef97f9a84e15aa2df8e813\",\"license\":\"Unlicense\"},\"contracts/GyroRouter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./GyroFund.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./abdk/ABDKMath64x64.sol\\\";\\n\\ninterface GyroRouter {\\n    function deposit(address[] memory _tokensIn, uint256[] memory _amountsIn)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function withdraw(address[] memory _tokensOut, uint256[] memory _amountsOut)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0x7146992bbbc45778beb90ababd052b0d8d775ca80046915762349a8592a1d76d\",\"license\":\"Unlicense\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function initializeOwner() external {\\n        require(_owner == address(0), \\\"owner already initialized\\\");\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8ce2fd266470f41ea749996d52c28d3486ed19766178a46e9991683b60129bb7\",\"license\":\"MIT\"},\"contracts/abdk/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128(x << 64);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        return int64(x >> 64);\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        require(\\n            x <= 0x7FFFFFFFFFFFFFFF,\\n            \\\"value is too high to be transformed in a 64.64-bit number\\\"\\n        );\\n        return int128(x << 64);\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number scaled with 10^decimals into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param decimal scale of the number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromScaled(uint256 x, uint256 decimal) internal pure returns (int128) {\\n        uint256 scale = 10**decimal;\\n        int128 wholeNumber = fromUInt(x / scale);\\n        int128 decimalNumber = div(fromUInt(x % scale), fromUInt(scale));\\n        return add(wholeNumber, decimalNumber);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        require(x >= 0);\\n        return uint64(x >> 64);\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        int256 result = x >> 64;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        return int256(x) << 64;\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) + y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) - y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = (int256(x) * y) >> 64;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        if (x == MIN_64x64) {\\n            require(\\n                y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n                    y <= 0x1000000000000000000000000000000000000000000000000\\n            );\\n            return -y << 63;\\n        } else {\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x;\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint256 absoluteResult = mulu(x, uint256(y));\\n            if (negativeResult) {\\n                require(\\n                    absoluteResult <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    absoluteResult <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(absoluteResult);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) return 0;\\n\\n        require(x >= 0);\\n\\n        uint256 lo = (uint256(x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n        uint256 hi = uint256(x) * (y >> 128);\\n\\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        hi <<= 64;\\n\\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n        return hi + lo;\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        require(y != 0);\\n        int256 result = (int256(x) << 64) / y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        require(y != 0);\\n\\n        bool negativeResult = false;\\n        if (x < 0) {\\n            x = -x; // We rely on overflow behavior here\\n            negativeResult = true;\\n        }\\n        if (y < 0) {\\n            y = -y; // We rely on overflow behavior here\\n            negativeResult = !negativeResult;\\n        }\\n        uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n        if (negativeResult) {\\n            require(absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128(absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128(absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        require(y != 0);\\n        uint128 result = divuu(x, y);\\n        require(result <= uint128(MAX_64x64));\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        require(x != MIN_64x64);\\n        return -x;\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        require(x != MIN_64x64);\\n        return x < 0 ? -x : x;\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        require(x != 0);\\n        int256 result = int256(0x100000000000000000000000000000000) / x;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        return int128((int256(x) + int256(y)) >> 1);\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        int256 m = int256(x) * int256(y);\\n        require(m >= 0);\\n        require(m < 0x4000000000000000000000000000000000000000000000000000000000000000);\\n        return int128(sqrtu(uint256(m)));\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        uint256 absoluteResult;\\n        bool negativeResult = false;\\n        if (x >= 0) {\\n            absoluteResult = powu(uint256(x) << 63, y);\\n        } else {\\n            // We rely on overflow behavior here\\n            absoluteResult = powu(uint256(uint128(-x)) << 63, y);\\n            negativeResult = y & 1 > 0;\\n        }\\n\\n        absoluteResult >>= 63;\\n\\n        if (negativeResult) {\\n            require(absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128(absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128(absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        require(x >= 0);\\n        return int128(sqrtu(uint256(x) << 64));\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        require(x > 0);\\n\\n        int256 msb = 0;\\n        int256 xc = x;\\n        if (xc >= 0x10000000000000000) {\\n            xc >>= 64;\\n            msb += 64;\\n        }\\n        if (xc >= 0x100000000) {\\n            xc >>= 32;\\n            msb += 32;\\n        }\\n        if (xc >= 0x10000) {\\n            xc >>= 16;\\n            msb += 16;\\n        }\\n        if (xc >= 0x100) {\\n            xc >>= 8;\\n            msb += 8;\\n        }\\n        if (xc >= 0x10) {\\n            xc >>= 4;\\n            msb += 4;\\n        }\\n        if (xc >= 0x4) {\\n            xc >>= 2;\\n            msb += 2;\\n        }\\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n        int256 result = (msb - 64) << 64;\\n        uint256 ux = uint256(x) << uint256(127 - msb);\\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n            ux *= ux;\\n            uint256 b = ux >> 255;\\n            ux >>= 127 + b;\\n            result += bit * int256(b);\\n        }\\n\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        require(x > 0);\\n\\n        return int128((uint256(log_2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128);\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        require(x < 0x400000000000000000, \\\"exponent too large\\\"); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        uint256 result = 0x80000000000000000000000000000000;\\n\\n        if (x & 0x8000000000000000 > 0)\\n            result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n        if (x & 0x4000000000000000 > 0)\\n            result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n        if (x & 0x2000000000000000 > 0)\\n            result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n        if (x & 0x1000000000000000 > 0)\\n            result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n        if (x & 0x800000000000000 > 0)\\n            result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n        if (x & 0x400000000000000 > 0)\\n            result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n        if (x & 0x200000000000000 > 0)\\n            result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n        if (x & 0x100000000000000 > 0)\\n            result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n        if (x & 0x80000000000000 > 0)\\n            result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n        if (x & 0x40000000000000 > 0)\\n            result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n        if (x & 0x20000000000000 > 0)\\n            result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n        if (x & 0x10000000000000 > 0)\\n            result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n        if (x & 0x8000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n        if (x & 0x4000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n        if (x & 0x2000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n        if (x & 0x1000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n        if (x & 0x800000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n        if (x & 0x400000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n        if (x & 0x200000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n        if (x & 0x100000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n        if (x & 0x80000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n        if (x & 0x40000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n        if (x & 0x20000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n        if (x & 0x10000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n        if (x & 0x8000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n        if (x & 0x4000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n        if (x & 0x2000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n        if (x & 0x1000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n        if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n        if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n        if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n        if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n        if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n        if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n        if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n        if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n        if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n        if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n        if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n        if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n        if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n        if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n        if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n        if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n        if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n        if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n        if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n        if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n        if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n        if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n        if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n        if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n        if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n        if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n        if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n        if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n        if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n        if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n        if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n        if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n        if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n        if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n        if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n        if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n        result >>= uint256(63 - (x >> 64));\\n        require(result <= uint256(MAX_64x64));\\n\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        require(x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        return exp_2(int128((int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128));\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        require(y != 0);\\n\\n        uint256 result;\\n\\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;\\n        else {\\n            uint256 msb = 192;\\n            uint256 xc = x >> 192;\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 hi = result * (y >> 128);\\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 xh = x >> 192;\\n            uint256 xl = x << 64;\\n\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n            lo = hi << 128;\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n\\n            assert(xh == hi >> 128);\\n\\n            result += xl / y;\\n        }\\n\\n        require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return uint128(result);\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n     * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x unsigned 129.127-bit fixed point number\\n     * @param y uint256 value\\n     * @return unsigned 129.127-bit fixed point number\\n     */\\n    function powu(uint256 x, uint256 y) private pure returns (uint256) {\\n        if (y == 0) return 0x80000000000000000000000000000000;\\n        else if (x == 0) return 0;\\n        else {\\n            int256 msb = 0;\\n            uint256 xc = x;\\n            if (xc >= 0x100000000000000000000000000000000) {\\n                xc >>= 128;\\n                msb += 128;\\n            }\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 xe = msb - 127;\\n            if (xe > 0) x >>= uint256(xe);\\n            else x <<= uint256(-xe);\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n            int256 re = 0;\\n\\n            while (y > 0) {\\n                if (y & 1 > 0) {\\n                    result = result * x;\\n                    y -= 1;\\n                    re += xe;\\n                    if (\\n                        result >= 0x8000000000000000000000000000000000000000000000000000000000000000\\n                    ) {\\n                        result >>= 128;\\n                        re += 1;\\n                    } else result >>= 127;\\n                    if (re < -127) return 0; // Underflow\\n                    require(re < 128); // Overflow\\n                } else {\\n                    x = x * x;\\n                    y >>= 1;\\n                    xe <<= 1;\\n                    if (x >= 0x8000000000000000000000000000000000000000000000000000000000000000) {\\n                        x >>= 128;\\n                        xe += 1;\\n                    } else x >>= 127;\\n                    if (xe < -127) return 0; // Underflow\\n                    require(xe < 128); // Overflow\\n                }\\n            }\\n\\n            if (re > 0) result <<= uint256(re);\\n            else if (re < 0) result >>= uint256(-re);\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        if (x == 0) return 0;\\n        else {\\n            uint256 xx = x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) {\\n                xx >>= 128;\\n                r <<= 64;\\n            }\\n            if (xx >= 0x10000000000000000) {\\n                xx >>= 64;\\n                r <<= 32;\\n            }\\n            if (xx >= 0x100000000) {\\n                xx >>= 32;\\n                r <<= 16;\\n            }\\n            if (xx >= 0x10000) {\\n                xx >>= 16;\\n                r <<= 8;\\n            }\\n            if (xx >= 0x100) {\\n                xx >>= 8;\\n                r <<= 4;\\n            }\\n            if (xx >= 0x10) {\\n                xx >>= 4;\\n                r <<= 2;\\n            }\\n            if (xx >= 0x8) {\\n                r <<= 1;\\n            }\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1; // Seven iterations should be enough\\n            uint256 r1 = x / r;\\n            return uint128(r < r1 ? r : r1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe881dd705c66b4c400bd9face57305cafd279e085a02ed4fdbeceba79c4df1e4\",\"license\":\"BSD-4-Clause\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nabstract contract BColor {\\n    function getColor() external view virtual returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc977d6843f56b93de4e91e40d4ad5b5de31fbabcfc9a8db4a08f6a1046f84085\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0x0a8df6b935b1a1a008f55c2a9dc3e30d8a3438a203d901d3ae097dbce4421f19\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        // Charge the trading fee for the proportion of tokenAi\\n        // which is implicitly traded to the other pool tokens.\\n        // That proportion is (1- weightTokenIn)\\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee =\\n            bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee =\\n            bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee =\\n            bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut =\\n            bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0xbfc71c10fe96512921ba4c64f2304a453a5b7123fe8bf35bff95bebd5d3ce39c\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256, bool)\\n    {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x313eb1dcfe69101be7959570e6d4f4990866fd924ceccf8423871a22bf5e48e6\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        uint256 tokenAmountIn\\n    );\\n\\n    event LOG_EXIT(\\n        address indexed caller,\\n        address indexed tokenOut,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_CALL(\\n        bytes4 indexed sig,\\n        address indexed caller,\\n        bytes data\\n    ) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens()\\n        external\\n        view\\n        _viewlock_\\n        returns (address[] memory tokens)\\n    {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens()\\n        external\\n        view\\n        _viewlock_\\n        returns (address[] memory tokens)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256)\\n    {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight()\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256)\\n    {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256)\\n    {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256)\\n    {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_\\n    // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(\\n                token,\\n                msg.sender,\\n                bsub(tokenBalanceWithdrawn, tokenExitFee)\\n            );\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({\\n            bound: false,\\n            index: 0,\\n            denorm: 0,\\n            balance: 0\\n        });\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = BIERC20(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return\\n            calcSpotPrice(\\n                inRecord.balance,\\n                inRecord.denorm,\\n                outRecord.balance,\\n                outRecord.denorm,\\n                _swapFee\\n            );\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return\\n            calcSpotPrice(\\n                inRecord.balance,\\n                inRecord.denorm,\\n                outRecord.balance,\\n                outRecord.denorm,\\n                0\\n            );\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn)\\n        external\\n        _logs_\\n        _lock_\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        _logs_\\n        _lock_\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    )\\n        external\\n        _logs_\\n        _lock_\\n        returns (uint256 tokenAmountOut, uint256 spotPriceAfter)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(\\n            tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO),\\n            \\\"ERR_MAX_IN_RATIO\\\"\\n        );\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(\\n                inRecord.balance,\\n                inRecord.denorm,\\n                outRecord.balance,\\n                outRecord.denorm,\\n                _swapFee\\n            );\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(\\n            spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut),\\n            \\\"ERR_MATH_APPROX\\\"\\n        );\\n\\n        emit LOG_SWAP(\\n            msg.sender,\\n            tokenIn,\\n            tokenOut,\\n            tokenAmountIn,\\n            tokenAmountOut\\n        );\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    )\\n        external\\n        _logs_\\n        _lock_\\n        returns (uint256 tokenAmountIn, uint256 spotPriceAfter)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(\\n            tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO),\\n            \\\"ERR_MAX_OUT_RATIO\\\"\\n        );\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(\\n                inRecord.balance,\\n                inRecord.denorm,\\n                outRecord.balance,\\n                outRecord.denorm,\\n                _swapFee\\n            );\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(\\n            spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut),\\n            \\\"ERR_MATH_APPROX\\\"\\n        );\\n\\n        emit LOG_SWAP(\\n            msg.sender,\\n            tokenIn,\\n            tokenOut,\\n            tokenAmountIn,\\n            tokenAmountOut\\n        );\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(\\n            tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO),\\n            \\\"ERR_MAX_IN_RATIO\\\"\\n        );\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(\\n            tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO),\\n            \\\"ERR_MAX_IN_RATIO\\\"\\n        );\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(\\n            tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO),\\n            \\\"ERR_MAX_OUT_RATIO\\\"\\n        );\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(\\n            tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO),\\n            \\\"ERR_MAX_OUT_RATIO\\\"\\n        );\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = BIERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = BIERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x71fba88457cd926e3e5afdc073c1e9c3e3220471a0d5056d6ba63ec3fce11e5e\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BNum.sol\\\";\\n\\n// Highly opinionated token implementation\\n\\ninterface BIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, BIERC20 {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt)\\n        external\\n        returns (bool)\\n    {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt)\\n        external\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(\\n            msg.sender == src || amt <= _allowance[src][msg.sender],\\n            \\\"ERR_BTOKEN_BAD_CALLER\\\"\\n        );\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = bsub(\\n                _allowance[src][msg.sender],\\n                amt\\n            );\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xce31f6712f87e56b4a0b9293f3115c2039225a5b4ec20a389f6d8e3ebf4daf02\",\"license\":\"UNLICENSED\"},\"contracts/compound/UniswapAnchoredView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nenum PriceSource {\\n    FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n    FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n    REPORTER /// implies the price is set by the reporter\\n}\\n\\nstruct TokenConfig {\\n    address cToken;\\n    address underlying;\\n    bytes32 symbolHash;\\n    uint256 baseUnit;\\n    PriceSource priceSource;\\n    uint256 fixedPrice;\\n    address uniswapMarket;\\n    bool isUniswapReversed;\\n}\\n\\ninterface UniswapAnchoredView {\\n    function price(string calldata symbol) external view returns (uint256);\\n\\n    function getTokenConfigBySymbol(string memory symbol)\\n        external\\n        view\\n        returns (TokenConfig memory);\\n}\\n\",\"keccak256\":\"0x666349b4990b050a507ef283bd5feb0d5843cbb639cdbca515c99aa0240aa2ed\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xd3f9eb69241af8de5174a6cfa3da3cbc94e351dee495002d8675b665865ba417\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004c2d38038062004c2d83398181016040526101408110156200003857600080fd5b8151602083018051604051929492938301929190846401000000008211156200006057600080fd5b9083019060208201858111156200007657600080fd5b82518660208202830111640100000000821117156200009457600080fd5b82525081516020918201928201910280838360005b83811015620000c3578181015183820152602001620000a9565b5050505090500160405260200180516040519392919084640100000000821115620000ed57600080fd5b9083019060208201858111156200010357600080fd5b82518660208202830111640100000000821117156200012157600080fd5b82525081516020918201928201910280838360005b838110156200015057818101518382015260200162000136565b5050505091909101604081815260208401519084015160609094018051919694959294935090846401000000008211156200018a57600080fd5b908301906020820185811115620001a057600080fd5b8251866020820283011164010000000082111715620001be57600080fd5b82525081516020918201928201910280838360005b83811015620001ed578181015183820152602001620001d3565b50505050905001604052602001805160405193929190846401000000008211156200021757600080fd5b9083019060208201858111156200022d57600080fd5b82518660208202830111640100000000821117156200024b57600080fd5b82525081516020918201928201910280838360005b838110156200027a57818101518382015260200162000260565b5050505090500160405260200180516040519392919084640100000000821115620002a457600080fd5b908301906020820185811115620002ba57600080fd5b8251866020820283011164010000000082111715620002d857600080fd5b82525081516020918201928201910280838360005b8381101562000307578181015183820152602001620002ed565b50505050905001604052602001805160405193929190846401000000008211156200033157600080fd5b9083019060208201858111156200034757600080fd5b82518660208202830111640100000000821117156200036557600080fd5b82525081516020918201928201910280838360005b83811015620003945781810151838201526020016200037a565b505050509190910160408181526020938401518183018252601083526f23bcb9379029ba30b136329021b7b4b760811b85840190815282518084019093526004808452634759524f60e01b9684019690965283519197509295509093620003fe9350919062000d58565b5080516200041490600590602084019062000d58565b5050600680546001600160a01b03808b1661010002610100600160a81b031960ff199093166012908117939093161790925560078054928a166001600160a01b03199093169290921790915543600f55600060108190556011558290555084516200048790600d90602088019062000ded565b50600e8a905560005b8851811015620004e8576001600b60008b8481518110620004ad57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162000490565b5060005b88518110156200059857600960405180606001604052808b84815181106200051057fe5b60200260200101516001600160a01b031681526020018c84815181106200053357fe5b6020908102919091018101518252600091810182905283546001808201865594835291819020835160039093020180546001600160a01b0319166001600160a01b039093169290921782558201518184015560409091015160029091015501620004ec565b5060005b855181101562000673576040518060600160405280868381518110620005be57fe5b60200260200101516001600160a01b03168152602001858381518110620005e157fe5b602002602001015181526020018261ffff16815250600a60008884815181106200060757fe5b6020908102919091018101516001600160a01b039081168352828201939093526040918201600020845181546001600160a01b03191694169390931783558301516001808401919091559201516002909101805461ffff191661ffff909216919091179055016200059c565b5060006200068062000a23565b905060005b600954811015620009b557600060098281548110620006a057fe5b6000918252602082206003909102015460408051635f1dde9760e11b815290516001600160a01b039092169350839163be3bbd2e916004808201928692909190829003018186803b158015620006f557600080fd5b505afa1580156200070a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156200073457600080fd5b81019080805160405193929190846401000000008211156200075557600080fd5b9083019060208201858111156200076b57600080fd5b82518660208202830111640100000000821117156200078957600080fd5b82525081516020918201928201910280838360005b83811015620007b85781810151838201526020016200079e565b505050509050016040525050509050600081516001600160401b0381118015620007e157600080fd5b506040519080825280602002602001820160405280156200080c578160200160208202803683370190505b50905060005b8251811015620008905785600a60008584815181106200082e57fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002060020154815161ffff9091169081106200086757fe5b60200260200101518282815181106200087c57fe5b602090810291909101015260010162000812565b50600060098581548110620008a157fe5b600091825260208083206003909202909101546006546040805163305cbde760e01b81526001600160a01b0393841660048201818152602483019384528951604484015289519198506101009094049094169563305cbde79588958a959493606401928683019291909102908190849084905b838110156200092e57818101518382015260200162000914565b50505050905001935050505060206040518083038186803b1580156200095357600080fd5b505afa15801562000968573d6000803e3d6000fd5b505050506040513d60208110156200097f57600080fd5b505160098054879081106200099057fe5b6000918252602090912060026003909202010155505060019092019150620006859050565b5060005b835181101562000a11576001600c6000868481518110620009d657fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101620009b9565b50505050505050505050505062000e5c565b600d546060906000906001600160401b038111801562000a4257600080fd5b5060405190808252806020026020018201604052801562000a6d578160200160208202803683370190505b50905060005b600d5481101562000b18576000600d828154811062000a8e57fe5b6000918252602082200154600d80546001600160a01b039092169350600a918391908690811062000abb57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001812060010154915062000af1838362000b1e565b90508085858151811062000b0157fe5b602090810291909101015250505060010162000a73565b50905090565b6001600160a01b038083166000908152600a602052604081205490911663524f388962000b4b8462000c1a565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000b9957818101518382015260200162000b7f565b50505050905090810190601f16801562000bc75780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801562000be557600080fd5b505afa15801562000bfa573d6000803e3d6000fd5b505050506040513d602081101562000c1157600080fd5b50519392505050565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b602081101562000cb5576008810260020a85027fff0000000000000000000000000000000000000000000000000000000000000081161562000cab578084848151811062000c8d57fe5b60200101906001600160f81b031916908160001a9053506001909201915b5060010162000c43565b506000816001600160401b038111801562000ccf57600080fd5b506040519080825280601f01601f19166020018201604052801562000cfb576020820181803683370190505b50905060005b8281101562000d4f5783818151811062000d1757fe5b602001015160f81c60f81b82828151811062000d2f57fe5b60200101906001600160f81b031916908160001a90535060010162000d01565b50949350505050565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262000d90576000855562000ddb565b82601f1062000dab57805160ff191683800117855562000ddb565b8280016001018555821562000ddb579182015b8281111562000ddb57825182559160200191906001019062000dbe565b5062000de992915062000e45565b5090565b82805482825590600052602060002090810192821562000ddb579160200282015b8281111562000ddb57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000e0e565b5b8082111562000de9576000815560010162000e46565b613dc18062000e6c6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806370a08231116100de578063a652db1f11610097578063be48b5e411610071578063be48b5e414610837578063dd62ed3e1461083f578063f2fde38b1461086d578063f9522af5146108935761018e565b8063a652db1f146106a1578063a9059cbb146106e6578063af1a1531146107125761018e565b806370a082311461062f578063715018a6146106555780638da5cb5b1461065d5780638f7873ed1461066557806395d89b411461066d578063a457c2d7146106755761018e565b8063390976171161014b5780634f5548bb116101255780634f5548bb146104a257806355af8e18146104fa5780635e2a0023146105025780635f53837f146106275761018e565b806339097617146102e257806339509351146104465780634739f7e5146104725761018e565b806306fdde0314610193578063095ea7b31461021057806318160ddd1461025057806323b872dd1461026a5780632630c12f146102a0578063313ce567146102c4575b600080fd5b61019b6109bd565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d55781810151838201526020016101bd565b50505050905090810190601f1680156102025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61023c6004803603604081101561022657600080fd5b506001600160a01b038135169060200135610a53565b604080519115158252519081900360200190f35b610258610a71565b60408051918252519081900360200190f35b61023c6004803603606081101561028057600080fd5b506001600160a01b03813581169160208101359091169060400135610a77565b6102a8610afe565b604080516001600160a01b039092168252519081900360200190f35b6102cc610b0d565b6040805160ff9092168252519081900360200190f35b61040c600480360360808110156102f857600080fd5b810190602081018135600160201b81111561031257600080fd5b82018360208201111561032457600080fd5b803590602001918460208302840111600160201b8311171561034557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561039457600080fd5b8201836020820111156103a657600080fd5b803590602001918460208302840111600160201b831117156103c757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001351515610b16565b6040805197151588526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b61023c6004803603604081101561045c57600080fd5b506001600160a01b038135169060200135610b76565b6104a06004803603604081101561048857600080fd5b506001600160a01b0381358116916020013516610bc4565b005b6104aa610bf2565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104e65781810151838201526020016104ce565b505050509050019250505060405180910390f35b6102a8610ca7565b6102586004803603606081101561051857600080fd5b810190602081018135600160201b81111561053257600080fd5b82018360208201111561054457600080fd5b803590602001918460208302840111600160201b8311171561056557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b457600080fd5b8201836020820111156105c657600080fd5b803590602001918460208302840111600160201b831117156105e757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610cbb915050565b6104a0610e6e565b6102586004803603602081101561064557600080fd5b50356001600160a01b0316610ee0565b6104a0610efb565b6102a8610fa4565b6104aa610fb3565b61019b611063565b61023c6004803603604081101561068b57600080fd5b506001600160a01b0381351690602001356110c4565b6106be600480360360208110156106b757600080fd5b503561112c565b604080516001600160a01b039094168452602084019290925282820152519081900360600190f35b61023c600480360360408110156106fc57600080fd5b506001600160a01b038135169060200135611169565b6102586004803603606081101561072857600080fd5b810190602081018135600160201b81111561074257600080fd5b82018360208201111561075457600080fd5b803590602001918460208302840111600160201b8311171561077557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156107c457600080fd5b8201836020820111156107d657600080fd5b803590602001918460208302840111600160201b831117156107f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061117d915050565b6102a8611563565b6102586004803603604081101561085557600080fd5b506001600160a01b0381358116916020013516611572565b6104a06004803603602081101561088357600080fd5b50356001600160a01b031661159d565b61040c600480360360808110156108a957600080fd5b810190602081018135600160201b8111156108c357600080fd5b8201836020820111156108d557600080fd5b803590602001918460208302840111600160201b831117156108f657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561094557600080fd5b82018360208201111561095757600080fd5b803590602001918460208302840111600160201b8311171561097857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135151561169c565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a495780601f10610a1e57610100808354040283529160200191610a49565b820191906000526020600020905b815481529060010190602001808311610a2c57829003601f168201915b5050505050905090565b6000610a67610a606116b6565b84846116ba565b5060015b92915050565b60035490565b6000610a848484846117a6565b610af484610a906116b6565b610aef85604051806060016040528060288152602001613c6c602891396001600160a01b038a16600090815260026020526040812090610ace6116b6565b6001600160a01b031681526020810191909152604001600020549190611903565b6116ba565b5060019392505050565b6008546001600160a01b031681565b60065460ff1690565b6000806000806000806000806000610b308d8d8d8d61199a565b915091508160c001518261012001518360e00151836000015184602001518560400151866060015198509850985098509850985098505050949950949992975094509450565b6000610a67610b836116b6565b84610aef8560026000610b946116b6565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611d24565b6001600160a01b039182166000908152600a6020526040902080546001600160a01b03191691909216179055565b600d546060906000906001600160401b0381118015610c1057600080fd5b50604051908082528060200260200182016040528015610c3a578160200160208202803683370190505b50905060005b600d54811015610ca157600d8181548110610c5757fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610c8157fe5b6001600160a01b0390921660209283029190910190910152600101610c40565b50905090565b60065461010090046001600160a01b031681565b60006001610cc7613a41565b600080610cd68888888761169c565b60608a0152604089015260208801528652909650909250905060005b8851811015610dfe576000898281518110610d0957fe5b60200260200101516001600160a01b03166323b872dd33308c8681518110610d2d57fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015610d8b57600080fd5b505af1158015610d9f573d6000803e3d6000fd5b505050506040513d6020811015610db557600080fd5b5051905080610df55760405162461bcd60e51b815260040180806020018281038252602a815260200180613b2a602a913960400191505060405180910390fd5b50600101610cf2565b50610e093386611d85565b610e288360000151846020015187600087604001518860600151611e77565b604080513381526020810187905281517f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885929181900390910190a1505050509392505050565b6000546001600160a01b031615610ecc576040805162461bcd60e51b815260206004820152601960248201527f6f776e657220616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600080546001600160a01b03191633179055565b6001600160a01b031660009081526001602052604090205490565b6000546001600160a01b03163314610f5a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6009546060906000906001600160401b0381118015610fd157600080fd5b50604051908082528060200260200182016040528015610ffb578160200160208202803683370190505b50905060005b600954811015610ca1576009818154811061101857fe5b600091825260209091206003909102015482516001600160a01b039091169083908390811061104357fe5b6001600160a01b0390921660209283029190910190910152600101611001565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a495780601f10610a1e57610100808354040283529160200191610a49565b6000610a676110d16116b6565b84610aef85604051806060016040528060258152602001613d6760259139600260006110fb6116b6565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611903565b6009818154811061113c57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925083565b6000610a676111766116b6565b84846117a6565b60006001818061118b613a41565b61119788888887610b16565b606088015260408701526020860152845290965090935091506111ba3386611eb5565b60075460408051636f36b6cb60e11b8152600481019182528a5160448201528a516001600160a01b039093169263de6d6d96928c928c92829160248101916064909101906020808801910280838360005b8381101561122357818101518382015260200161120b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561126257818101518382015260200161124a565b50505050905001945050505050600060405180830381600087803b15801561128957600080fd5b505af115801561129d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156112c657600080fd5b8101908080516040519392919084600160201b8211156112e557600080fd5b9083019060208201858111156112fa57600080fd5b82518660208202830111600160201b8211171561131657600080fd5b82525081516020918201928201910280838360005b8381101561134357818101518382015260200161132b565b5050505090500160405260200180516040519392919084600160201b82111561136b57600080fd5b90830190602082018581111561138057600080fd5b82518660208202830111600160201b8211171561139c57600080fd5b82525081516020918201928201910280838360005b838110156113c95781810151838201526020016113b1565b50505050905001604052505050505060005b87518110156114fd5760008982815181106113f257fe5b60200260200101516001600160a01b03166323b872dd30338c868151811061141657fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561147457600080fd5b505af1158015611488573d6000803e3d6000fd5b505050506040513d602081101561149e57600080fd5b50519050806114f4576040805162461bcd60e51b815260206004820152601960248201527f6661696c656420746f207472616e7366657220746f6b656e7300000000000000604482015290519081900360640190fd5b506001016113db565b50604080513381526020810187905281517f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6929181900390910190a16115588160000151826020015160008885604001518660600151611e77565b505050509392505050565b6007546001600160a01b031681565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000546001600160a01b031633146115fc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166116415760405162461bcd60e51b8152600401808060200182810382526026815260200180613b546026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000806000806000806000610b308d8d8d8d611fb1565b3390565b6001600160a01b0383166116ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180613cda6024913960400191505060405180910390fd5b6001600160a01b0382166117445760405162461bcd60e51b8152600401808060200182810382526022815260200180613b7a6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166117eb5760405162461bcd60e51b8152600401808060200182810382526025815260200180613cb56025913960400191505060405180910390fd5b6001600160a01b0382166118305760405162461bcd60e51b8152600401808060200182810382526023815260200180613ae56023913960400191505060405180910390fd5b61183b838383612334565b61187881604051806060016040528060268152602001613b9c602691396001600160a01b0386166000908152600160205260409020549190611903565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546118a79082611d24565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156119925760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561195757818101518382015260200161193f565b50505050905090810190601f1680156119845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6119a2613a69565b6119aa613a41565b84518651146119ea5760405162461bcd60e51b815260040180806020018281038252603d815260200180613bc2603d913960400191505060405180910390fd5b6119f386612339565b611a2e5760405162461bcd60e51b8152600401808060200182810382526036815260200180613cfe6036913960400191505060405180910390fd5b611a36613a69565b86516001600160401b0381118015611a4d57600080fd5b50604051908082528060200260200182016040528015611a77578160200160208202803683370190505b5061010082015260005b8751811015611ab05760008261010001518281518110611a9d57fe5b6020908102919091010152600101611a81565b506000611abb6123ed565b90506000611ac8826124d9565b9050611adb818a8561010001518b612854565b60a088015260608701526040860181905260208601829052828652611b01928c92612a5e565b151560c0840152600060e08401528515611b5a578260c00151611b555760405162461bcd60e51b815260040180806020018281038252604c815260200180613bff604c913960600191505060405180910390fd5b611b66565b60e08301805160011790525b6000608084018190525b8951811015611bcd57611bc0611bb5838381518110611b8b57fe5b60200260200101518b8481518110611b9f57fe5b6020026020010151612b8690919063ffffffff16565b608086015190611d24565b6080850152600101611b70565b50611bd6613a41565b611bde612b94565b60608581019190915260408086019290925260208086018490529385526006546080890151918901518351630220ab7760e21b815260048101939093526024830194909452604482019390935290516101009092046001600160a01b031692630882addc92606480840193829003018186803b158015611c5d57600080fd5b505afa158015611c71573d6000803e3d6000fd5b505050506040513d6020811015611c8757600080fd5b50516101208501528615611cf457878461012001511115611cef576040805162461bcd60e51b815260206004820152601d60248201527f546f6f206d75636820736c697070616765206973206578706563746564000000604482015290519081900360640190fd5b611d14565b878461012001511115611d1457600060c085015260e08401805160021790525b9299929850919650505050505050565b600082820183811015611d7e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216611de0576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611dec60008383612334565b600354611df99082611d24565b6003556001600160a01b038216600090815260016020526040902054611e1f9082611d24565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b8315611e8b57611e878685611d24565b6010555b8215611e9f57611e9b8584611d24565b6011555b81811015611ead57600f8290555b505050505050565b6001600160a01b038216611efa5760405162461bcd60e51b8152600401808060200182810382526021815260200180613c946021913960400191505060405180910390fd5b611f0682600083612334565b611f4381604051806060016040528060228152602001613b08602291396001600160a01b0385166000908152600160205260409020549190611903565b6001600160a01b038316600090815260016020526040902055600354611f699082612bf0565b6003556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b611fb9613a69565b611fc1613a41565b84518651146120015760405162461bcd60e51b815260040180806020018281038252603d815260200180613bc2603d913960400191505060405180910390fd5b600061200c87612339565b90508061204a5760405162461bcd60e51b8152600401808060200182810382526036815260200180613cfe6036913960400191505060405180910390fd5b60006120546123ed565b90506000612061826124d9565b905061206b613a69565b89516001600160401b038111801561208257600080fd5b506040519080825280602002602001820160405280156120ac578160200160208202803683370190505b5061010082015260005b8a518110156120e557600082610100015182815181106120d257fe5b60209081029190910101526001016120b6565b506120f7828b8b846101000151612854565b60a086015260608501526040840181905260208401829052828452612123928d9287908e908890612c32565b151560c0820152600060e0820152861561217c578060c001516121775760405162461bcd60e51b815260040180806020018281038252604c815260200180613bff604c913960600191505060405180910390fd5b612188565b60e08101805160011790525b6000608082018190525b8a518110156121d9576121cc6121c18483815181106121ad57fe5b60200260200101518c8481518110611b9f57fe5b608084015190611d24565b6080830152600101612192565b506121e2613a41565b6121ea612b94565b6060858101919091526040808601929092526020808601939093528385526006546080870151918701518351634999a2ef60e01b815260048101939093526024830195909552604482019490945290516101009093046001600160a01b031692634999a2ef92606480840193919291829003018186803b15801561226d57600080fd5b505afa158015612281573d6000803e3d6000fd5b505050506040513d602081101561229757600080fd5b50516101208301528715612304578882610120015110156122ff576040805162461bcd60e51b815260206004820152601d60248201527f546f6f206d75636820736c697070616765206973206578706563746564000000604482015290519081900360640190fd5b612324565b88826101200151101561232457600060c083015260e08201805160021790525b909a909950975050505050505050565b505050565b60095481516000911461237d5760405162461bcd60e51b8152600401808060200182810382526033815260200180613d346033913960400191505060405180910390fd5b50600160005b6009548110156123e75782818151811061239957fe5b60200260200101516001600160a01b0316600982815481106123b757fe5b60009182526020909120600390910201546001600160a01b0316146123df57600091506123e7565b600101612383565b50919050565b600d546060906000906001600160401b038111801561240b57600080fd5b50604051908082528060200260200182016040528015612435578160200160208202803683370190505b50905060005b600d54811015610ca1576000600d828154811061245457fe5b6000918252602082200154600d80546001600160a01b039092169350600a918391908690811061248057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400181206001015491506124b48383612cdf565b9050808585815181106124c357fe5b602090810291909101015250505060010161243b565b6009546060906000906001600160401b03811180156124f757600080fd5b50604051908082528060200260200182016040528015612521578160200160208202803683370190505b50905060005b60095481101561284d5760006009828154811061254057fe5b6000918252602082206003909102015460408051635f1dde9760e11b815290516001600160a01b039092169350839163be3bbd2e916004808201928692909190829003018186803b15801561259457600080fd5b505afa1580156125a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156125d157600080fd5b8101908080516040519392919084600160201b8211156125f057600080fd5b90830190602082018581111561260557600080fd5b82518660208202830111600160201b8211171561262157600080fd5b82525081516020918201928201910280838360005b8381101561264e578181015183820152602001612636565b5050505090500160405250505090506000600d805490506001600160401b038111801561267a57600080fd5b506040519080825280602002602001820160405280156126a4578160200160208202803683370190505b50905060005b82518110156127235787600a60008584815181106126c457fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002060020154815161ffff9091169081106126fc57fe5b602002602001015182828151811061271057fe5b60209081029190910101526001016126aa565b50600660019054906101000a90046001600160a01b03166001600160a01b031663305cbde76009868154811061275557fe5b906000526020600020906003020160000160009054906101000a90046001600160a01b0316836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156127d95781810151838201526020016127c1565b50505050905001935050505060206040518083038186803b1580156127fd57600080fd5b505afa158015612811573d6000803e3d6000fd5b505050506040513d602081101561282757600080fd5b5051855186908690811061283757fe5b6020908102919091010152505050600101612527565b5092915050565b606080606060008061286589612dd3565b9450600088516001600160401b038111801561288057600080fd5b506040519080825280602002602001820160405280156128aa578160200160208202803683370190505b509050600089516001600160401b03811180156128c657600080fd5b506040519080825280602002602001820160405280156128f0578160200160208202803683370190505b50905060005b8a51811015612a205760008b828151811061290d57fe5b60200260200101519050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561296457600080fd5b505afa158015612978573d6000803e3d6000fd5b505050506040513d602081101561298e57600080fd5b5051835184908490811061299e57fe5b602002602001018181525050612a008a83815181106129b957fe5b60200260200101516129fa8d85815181106129d057fe5b60200260200101518686815181106129e457fe5b6020026020010151611d2490919063ffffffff16565b90612bf0565b848381518110612a0c57fe5b6020908102919091010152506001016128f6565b50612a2b818c613077565b909650925082612a39578695505b612a428361317b565b9350612a4e828c613077565b5094505050945094509450945094565b6000806000905060008087516001600160401b0381118015612a7f57600080fd5b50604051908082528060200260200182016040528015612aa9578160200160208202803683370190505b509050612ab78888886131b7565b90925090508115612acf575060019250612b7e915050565b6000805b8951811015612b6c57828181518110612ae857fe5b6020026020010151612b64576000612b268a8381518110612b0557fe5b60200260200101518a8481518110612b1957fe5b60200260200101516132e8565b90506000612b4d898481518110612b3957fe5b60200260200101518b8581518110612b1957fe5b9050808210612b6157600193505050612b6c565b50505b600101612ad3565b5080612b7757600193505b5091925050505b949350505050565b6000611d7e8383601261330c565b600f546010546011546012549192909143919082821015612be957612bcd612bc6612bbf8585612bf0565b8390613326565b8690612b86565b9450612be6612bdf612bbf8585612bf0565b8590612b86565b93505b5090919293565b6000611d7e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611903565b6000612c3c613abe565b612c4889898989613334565b60608501526040840152151560208301521580158252612c7657806020015115612c7157600191505b612cd2565b600080612c838787613077565b915091508060001415612c94578891505b826020015115612cb557612cae8b8460400151848c61342b565b9350612ccf565b612ccc8b8460400151848c8e8a89606001516134a6565b93505b50505b505b979650505050505050565b6001600160a01b038083166000908152600a602052604081205490911663524f3889612d0a84613593565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612d56578181015183820152602001612d3e565b50505050905090810190601f168015612d835780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015612da057600080fd5b505afa158015612db4573d6000803e3d6000fd5b505050506040513d6020811015612dca57600080fd5b50519392505050565b6060600082516001600160401b0381118015612dee57600080fd5b50604051908082528060200260200182016040528015612e18578160200160208202803683370190505b509050600083516001600160401b0381118015612e3457600080fd5b50604051908082528060200260200182016040528015612e5e578160200160208202803683370190505b509050600084516001600160401b0381118015612e7a57600080fd5b50604051908082528060200260200182016040528015612ea4578160200160208202803683370190505b509050600085516001600160401b0381118015612ec057600080fd5b50604051908082528060200260200182016040528015612eea578160200160208202803683370190505b50905060005b600954811015612f6f5760098181548110612f0757fe5b906000526020600020906003020160020154838281518110612f2557fe5b60200260200101818152505060098181548110612f3e57fe5b906000526020600020906003020160010154828281518110612f5c57fe5b6020908102919091010152600101612ef0565b5060005b8651811015612ff157612fd2828281518110612f8b57fe5b6020026020010151612fcc858481518110612fa257fe5b60200260200101518a8581518110612fb657fe5b60200260200101516136a690919063ffffffff16565b90612b86565b848281518110612fde57fe5b6020908102919091010152600101612f73565b506000805b875181101561302f5761302585828151811061300e57fe5b602002602001015183611d2490919063ffffffff16565b9150600101612ff6565b5060005b875181101561306b5761304c82868381518110612fb657fe5b86828151811061305857fe5b6020908102919091010152600101613033565b50939695505050505050565b6060600060606000805b86518110156130c1576130b76130b087838151811061309c57fe5b6020026020010151898481518110611b9f57fe5b8390611d24565b9150600101613081565b50806130d1579092509050613174565b84516001600160401b03811180156130e857600080fd5b50604051908082528060200260200182016040528015613112578160200160208202803683370190505b50915060005b865181101561316d5761314e8261314888848151811061313457fe5b60200260200101518a8581518110611b9f57fe5b906136a6565b83828151811061315a57fe5b6020908102919091010152600101613118565b5090925090505b9250929050565b600080613186610a71565b905080156131a7576131a0613199610a71565b84906136a6565b91506123e7565b50670de0b6b3a764000092915050565b60006060600060019050600086516001600160401b03811180156131da57600080fd5b50604051908082528060200260200182016040528015613204578160200160208202803683370190505b50905060005b87518110156132db57600182828151811061322157fe5b602002602001019015159081151581525050613245600e548783815181106129e457fe5b87828151811061325157fe5b6020026020010151106132855760009250600082828151811061327057fe5b911515602092830291909101909101526132d3565b85818151811061329157fe5b60200260200101516132ab600e548984815181106129e457fe5b116132d3576000925060008282815181106132c257fe5b911515602092830291909101909101525b60010161320a565b5090969095509350505050565b6000818310613302576132fb8383612bf0565b9050610a6b565b6132fb8284612bf0565b6000612b7e600a83900a61332086866136b4565b9061370d565b6000611d7e8383601261374f565b60008060608060008089516001600160401b038111801561335457600080fd5b5060405190808252806020026020018201604052801561337e578160200160208202803683370190505b50905060008a516001600160401b038111801561339a57600080fd5b506040519080825280602002602001820160405280156133c4578160200160208202803683370190505b50905060016133d48c8c8c6131b7565b909450925060005b8c5181101561341a576133f18a828f85613779565b8483815181106133fd57fe5b9215156020938402919091019092019190915291506001016133dc565b509b929a5098509650945050505050565b60006001815b86518110156134915785818151811061344657fe5b60200260200101516134895783818151811061345e57fe5b602002602001015185828151811061347257fe5b602002602001015111156134895760009150613491565b600101613431565b50801561349d57600191505b50949350505050565b6000805b8851811015613585578781815181106134bf57fe5b6020026020010151613502578581815181106134d757fe5b60200260200101518782815181106134eb57fe5b602002602001015111156135025760019150613585565b82818151811061350e57fe5b602002602001015161357d57600061353f86838151811061352b57fe5b6020026020010151888481518110612b1957fe5b9050600061356686848151811061355257fe5b6020026020010151898581518110612b1957fe5b905080821061357a57600193505050613585565b50505b6001016134aa565b5080612cd457506001612cd4565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b6020811015613612576008810260020a85026001600160f81b031981161561360957808484815181106135eb57fe5b60200101906001600160f81b031916908160001a9053506001909201915b506001016135bc565b506000816001600160401b038111801561362b57600080fd5b506040519080825280601f01601f191660200182016040528015613656576020820181803683370190505b50905060005b8281101561349d5783818151811061367057fe5b602001015160f81c60f81b82828151811061368757fe5b60200101906001600160f81b031916908160001a90535060010161365c565b6000611d7e83836012613994565b6000826136c357506000610a6b565b828202828482816136d057fe5b0414611d7e5760405162461bcd60e51b8152600401808060200182810382526021815260200180613c4b6021913960400191505060405180910390fd5b6000611d7e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506139a8565b6000670de0b6b3a7640000815b8481101561349d5761376f82878661330c565b915060010161375c565b60008060006001905060006009878154811061379157fe5b6000918252602082206003909102015460408051635f1dde9760e11b815290516001600160a01b039092169350839163be3bbd2e916004808201928692909190829003018186803b1580156137e557600080fd5b505afa1580156137f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561382257600080fd5b8101908080516040519392919084600160201b82111561384157600080fd5b90830190602082018581111561385657600080fd5b82518660208202830111600160201b8211171561387257600080fd5b82525081516020918201928201910280838360005b8381101561389f578181015183820152602001613887565b50505050905001604052505050905060005b815181101561398457600c60008383815181106138ca57fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561397c5760008a600a600085858151811061390957fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002060020154815161ffff90911690811061394157fe5b60200260200101519050613968818a8c8151811061395b57fe5b6020026020010151613a0d565b61397a57600094506000975050613984565b505b6001016138b1565b5091989497509395505050505050565b6000612b7e8361332086600a86900a6136b4565b600081836139f75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561195757818101518382015260200161193f565b506000838581613a0357fe5b0495945050505050565b60006001670e92596fd62900008410613a2857506000611d7e565b670d2f13f7789f00008411611d7e575060009392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518061014001604052806060815260200160608152602001606081526020016000815260200160008152602001600081526020016000151581526020016000815260200160608152602001600081525090565b60408051608081018252600080825260208201526060918101829052818101919091529056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63656661696c656420746f207472616e7366657220746f6b656e732c20636865636b20616c6c6f77616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365746f6b656e73496e20616e642076616c756573496e2073686f756c642068617665207468652073616d65206e756d626572206f6620656c656d656e74735468697320636f6d62696e6174696f6e206f6620746f6b656e7320776f756c64206d6f7665206779726f73636f7065207765696768747320746f6f206661722066726f6d207461726765742e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373496e70757420746f6b656e7320696e2077726f6e67206f72646572206f7220636f6e7461696e7320696e76616c696420746f6b656e736270746f6b656e7320646f206e6f7420686176652074686520636f7272656374206e756d626572206f6620616464726573657345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220df3630d804f7f4e3215171eb6892ba8113d551ece4854892941ab6f6409404dc64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806370a08231116100de578063a652db1f11610097578063be48b5e411610071578063be48b5e414610837578063dd62ed3e1461083f578063f2fde38b1461086d578063f9522af5146108935761018e565b8063a652db1f146106a1578063a9059cbb146106e6578063af1a1531146107125761018e565b806370a082311461062f578063715018a6146106555780638da5cb5b1461065d5780638f7873ed1461066557806395d89b411461066d578063a457c2d7146106755761018e565b8063390976171161014b5780634f5548bb116101255780634f5548bb146104a257806355af8e18146104fa5780635e2a0023146105025780635f53837f146106275761018e565b806339097617146102e257806339509351146104465780634739f7e5146104725761018e565b806306fdde0314610193578063095ea7b31461021057806318160ddd1461025057806323b872dd1461026a5780632630c12f146102a0578063313ce567146102c4575b600080fd5b61019b6109bd565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d55781810151838201526020016101bd565b50505050905090810190601f1680156102025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61023c6004803603604081101561022657600080fd5b506001600160a01b038135169060200135610a53565b604080519115158252519081900360200190f35b610258610a71565b60408051918252519081900360200190f35b61023c6004803603606081101561028057600080fd5b506001600160a01b03813581169160208101359091169060400135610a77565b6102a8610afe565b604080516001600160a01b039092168252519081900360200190f35b6102cc610b0d565b6040805160ff9092168252519081900360200190f35b61040c600480360360808110156102f857600080fd5b810190602081018135600160201b81111561031257600080fd5b82018360208201111561032457600080fd5b803590602001918460208302840111600160201b8311171561034557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561039457600080fd5b8201836020820111156103a657600080fd5b803590602001918460208302840111600160201b831117156103c757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001351515610b16565b6040805197151588526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b61023c6004803603604081101561045c57600080fd5b506001600160a01b038135169060200135610b76565b6104a06004803603604081101561048857600080fd5b506001600160a01b0381358116916020013516610bc4565b005b6104aa610bf2565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104e65781810151838201526020016104ce565b505050509050019250505060405180910390f35b6102a8610ca7565b6102586004803603606081101561051857600080fd5b810190602081018135600160201b81111561053257600080fd5b82018360208201111561054457600080fd5b803590602001918460208302840111600160201b8311171561056557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b457600080fd5b8201836020820111156105c657600080fd5b803590602001918460208302840111600160201b831117156105e757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610cbb915050565b6104a0610e6e565b6102586004803603602081101561064557600080fd5b50356001600160a01b0316610ee0565b6104a0610efb565b6102a8610fa4565b6104aa610fb3565b61019b611063565b61023c6004803603604081101561068b57600080fd5b506001600160a01b0381351690602001356110c4565b6106be600480360360208110156106b757600080fd5b503561112c565b604080516001600160a01b039094168452602084019290925282820152519081900360600190f35b61023c600480360360408110156106fc57600080fd5b506001600160a01b038135169060200135611169565b6102586004803603606081101561072857600080fd5b810190602081018135600160201b81111561074257600080fd5b82018360208201111561075457600080fd5b803590602001918460208302840111600160201b8311171561077557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156107c457600080fd5b8201836020820111156107d657600080fd5b803590602001918460208302840111600160201b831117156107f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061117d915050565b6102a8611563565b6102586004803603604081101561085557600080fd5b506001600160a01b0381358116916020013516611572565b6104a06004803603602081101561088357600080fd5b50356001600160a01b031661159d565b61040c600480360360808110156108a957600080fd5b810190602081018135600160201b8111156108c357600080fd5b8201836020820111156108d557600080fd5b803590602001918460208302840111600160201b831117156108f657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561094557600080fd5b82018360208201111561095757600080fd5b803590602001918460208302840111600160201b8311171561097857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135151561169c565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a495780601f10610a1e57610100808354040283529160200191610a49565b820191906000526020600020905b815481529060010190602001808311610a2c57829003601f168201915b5050505050905090565b6000610a67610a606116b6565b84846116ba565b5060015b92915050565b60035490565b6000610a848484846117a6565b610af484610a906116b6565b610aef85604051806060016040528060288152602001613c6c602891396001600160a01b038a16600090815260026020526040812090610ace6116b6565b6001600160a01b031681526020810191909152604001600020549190611903565b6116ba565b5060019392505050565b6008546001600160a01b031681565b60065460ff1690565b6000806000806000806000806000610b308d8d8d8d61199a565b915091508160c001518261012001518360e00151836000015184602001518560400151866060015198509850985098509850985098505050949950949992975094509450565b6000610a67610b836116b6565b84610aef8560026000610b946116b6565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611d24565b6001600160a01b039182166000908152600a6020526040902080546001600160a01b03191691909216179055565b600d546060906000906001600160401b0381118015610c1057600080fd5b50604051908082528060200260200182016040528015610c3a578160200160208202803683370190505b50905060005b600d54811015610ca157600d8181548110610c5757fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610c8157fe5b6001600160a01b0390921660209283029190910190910152600101610c40565b50905090565b60065461010090046001600160a01b031681565b60006001610cc7613a41565b600080610cd68888888761169c565b60608a0152604089015260208801528652909650909250905060005b8851811015610dfe576000898281518110610d0957fe5b60200260200101516001600160a01b03166323b872dd33308c8681518110610d2d57fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015610d8b57600080fd5b505af1158015610d9f573d6000803e3d6000fd5b505050506040513d6020811015610db557600080fd5b5051905080610df55760405162461bcd60e51b815260040180806020018281038252602a815260200180613b2a602a913960400191505060405180910390fd5b50600101610cf2565b50610e093386611d85565b610e288360000151846020015187600087604001518860600151611e77565b604080513381526020810187905281517f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885929181900390910190a1505050509392505050565b6000546001600160a01b031615610ecc576040805162461bcd60e51b815260206004820152601960248201527f6f776e657220616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600080546001600160a01b03191633179055565b6001600160a01b031660009081526001602052604090205490565b6000546001600160a01b03163314610f5a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6009546060906000906001600160401b0381118015610fd157600080fd5b50604051908082528060200260200182016040528015610ffb578160200160208202803683370190505b50905060005b600954811015610ca1576009818154811061101857fe5b600091825260209091206003909102015482516001600160a01b039091169083908390811061104357fe5b6001600160a01b0390921660209283029190910190910152600101611001565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a495780601f10610a1e57610100808354040283529160200191610a49565b6000610a676110d16116b6565b84610aef85604051806060016040528060258152602001613d6760259139600260006110fb6116b6565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611903565b6009818154811061113c57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925083565b6000610a676111766116b6565b84846117a6565b60006001818061118b613a41565b61119788888887610b16565b606088015260408701526020860152845290965090935091506111ba3386611eb5565b60075460408051636f36b6cb60e11b8152600481019182528a5160448201528a516001600160a01b039093169263de6d6d96928c928c92829160248101916064909101906020808801910280838360005b8381101561122357818101518382015260200161120b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561126257818101518382015260200161124a565b50505050905001945050505050600060405180830381600087803b15801561128957600080fd5b505af115801561129d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156112c657600080fd5b8101908080516040519392919084600160201b8211156112e557600080fd5b9083019060208201858111156112fa57600080fd5b82518660208202830111600160201b8211171561131657600080fd5b82525081516020918201928201910280838360005b8381101561134357818101518382015260200161132b565b5050505090500160405260200180516040519392919084600160201b82111561136b57600080fd5b90830190602082018581111561138057600080fd5b82518660208202830111600160201b8211171561139c57600080fd5b82525081516020918201928201910280838360005b838110156113c95781810151838201526020016113b1565b50505050905001604052505050505060005b87518110156114fd5760008982815181106113f257fe5b60200260200101516001600160a01b03166323b872dd30338c868151811061141657fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561147457600080fd5b505af1158015611488573d6000803e3d6000fd5b505050506040513d602081101561149e57600080fd5b50519050806114f4576040805162461bcd60e51b815260206004820152601960248201527f6661696c656420746f207472616e7366657220746f6b656e7300000000000000604482015290519081900360640190fd5b506001016113db565b50604080513381526020810187905281517f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6929181900390910190a16115588160000151826020015160008885604001518660600151611e77565b505050509392505050565b6007546001600160a01b031681565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000546001600160a01b031633146115fc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166116415760405162461bcd60e51b8152600401808060200182810382526026815260200180613b546026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000806000806000806000610b308d8d8d8d611fb1565b3390565b6001600160a01b0383166116ff5760405162461bcd60e51b8152600401808060200182810382526024815260200180613cda6024913960400191505060405180910390fd5b6001600160a01b0382166117445760405162461bcd60e51b8152600401808060200182810382526022815260200180613b7a6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166117eb5760405162461bcd60e51b8152600401808060200182810382526025815260200180613cb56025913960400191505060405180910390fd5b6001600160a01b0382166118305760405162461bcd60e51b8152600401808060200182810382526023815260200180613ae56023913960400191505060405180910390fd5b61183b838383612334565b61187881604051806060016040528060268152602001613b9c602691396001600160a01b0386166000908152600160205260409020549190611903565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546118a79082611d24565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156119925760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561195757818101518382015260200161193f565b50505050905090810190601f1680156119845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6119a2613a69565b6119aa613a41565b84518651146119ea5760405162461bcd60e51b815260040180806020018281038252603d815260200180613bc2603d913960400191505060405180910390fd5b6119f386612339565b611a2e5760405162461bcd60e51b8152600401808060200182810382526036815260200180613cfe6036913960400191505060405180910390fd5b611a36613a69565b86516001600160401b0381118015611a4d57600080fd5b50604051908082528060200260200182016040528015611a77578160200160208202803683370190505b5061010082015260005b8751811015611ab05760008261010001518281518110611a9d57fe5b6020908102919091010152600101611a81565b506000611abb6123ed565b90506000611ac8826124d9565b9050611adb818a8561010001518b612854565b60a088015260608701526040860181905260208601829052828652611b01928c92612a5e565b151560c0840152600060e08401528515611b5a578260c00151611b555760405162461bcd60e51b815260040180806020018281038252604c815260200180613bff604c913960600191505060405180910390fd5b611b66565b60e08301805160011790525b6000608084018190525b8951811015611bcd57611bc0611bb5838381518110611b8b57fe5b60200260200101518b8481518110611b9f57fe5b6020026020010151612b8690919063ffffffff16565b608086015190611d24565b6080850152600101611b70565b50611bd6613a41565b611bde612b94565b60608581019190915260408086019290925260208086018490529385526006546080890151918901518351630220ab7760e21b815260048101939093526024830194909452604482019390935290516101009092046001600160a01b031692630882addc92606480840193829003018186803b158015611c5d57600080fd5b505afa158015611c71573d6000803e3d6000fd5b505050506040513d6020811015611c8757600080fd5b50516101208501528615611cf457878461012001511115611cef576040805162461bcd60e51b815260206004820152601d60248201527f546f6f206d75636820736c697070616765206973206578706563746564000000604482015290519081900360640190fd5b611d14565b878461012001511115611d1457600060c085015260e08401805160021790525b9299929850919650505050505050565b600082820183811015611d7e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216611de0576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611dec60008383612334565b600354611df99082611d24565b6003556001600160a01b038216600090815260016020526040902054611e1f9082611d24565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b8315611e8b57611e878685611d24565b6010555b8215611e9f57611e9b8584611d24565b6011555b81811015611ead57600f8290555b505050505050565b6001600160a01b038216611efa5760405162461bcd60e51b8152600401808060200182810382526021815260200180613c946021913960400191505060405180910390fd5b611f0682600083612334565b611f4381604051806060016040528060228152602001613b08602291396001600160a01b0385166000908152600160205260409020549190611903565b6001600160a01b038316600090815260016020526040902055600354611f699082612bf0565b6003556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b611fb9613a69565b611fc1613a41565b84518651146120015760405162461bcd60e51b815260040180806020018281038252603d815260200180613bc2603d913960400191505060405180910390fd5b600061200c87612339565b90508061204a5760405162461bcd60e51b8152600401808060200182810382526036815260200180613cfe6036913960400191505060405180910390fd5b60006120546123ed565b90506000612061826124d9565b905061206b613a69565b89516001600160401b038111801561208257600080fd5b506040519080825280602002602001820160405280156120ac578160200160208202803683370190505b5061010082015260005b8a518110156120e557600082610100015182815181106120d257fe5b60209081029190910101526001016120b6565b506120f7828b8b846101000151612854565b60a086015260608501526040840181905260208401829052828452612123928d9287908e908890612c32565b151560c0820152600060e0820152861561217c578060c001516121775760405162461bcd60e51b815260040180806020018281038252604c815260200180613bff604c913960600191505060405180910390fd5b612188565b60e08101805160011790525b6000608082018190525b8a518110156121d9576121cc6121c18483815181106121ad57fe5b60200260200101518c8481518110611b9f57fe5b608084015190611d24565b6080830152600101612192565b506121e2613a41565b6121ea612b94565b6060858101919091526040808601929092526020808601939093528385526006546080870151918701518351634999a2ef60e01b815260048101939093526024830195909552604482019490945290516101009093046001600160a01b031692634999a2ef92606480840193919291829003018186803b15801561226d57600080fd5b505afa158015612281573d6000803e3d6000fd5b505050506040513d602081101561229757600080fd5b50516101208301528715612304578882610120015110156122ff576040805162461bcd60e51b815260206004820152601d60248201527f546f6f206d75636820736c697070616765206973206578706563746564000000604482015290519081900360640190fd5b612324565b88826101200151101561232457600060c083015260e08201805160021790525b909a909950975050505050505050565b505050565b60095481516000911461237d5760405162461bcd60e51b8152600401808060200182810382526033815260200180613d346033913960400191505060405180910390fd5b50600160005b6009548110156123e75782818151811061239957fe5b60200260200101516001600160a01b0316600982815481106123b757fe5b60009182526020909120600390910201546001600160a01b0316146123df57600091506123e7565b600101612383565b50919050565b600d546060906000906001600160401b038111801561240b57600080fd5b50604051908082528060200260200182016040528015612435578160200160208202803683370190505b50905060005b600d54811015610ca1576000600d828154811061245457fe5b6000918252602082200154600d80546001600160a01b039092169350600a918391908690811061248057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400181206001015491506124b48383612cdf565b9050808585815181106124c357fe5b602090810291909101015250505060010161243b565b6009546060906000906001600160401b03811180156124f757600080fd5b50604051908082528060200260200182016040528015612521578160200160208202803683370190505b50905060005b60095481101561284d5760006009828154811061254057fe5b6000918252602082206003909102015460408051635f1dde9760e11b815290516001600160a01b039092169350839163be3bbd2e916004808201928692909190829003018186803b15801561259457600080fd5b505afa1580156125a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156125d157600080fd5b8101908080516040519392919084600160201b8211156125f057600080fd5b90830190602082018581111561260557600080fd5b82518660208202830111600160201b8211171561262157600080fd5b82525081516020918201928201910280838360005b8381101561264e578181015183820152602001612636565b5050505090500160405250505090506000600d805490506001600160401b038111801561267a57600080fd5b506040519080825280602002602001820160405280156126a4578160200160208202803683370190505b50905060005b82518110156127235787600a60008584815181106126c457fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002060020154815161ffff9091169081106126fc57fe5b602002602001015182828151811061271057fe5b60209081029190910101526001016126aa565b50600660019054906101000a90046001600160a01b03166001600160a01b031663305cbde76009868154811061275557fe5b906000526020600020906003020160000160009054906101000a90046001600160a01b0316836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156127d95781810151838201526020016127c1565b50505050905001935050505060206040518083038186803b1580156127fd57600080fd5b505afa158015612811573d6000803e3d6000fd5b505050506040513d602081101561282757600080fd5b5051855186908690811061283757fe5b6020908102919091010152505050600101612527565b5092915050565b606080606060008061286589612dd3565b9450600088516001600160401b038111801561288057600080fd5b506040519080825280602002602001820160405280156128aa578160200160208202803683370190505b509050600089516001600160401b03811180156128c657600080fd5b506040519080825280602002602001820160405280156128f0578160200160208202803683370190505b50905060005b8a51811015612a205760008b828151811061290d57fe5b60200260200101519050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561296457600080fd5b505afa158015612978573d6000803e3d6000fd5b505050506040513d602081101561298e57600080fd5b5051835184908490811061299e57fe5b602002602001018181525050612a008a83815181106129b957fe5b60200260200101516129fa8d85815181106129d057fe5b60200260200101518686815181106129e457fe5b6020026020010151611d2490919063ffffffff16565b90612bf0565b848381518110612a0c57fe5b6020908102919091010152506001016128f6565b50612a2b818c613077565b909650925082612a39578695505b612a428361317b565b9350612a4e828c613077565b5094505050945094509450945094565b6000806000905060008087516001600160401b0381118015612a7f57600080fd5b50604051908082528060200260200182016040528015612aa9578160200160208202803683370190505b509050612ab78888886131b7565b90925090508115612acf575060019250612b7e915050565b6000805b8951811015612b6c57828181518110612ae857fe5b6020026020010151612b64576000612b268a8381518110612b0557fe5b60200260200101518a8481518110612b1957fe5b60200260200101516132e8565b90506000612b4d898481518110612b3957fe5b60200260200101518b8581518110612b1957fe5b9050808210612b6157600193505050612b6c565b50505b600101612ad3565b5080612b7757600193505b5091925050505b949350505050565b6000611d7e8383601261330c565b600f546010546011546012549192909143919082821015612be957612bcd612bc6612bbf8585612bf0565b8390613326565b8690612b86565b9450612be6612bdf612bbf8585612bf0565b8590612b86565b93505b5090919293565b6000611d7e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611903565b6000612c3c613abe565b612c4889898989613334565b60608501526040840152151560208301521580158252612c7657806020015115612c7157600191505b612cd2565b600080612c838787613077565b915091508060001415612c94578891505b826020015115612cb557612cae8b8460400151848c61342b565b9350612ccf565b612ccc8b8460400151848c8e8a89606001516134a6565b93505b50505b505b979650505050505050565b6001600160a01b038083166000908152600a602052604081205490911663524f3889612d0a84613593565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612d56578181015183820152602001612d3e565b50505050905090810190601f168015612d835780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015612da057600080fd5b505afa158015612db4573d6000803e3d6000fd5b505050506040513d6020811015612dca57600080fd5b50519392505050565b6060600082516001600160401b0381118015612dee57600080fd5b50604051908082528060200260200182016040528015612e18578160200160208202803683370190505b509050600083516001600160401b0381118015612e3457600080fd5b50604051908082528060200260200182016040528015612e5e578160200160208202803683370190505b509050600084516001600160401b0381118015612e7a57600080fd5b50604051908082528060200260200182016040528015612ea4578160200160208202803683370190505b509050600085516001600160401b0381118015612ec057600080fd5b50604051908082528060200260200182016040528015612eea578160200160208202803683370190505b50905060005b600954811015612f6f5760098181548110612f0757fe5b906000526020600020906003020160020154838281518110612f2557fe5b60200260200101818152505060098181548110612f3e57fe5b906000526020600020906003020160010154828281518110612f5c57fe5b6020908102919091010152600101612ef0565b5060005b8651811015612ff157612fd2828281518110612f8b57fe5b6020026020010151612fcc858481518110612fa257fe5b60200260200101518a8581518110612fb657fe5b60200260200101516136a690919063ffffffff16565b90612b86565b848281518110612fde57fe5b6020908102919091010152600101612f73565b506000805b875181101561302f5761302585828151811061300e57fe5b602002602001015183611d2490919063ffffffff16565b9150600101612ff6565b5060005b875181101561306b5761304c82868381518110612fb657fe5b86828151811061305857fe5b6020908102919091010152600101613033565b50939695505050505050565b6060600060606000805b86518110156130c1576130b76130b087838151811061309c57fe5b6020026020010151898481518110611b9f57fe5b8390611d24565b9150600101613081565b50806130d1579092509050613174565b84516001600160401b03811180156130e857600080fd5b50604051908082528060200260200182016040528015613112578160200160208202803683370190505b50915060005b865181101561316d5761314e8261314888848151811061313457fe5b60200260200101518a8581518110611b9f57fe5b906136a6565b83828151811061315a57fe5b6020908102919091010152600101613118565b5090925090505b9250929050565b600080613186610a71565b905080156131a7576131a0613199610a71565b84906136a6565b91506123e7565b50670de0b6b3a764000092915050565b60006060600060019050600086516001600160401b03811180156131da57600080fd5b50604051908082528060200260200182016040528015613204578160200160208202803683370190505b50905060005b87518110156132db57600182828151811061322157fe5b602002602001019015159081151581525050613245600e548783815181106129e457fe5b87828151811061325157fe5b6020026020010151106132855760009250600082828151811061327057fe5b911515602092830291909101909101526132d3565b85818151811061329157fe5b60200260200101516132ab600e548984815181106129e457fe5b116132d3576000925060008282815181106132c257fe5b911515602092830291909101909101525b60010161320a565b5090969095509350505050565b6000818310613302576132fb8383612bf0565b9050610a6b565b6132fb8284612bf0565b6000612b7e600a83900a61332086866136b4565b9061370d565b6000611d7e8383601261374f565b60008060608060008089516001600160401b038111801561335457600080fd5b5060405190808252806020026020018201604052801561337e578160200160208202803683370190505b50905060008a516001600160401b038111801561339a57600080fd5b506040519080825280602002602001820160405280156133c4578160200160208202803683370190505b50905060016133d48c8c8c6131b7565b909450925060005b8c5181101561341a576133f18a828f85613779565b8483815181106133fd57fe5b9215156020938402919091019092019190915291506001016133dc565b509b929a5098509650945050505050565b60006001815b86518110156134915785818151811061344657fe5b60200260200101516134895783818151811061345e57fe5b602002602001015185828151811061347257fe5b602002602001015111156134895760009150613491565b600101613431565b50801561349d57600191505b50949350505050565b6000805b8851811015613585578781815181106134bf57fe5b6020026020010151613502578581815181106134d757fe5b60200260200101518782815181106134eb57fe5b602002602001015111156135025760019150613585565b82818151811061350e57fe5b602002602001015161357d57600061353f86838151811061352b57fe5b6020026020010151888481518110612b1957fe5b9050600061356686848151811061355257fe5b6020026020010151898581518110612b1957fe5b905080821061357a57600193505050613585565b50505b6001016134aa565b5080612cd457506001612cd4565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b6020811015613612576008810260020a85026001600160f81b031981161561360957808484815181106135eb57fe5b60200101906001600160f81b031916908160001a9053506001909201915b506001016135bc565b506000816001600160401b038111801561362b57600080fd5b506040519080825280601f01601f191660200182016040528015613656576020820181803683370190505b50905060005b8281101561349d5783818151811061367057fe5b602001015160f81c60f81b82828151811061368757fe5b60200101906001600160f81b031916908160001a90535060010161365c565b6000611d7e83836012613994565b6000826136c357506000610a6b565b828202828482816136d057fe5b0414611d7e5760405162461bcd60e51b8152600401808060200182810382526021815260200180613c4b6021913960400191505060405180910390fd5b6000611d7e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506139a8565b6000670de0b6b3a7640000815b8481101561349d5761376f82878661330c565b915060010161375c565b60008060006001905060006009878154811061379157fe5b6000918252602082206003909102015460408051635f1dde9760e11b815290516001600160a01b039092169350839163be3bbd2e916004808201928692909190829003018186803b1580156137e557600080fd5b505afa1580156137f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561382257600080fd5b8101908080516040519392919084600160201b82111561384157600080fd5b90830190602082018581111561385657600080fd5b82518660208202830111600160201b8211171561387257600080fd5b82525081516020918201928201910280838360005b8381101561389f578181015183820152602001613887565b50505050905001604052505050905060005b815181101561398457600c60008383815181106138ca57fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561397c5760008a600a600085858151811061390957fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002060020154815161ffff90911690811061394157fe5b60200260200101519050613968818a8c8151811061395b57fe5b6020026020010151613a0d565b61397a57600094506000975050613984565b505b6001016138b1565b5091989497509395505050505050565b6000612b7e8361332086600a86900a6136b4565b600081836139f75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561195757818101518382015260200161193f565b506000838581613a0357fe5b0495945050505050565b60006001670e92596fd62900008410613a2857506000611d7e565b670d2f13f7789f00008411611d7e575060009392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518061014001604052806060815260200160608152602001606081526020016000815260200160008152602001600081526020016000151581526020016000815260200160608152602001600081525090565b60408051608081018252600080825260208201526060918101829052818101919091529056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63656661696c656420746f207472616e7366657220746f6b656e732c20636865636b20616c6c6f77616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365746f6b656e73496e20616e642076616c756573496e2073686f756c642068617665207468652073616d65206e756d626572206f6620656c656d656e74735468697320636f6d62696e6174696f6e206f6620746f6b656e7320776f756c64206d6f7665206779726f73636f7065207765696768747320746f6f206661722066726f6d207461726765742e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373496e70757420746f6b656e7320696e2077726f6e67206f72646572206f7220636f6e7461696e7320696e76616c696420746f6b656e736270746f6b656e7320646f206e6f7420686176652074686520636f7272656374206e756d626572206f6620616464726573657345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220df3630d804f7f4e3215171eb6892ba8113d551ece4854892941ab6f6409404dc64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8626,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 235,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 241,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 243,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 245,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 249,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_decimals",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 4339,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "gyroPriceOracle",
        "offset": 1,
        "slot": "6",
        "type": "t_contract(GyroPriceOracle)8084"
      },
      {
        "astId": 4341,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "gyroRouter",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(GyroRouter)8563"
      },
      {
        "astId": 4343,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "priceOracle",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(PriceOracle)8051"
      },
      {
        "astId": 4405,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "poolProperties",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(PoolProperties)4357_storage)dyn_storage"
      },
      {
        "astId": 4409,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_tokenAddressToProperties",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(TokenProperties)4350_storage)"
      },
      {
        "astId": 4413,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_checkPoolIsValid",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4417,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "_checkIsStablecoin",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4420,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "underlyingTokenAddresses",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4422,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "portfolioWeightEpsilon",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4424,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "lastSeenBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4426,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "inflowHistory",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4428,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "outflowHistory",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4430,
        "contract": "contracts/GyroFund.sol:GyroFundV1",
        "label": "memoryParam",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolProperties)4357_storage)dyn_storage": {
        "base": "t_struct(PoolProperties)4357_storage",
        "encoding": "dynamic_array",
        "label": "struct GyroFundV1.PoolProperties[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GyroPriceOracle)8084": {
        "encoding": "inplace",
        "label": "contract GyroPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(GyroRouter)8563": {
        "encoding": "inplace",
        "label": "contract GyroRouter",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)8051": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenProperties)4350_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GyroFundV1.TokenProperties)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenProperties)4350_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoolProperties)4357_storage": {
        "encoding": "inplace",
        "label": "struct GyroFundV1.PoolProperties",
        "members": [
          {
            "astId": 4352,
            "contract": "contracts/GyroFund.sol:GyroFundV1",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4354,
            "contract": "contracts/GyroFund.sol:GyroFundV1",
            "label": "initialPoolWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4356,
            "contract": "contracts/GyroFund.sol:GyroFundV1",
            "label": "initialPoolPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TokenProperties)4350_storage": {
        "encoding": "inplace",
        "label": "struct GyroFundV1.TokenProperties",
        "members": [
          {
            "astId": 4345,
            "contract": "contracts/GyroFund.sol:GyroFundV1",
            "label": "oracleAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4347,
            "contract": "contracts/GyroFund.sol:GyroFundV1",
            "label": "tokenSymbol",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 4349,
            "contract": "contracts/GyroFund.sol:GyroFundV1",
            "label": "tokenIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}