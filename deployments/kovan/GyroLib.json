{
  "address": "0x29e858A3d3AE4ab92426c8C279f8E8ae64Edfda7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gyroFundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "externalTokensRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "estimateMintedGyro",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensOut",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "estimateRedeemedGyro",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "externalTokensRouter",
      "outputs": [
        {
          "internalType": "contract BalancerExternalTokenRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [
        {
          "internalType": "contract GyroFundV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "mintFromUnderlyingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensOut",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsOut",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxRedeemed",
          "type": "uint256"
        }
      ],
      "name": "redeemToUnderlyingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundAddress",
          "type": "address"
        }
      ],
      "name": "setFundAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_routerAddress",
          "type": "address"
        }
      ],
      "name": "setRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minGyroMinted",
          "type": "uint256"
        }
      ],
      "name": "wouldMintChecksPass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensOut",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsOut",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_maxGyroRedeemed",
          "type": "uint256"
        }
      ],
      "name": "wouldRedeemChecksPass",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ea515ada96f556d7b4d6a66ceee562f8bc9ce51846fa52d111040e52d17656e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x94e3d92264097A750E7500B6B45545a1A6EDD45B",
    "contractAddress": null,
    "transactionIndex": 6,
    "gasUsed": "2820672",
    "logsBloom": "0x
    "blockHash": "0xe717e53c5525d632aa516f5dfb2827be445847edc9f8acde9bf15ae1bb31f348",
    "transactionHash": "0x8ea515ada96f556d7b4d6a66ceee562f8bc9ce51846fa52d111040e52d17656e",
    "logs": [],
    "blockNumber": 24052768,
    "cumulativeGasUsed": "6033342",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0474aEBA181987A81352842d446Fc6c65481417",
    "0x47B7C4dc39E52c98b4E3553AeE55fBdA67c940C6"
  ],
  "solcInputHash": "628b1f037418c84cf28b1c089e41967f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gyroFundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"externalTokensRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsIn\",\"type\":\"uint256[]\"}],\"name\":\"estimateMintedGyro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsOut\",\"type\":\"uint256[]\"}],\"name\":\"estimateRedeemedGyro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalTokensRouter\",\"outputs\":[{\"internalType\":\"contract BalancerExternalTokenRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"contract GyroFundV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"mintFromUnderlyingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxRedeemed\",\"type\":\"uint256\"}],\"name\":\"redeemToUnderlyingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minGyroMinted\",\"type\":\"uint256\"}],\"name\":\"wouldMintChecksPass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxGyroRedeemed\",\"type\":\"uint256\"}],\"name\":\"wouldRedeemChecksPass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateMintedGyro(address[],uint256[])\":{\"params\":{\"_amountsIn\":\"the amount of each token to use\",\"_tokensIn\":\"the tokens to use for minting\"},\"returns\":{\"_0\":\"the estimated amount of Gyro dolars minted\"}},\"estimateRedeemedGyro(address[],uint256[])\":{\"params\":{\"_amountsOut\":\"the amount of each token to receive\",\"_tokensOut\":\"the tokens receive back\"},\"returns\":{\"_0\":\"the estimated amount of Gyro dolars redeemed\"}},\"getReserveValues()\":{\"returns\":{\"_0\":\"the current values of the Gyro fund's reserve\"}},\"getSupportedPools()\":{\"returns\":{\"_0\":\"the list of Balance pools supported by the Gyro fund\"}},\"getSupportedTokens()\":{\"returns\":{\"_0\":\"the list of tokens supported by the Gyro fund\"}},\"mintFromUnderlyingTokens(address[],uint256[],uint256)\":{\"params\":{\"_amountsIn\":\"the amount of each token to use\",\"_minAmountOut\":\"the minimum number of Gyro dollars wanted, used to prevent against slippage\",\"_tokensIn\":\"a list of tokens to use to mint Gyro dollars\"},\"returns\":{\"_0\":\"the amount of Gyro dollars minted\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeemToUnderlyingTokens(address[],uint256[],uint256)\":{\"params\":{\"_amountsOut\":\"the amount of each token to receive\",\"_maxRedeemed\":\"the maximum number of Gyro dollars to redeem\",\"_tokensOut\":\"the tokens to receive in exchange for redeeming Gyro dollars\"},\"returns\":{\"_0\":\"the amount of Gyro dollar redeemed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"wouldMintChecksPass(address[],uint256[],uint256)\":{\"params\":{\"_amountsIn\":\"the amount of each token to use\",\"_minGyroMinted\":\"the minimum number of Gyro dollars wanted\",\"_tokensIn\":\"a list of tokens to use to mint Gyro dollars\"},\"returns\":{\"_0\":\"an error code if the call would fail, otherwise 0 See GyroFundV1 for the meaning of each error code\"}},\"wouldRedeemChecksPass(address[],uint256[],uint256)\":{\"params\":{\"_amountsOut\":\"the amount of each token to receive\",\"_maxGyroRedeemed\":\"the maximum number of Gyro dollars to redeem\",\"_tokensOut\":\"the tokens to receive in exchange for redeeming Gyro dollars\"},\"returns\":{\"_0\":\"an error code if the call would fail, otherwise 0\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateMintedGyro(address[],uint256[])\":{\"notice\":\"This functions approximates how many Gyro dollars would be minted given `_tokensIn` and `_amountsIn`. See the documentation of `mintFromUnderlyingTokens` for more details about these parameters\"},\"estimateRedeemedGyro(address[],uint256[])\":{\"notice\":\"This functions approximates how many Gyro dollars would be redeemed given `_tokensOut` and `_amountsOut`. See the documentation of `redeemToUnderlyingTokens` for more details about these parameters\"},\"mintFromUnderlyingTokens(address[],uint256[],uint256)\":{\"notice\":\"Mints at least `_minAmountOut` Gyro dollars by using the tokens and amounts passed in `_tokensIn` and `_amountsIn`. `_tokensIn` and `_amountsIn` must be the same length and `_amountsIn[i]` is the amount of `_tokensIn[i]` to use to mint Gyro dollars. This contract should be approved to spend at least the amount given for each token of `_tokensIn`\"},\"redeemToUnderlyingTokens(address[],uint256[],uint256)\":{\"notice\":\"Redeems at most `_maxRedeemed` to receive exactly `_amountsOut[i]` of each `_tokensOut[i]`. `_tokensOut[i]` and  `_amountsOut[i]` must be the same length and `_amountsOut[i]` is the amount desired of `_tokensOut[i]` This contract should be allowed to spend the amount of Gyro dollars redeemed which is at most `_maxRedeemed`\"},\"wouldMintChecksPass(address[],uint256[],uint256)\":{\"notice\":\"Checks if a call to `mintFromUnderlyingTokens` with the given `_tokensIn`, `_amountsIn and `_minGyroMinted` would succeed or not, and returns the potential error code\"},\"wouldRedeemChecksPass(address[],uint256[],uint256)\":{\"notice\":\"Checks if a call to `redeemToUnderlyingTokens` with the given `_tokensOut`, `_amountsOut and `_maxGyroRedeemed` would succeed or not, and returns the potential error code\"}},\"notice\":\"GyroLib is a contract used to add functionality around the GyroFund to allow users to exchange assets for Gyro rather than having to use already minted Balancer Pool Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GyroLib.sol\":\"GyroLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/BalancerGyroRouter.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./GyroRouter.sol\\\";\\nimport \\\"./balancer/BPool.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @notice This contracts is a very simple router to deposit supported assets and\\n * receive Balancer Pool Tokens depositable directly in the Gyro reserve in return\\n */\\ncontract BalancerExternalTokenRouter is GyroRouter, Ownable {\\n    mapping(address => address[]) public pools;\\n    address[] public tokens;\\n\\n    event UnderlyingTokensDeposited(address[] indexed bpAddresses, uint256[] indexed bpAmounts);\\n\\n    /**\\n     * @notice Deposits `_amountsIn` amounts of `_tokensIn` and receives Balancer Pool tokens\\n     * in return. `_amountsIn[i]` is the amount of `_tokensIn[i]` token to deposit.\\n     * @param _tokensIn the tokens to deposit\\n     * @param _amountsIn the amount to deposit for each token\\n     * @return the addresses and amounts of the Balancer Pool tokens received\\n     * The length of the output tokens will be equal to the length of the output tokens\\n     * and may contain duplicates\\n     */\\n    function deposit(address[] memory _tokensIn, uint256[] memory _amountsIn)\\n        external\\n        override\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory _bpAddresses = new address[](_tokensIn.length);\\n        uint256[] memory _bpAmounts = new uint256[](_amountsIn.length);\\n\\n        for (uint256 i = 0; i < _tokensIn.length; i++) {\\n            address token = _tokensIn[i];\\n            uint256 amount = _amountsIn[i];\\n            bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);\\n            require(success, \\\"failed to transfer tokens from sender to GryoRouter\\\");\\n\\n            BPool pool = BPool(choosePoolToDeposit(token, amount));\\n            uint256 poolAmountOut = pool.joinswapExternAmountIn(token, amount, 0);\\n            success = pool.transfer(msg.sender, poolAmountOut);\\n            require(success, \\\"failed to transfer BPT to sender\\\");\\n\\n            _bpAmounts[i] = poolAmountOut;\\n            _bpAddresses[i] = address(pool);\\n        }\\n\\n        emit UnderlyingTokensDeposited(_bpAddresses, _bpAmounts);\\n        return (_bpAddresses, _bpAmounts);\\n    }\\n\\n    /**\\n     * @notice Estimates how many Balancer Pool tokens would be received given\\n     * `_amountsIn` amounts of `_tokensIn`. See `deposit` for more information\\n     * @param _tokensIn the tokens to deposit\\n     * @param _amountsIn the amount to deposit for each token\\n     * @return the addresses and amounts of the Balancer Pool tokens that would be received\\n     */\\n    function estimateDeposit(address[] memory _tokensIn, uint256[] memory _amountsIn)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory _bpAddresses = new address[](_tokensIn.length);\\n        uint256[] memory _bpAmounts = new uint256[](_amountsIn.length);\\n\\n        for (uint256 i = 0; i < _tokensIn.length; i++) {\\n            address token = _tokensIn[i];\\n            uint256 amount = _amountsIn[i];\\n\\n            BPool pool = BPool(choosePoolToDeposit(token, amount));\\n            uint256 poolAmountOut = calcPoolOutGivenSingleIn(pool, token, amount);\\n            _bpAddresses[i] = address(pool);\\n            _bpAmounts[i] = poolAmountOut;\\n        }\\n        return (_bpAddresses, _bpAmounts);\\n    }\\n\\n    /**\\n     * @notice Withdraws the underlying tokens using `_amountsOut` amounts of `_tokensOut` of underlying tokens.\\n     * The given tokens should be supported by this router\\n     * @param _tokensOut the tokens to receive\\n     * @param _amountsOut the amount to for each token\\n     * @return the addresses and amounts of the BP tokens used\\n     * The number of tokens returned will have the same length than the\\n     * number of pools given and may contain duplicates\\n     */\\n    function withdraw(address[] memory _tokensOut, uint256[] memory _amountsOut)\\n        external\\n        override\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory _bpAddresses = new address[](_tokensOut.length);\\n        uint256[] memory _bpAmounts = new uint256[](_amountsOut.length);\\n        for (uint256 i = 0; i < _tokensOut.length; i++) {\\n            address token = _tokensOut[i];\\n            uint256 amount = _amountsOut[i];\\n            BPool pool = BPool(choosePoolToWithdraw(token, amount));\\n            uint256 poolAmountIn = calcPoolInGivenSingleOut(pool, token, amount);\\n\\n            bool success = pool.transferFrom(msg.sender, address(this), poolAmountIn);\\n            require(success, \\\"failed to transfer BPT from sender to GryoRouter\\\");\\n\\n            pool.exitswapExternAmountOut(token, amount, poolAmountIn);\\n\\n            success = IERC20(token).transfer(msg.sender, amount);\\n            require(success, \\\"failed to transfer token to sender\\\");\\n\\n            _bpAddresses[i] = address(pool);\\n            _bpAmounts[i] = poolAmountIn;\\n        }\\n        return (_bpAddresses, _bpAmounts);\\n    }\\n\\n    /**\\n     * @notice Estimates how many of the underlying tokens would be received given\\n     * `_amountsOut` amounts of `_tokensOut` of Balancer Pool tokens. See `withdraw` for more information\\n     * @param _tokensOut the Balancer Pool tokens to use\\n     * @param _amountsOut the amount to for each token\\n     * @return the addresses and amounts of the underlying tokens that would be received\\n     */\\n    function estimateWithdraw(address[] memory _tokensOut, uint256[] memory _amountsOut)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory _bpAddresses = new address[](_tokensOut.length);\\n        uint256[] memory _bpAmounts = new uint256[](_amountsOut.length);\\n\\n        for (uint256 i = 0; i < _tokensOut.length; i++) {\\n            address token = _tokensOut[i];\\n            uint256 amount = _amountsOut[i];\\n\\n            BPool pool = BPool(choosePoolToDeposit(token, amount));\\n            uint256 poolAmountIn = calcPoolInGivenSingleOut(pool, token, amount);\\n            _bpAddresses[i] = address(pool);\\n            _bpAmounts[i] = poolAmountIn;\\n        }\\n        return (_bpAddresses, _bpAmounts);\\n    }\\n\\n    function calcPoolOutGivenSingleIn(\\n        BPool pool,\\n        address _token,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        uint256 tokenBalanceIn = pool.getBalance(_token);\\n        uint256 tokenWeightIn = pool.getDenormalizedWeight(_token);\\n        uint256 poolSupply = pool.totalSupply();\\n        uint256 totalWeight = pool.getTotalDenormalizedWeight();\\n        uint256 swapFee = pool.getSwapFee();\\n        return\\n            pool.calcPoolOutGivenSingleIn(\\n                tokenBalanceIn,\\n                tokenWeightIn,\\n                poolSupply,\\n                totalWeight,\\n                _amount,\\n                swapFee\\n            );\\n    }\\n\\n    function calcPoolInGivenSingleOut(\\n        BPool pool,\\n        address _token,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        uint256 tokenBalanceOut = pool.getBalance(_token);\\n        uint256 tokenWeightOut = pool.getDenormalizedWeight(_token);\\n        uint256 poolSupply = pool.totalSupply();\\n        uint256 totalWeight = pool.getTotalDenormalizedWeight();\\n        uint256 swapFee = pool.getSwapFee();\\n        return\\n            pool.calcPoolInGivenSingleOut(\\n                tokenBalanceOut,\\n                tokenWeightOut,\\n                poolSupply,\\n                totalWeight,\\n                _amount,\\n                swapFee\\n            );\\n    }\\n\\n    function choosePoolToDeposit(address _token, uint256 _amount) private view returns (address) {\\n        address[] storage candidates = pools[_token];\\n        require(candidates.length > 0, \\\"token not supported\\\");\\n        // TODO: choose better\\n        return candidates[_amount % candidates.length];\\n    }\\n\\n    function choosePoolToWithdraw(address _token, uint256 _amount) private view returns (address) {\\n        address[] storage candidates = pools[_token];\\n        require(candidates.length > 0, \\\"token not supported\\\");\\n        // TODO: choose better\\n        return candidates[_amount % candidates.length];\\n    }\\n\\n    function addPool(address _poolAddress) public onlyOwner {\\n        BPool pool = BPool(_poolAddress);\\n        require(pool.isFinalized(), \\\"can only add finalized pools\\\");\\n        address[] memory poolTokens = pool.getFinalTokens();\\n        for (uint256 i = 0; i < poolTokens.length; i++) {\\n            address tokenAddress = poolTokens[i];\\n            address[] storage currentPools = pools[tokenAddress];\\n            if (currentPools.length == 0) {\\n                tokens.push(tokenAddress);\\n            }\\n            bool exists = false;\\n            for (uint256 j = 0; j < currentPools.length; j++) {\\n                if (currentPools[j] == _poolAddress) {\\n                    exists = true;\\n                    break;\\n                }\\n            }\\n            if (!exists) {\\n                currentPools.push(_poolAddress);\\n                IERC20(tokenAddress).approve(_poolAddress, uint256(-1));\\n            }\\n        }\\n    }\\n\\n    function allTokens() external view returns (address[] memory) {\\n        address[] memory _tokens = new address[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _tokens[i] = tokens[i];\\n        }\\n        return _tokens;\\n    }\\n}\\n\\ncontract BalancerTokenRouter is GyroRouter, Ownable {\\n    function deposit(address[] memory _tokensIn, uint256[] memory _amountsIn)\\n        external\\n        pure\\n        override\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        return (_tokensIn, _amountsIn);\\n    }\\n\\n    function withdraw(address[] memory _tokensOut, uint256[] memory _amountsOut)\\n        external\\n        pure\\n        override\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        return (_tokensOut, _amountsOut);\\n    }\\n}\\n\",\"keccak256\":\"0x0624ee1549d424934b53c8adf97a1c839a34301d6337fd6304ab97f187285a33\",\"license\":\"Unlicense\"},\"contracts/ExtendedMath.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./abdk/ABDKMath64x64.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @notice This contract contains math related utilities that allows to\\n * compute fixed-point exponentiation or perform scaled arithmetic operations\\n */\\nlibrary ExtendedMath {\\n    using ABDKMath64x64 for int128;\\n    using ABDKMath64x64 for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 constant decimals = 18;\\n    uint256 constant decimalScale = 10**decimals;\\n\\n    /**\\n     * @notice Computes x**y where both `x` and `y` are fixed-point numbers\\n     */\\n    function powf(int128 _x, int128 _y) internal pure returns (int128 _xExpy) {\\n        // 2^(y * log2(x))\\n        return _y.mul(_x.log_2()).exp_2();\\n    }\\n\\n    /**\\n     * @notice Computes `value * base ** exponent` where all of the parameters\\n     * are fixed point numbers scaled with `decimal`\\n     */\\n    function mulPow(\\n        uint256 value,\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 decimal\\n    ) internal pure returns (uint256) {\\n        int128 basef = base.fromScaled(decimal);\\n        int128 expf = exponent.fromScaled(decimal);\\n        return powf(basef, expf).mulu(value);\\n    }\\n\\n    /**\\n     * @notice Multiplies `a` and `b` scaling the result down by `_decimals`\\n     * `scaledMul(a, b, 18)` with an initial scale of 18 decimals for `a` and `b`\\n     * would keep the result to 18 decimals\\n     * The result of the computation is floored\\n     */\\n    function scaledMul(\\n        uint256 a,\\n        uint256 b,\\n        uint256 _decimals\\n    ) internal pure returns (uint256) {\\n        return a.mul(b).div(10**_decimals);\\n    }\\n\\n    function scaledMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return scaledMul(a, b, decimals);\\n    }\\n\\n    /**\\n     * @notice Divides `a` and `b` scaling the result up by `_decimals`\\n     * `scaledDiv(a, b, 18)` with an initial scale of 18 decimals for `a` and `b`\\n     * would keep the result to 18 decimals\\n     * The result of the computation is floored\\n     */\\n    function scaledDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 _decimals\\n    ) internal pure returns (uint256) {\\n        return a.mul(10**_decimals).div(b);\\n    }\\n\\n    /**\\n     * @notice See `scaledDiv(uint256 a, uint256 b, uint256 _decimals)`\\n     */\\n    function scaledDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return scaledDiv(a, b, decimals);\\n    }\\n\\n    /**\\n     * @notice Computes a**b where a is a scaled fixed-point number and b is an integer\\n     * This keeps a scale of `_decimals` for `a`\\n     * The computation is performed in O(log n)\\n     */\\n    function scaledPow(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 _decimals\\n    ) internal pure returns (uint256) {\\n        uint256 result = 10**_decimals;\\n\\n        while (exp > 0) {\\n            if (exp % 2 == 1) {\\n                result = scaledMul(result, base, _decimals);\\n            }\\n            exp /= 2;\\n            base = scaledMul(base, base, _decimals);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice See `scaledPow(uint256 base, uint256 exp, uint256 _decimals)`\\n     */\\n    function scaledPow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        return scaledPow(base, exp, decimals);\\n    }\\n}\\n\",\"keccak256\":\"0x21b7480dc4aba13031a3643bc8a08ca01a7c1ea7f523e9405f6cdfbb3f0e27c3\",\"license\":\"Unlicense\"},\"contracts/GyroFund.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./GyroPriceOracle.sol\\\";\\nimport \\\"./GyroRouter.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./abdk/ABDKMath64x64.sol\\\";\\n\\n/**\\n * GyroFund contains the public interface of the Gyroscope Reserve\\n * Its main functionality include minting and redeeming Gyro dollars\\n * using supported tokens, which are currently only Balancer Pool Tokens.\\n * To mint and redeem against other type of assets, please see the `GyroLib` contract\\n * which contains helpers and uses a basic router to do so.\\n */\\ninterface GyroFund is IERC20Upgradeable {\\n    event Mint(address indexed minter, uint256 indexed amount);\\n    event Redeem(address indexed redeemer, uint256 indexed amount);\\n\\n    /**\\n     * Mints GYD in return for user-input tokens\\n     * @param _tokensIn = array of pool token addresses, in the same order as stored in the contract\\n     * @param _amountsIn = user-input pool token amounts, in same order as _tokensIn\\n     * @param _minGyroMinted = slippage parameter for min GYD to mint or else revert\\n     * Returns amount of GYD to mint and emits a Mint event\\n     */\\n    function mint(\\n        address[] memory _tokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted\\n    ) external returns (uint256);\\n\\n    /**\\n     * Same as `mint` but the minted tokens are received by `_onBehalfOf`\\n     */\\n    function mintFor(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted,\\n        address _onBehalfOf\\n    ) external returns (uint256 amountToMint);\\n\\n    /**\\n     * Redeems GYD in return for user-specified token amounts from the reserve\\n     * @param _BPTokensOut = array of pool token addresses, in the same order as stored in the contract\\n     * @param _amountsOut = user-specified pool token amounts to redeem for, in same order as _BPTokensOut\\n     * @param _maxGyroRedeemed = slippage parameter for max GYD to redeem or else revert\\n     * Returns amount of GYD to redeem and emits Redeem event\\n     */\\n    function redeem(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed\\n    ) external returns (uint256);\\n\\n    /**\\n     * Takes in the same parameters as mint and returns whether the\\n     * mint will succeed or not as well as the estimated mint amount\\n     * @param _BPTokensIn addresses of the input balancer pool tokens\\n     * @param _amountsIn amounts of the input balancer pool tokens\\n     * @param _minGyroMinted mininum amount of gyro to mint\\n     * @return errorCode of 0 is no error happens or a value described in errors.json\\n     */\\n    function mintChecksPass(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted\\n    ) external view returns (uint256 errorCode, uint256 estimatedAmount);\\n\\n    /**\\n     * Takes in the same parameters as redeem and returns whether the\\n     * redeem will succeed or not as well as the estimated redeem amount\\n     * @param _BPTokensOut = array of pool token addresses, in the same order as stored in the contract\\n     * @param _amountsOut = user-specified pool token amounts to redeem for, in same order as _BPTokensOut\\n     * @param _maxGyroRedeemed = slippage parameter for max GYD to redeem or else revert\\n     * @return errorCode of 0 is no error happens or a value described in errors.json\\n     */\\n    function redeemChecksPass(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed\\n    ) external view returns (uint256 errorCode, uint256 estimatedAmount);\\n\\n    /**\\n     * Gets the current values in the reserve pools\\n     * @return errorCode of 0 is no error happens or a value described in errors.json\\n     * @return BPTokenAddresses = array of pool token addresses, in the right order\\n     * @return BPReserveDollarValues = dollar-value held by the reserve in each pool, in same order\\n     */\\n    function getReserveValues()\\n        external\\n        view\\n        returns (\\n            uint256 errorCode,\\n            address[] memory BPTokenAddresses,\\n            uint256[] memory BPReserveDollarValues\\n        );\\n}\\n\\n/**\\n * GyroFundV1 contains the logic for the Gyroscope Reserve\\n * The storage of this contract should be empty, as the Gyroscope storage will be\\n * held in the proxy contract.\\n * GyroFundV1 contains the mint and redeem functions for GYD and interacts with the\\n * GyroPriceOracle for the P-AMM functionality.\\n */\\ncontract GyroFundV1 is GyroFund, Ownable, ERC20Upgradeable {\\n    using ExtendedMath for int128;\\n    using ABDKMath64x64 for uint256;\\n    using ABDKMath64x64 for int128;\\n    using SafeMath for uint256;\\n    using ExtendedMath for uint256;\\n\\n    GyroPriceOracle public gyroPriceOracle;\\n    GyroRouter public gyroRouter;\\n    PriceOracle public priceOracle;\\n\\n    struct TokenProperties {\\n        address oracleAddress;\\n        string tokenSymbol;\\n        uint16 tokenIndex;\\n    }\\n\\n    struct PoolProperties {\\n        address poolAddress;\\n        uint256 initialPoolWeight;\\n        uint256 initialPoolPrice;\\n    }\\n\\n    struct PoolStatus {\\n        bool _allPoolsHealthy;\\n        bool _allPoolsWithinEpsilon;\\n        bool[] _inputPoolHealth;\\n        bool[] _poolsWithinEpsilon;\\n    }\\n\\n    struct Weights {\\n        uint256[] _idealWeights;\\n        uint256[] _currentWeights;\\n        uint256[] _hypotheticalWeights;\\n        uint256 _nav;\\n        uint256 _dollarValue;\\n        uint256 _totalPortfolioValue;\\n        uint256[] _zeroArray;\\n        uint256 gyroAmount;\\n    }\\n\\n    struct FlowLogger {\\n        uint256 inflowHistory;\\n        uint256 outflowHistory;\\n        uint256 currentBlock;\\n        uint256 lastSeenBlock;\\n    }\\n\\n    PoolProperties[] public poolProperties;\\n\\n    mapping(address => TokenProperties) _tokenAddressToProperties;\\n    mapping(address => bool) _checkPoolIsValid;\\n\\n    mapping(address => bool) _checkIsStablecoin;\\n\\n    address[] underlyingTokenAddresses;\\n\\n    uint256 public portfolioWeightEpsilon;\\n    uint256 lastSeenBlock;\\n    uint256 inflowHistory;\\n    uint256 outflowHistory;\\n    uint256 memoryParam;\\n\\n    uint256 constant WOULD_UNBALANCE_GYROSCOPE = 1;\\n    uint256 constant TOO_MUCH_SLIPPAGE = 2;\\n\\n    function initialize(\\n        uint256 _portfolioWeightEpsilon,\\n        address _priceOracleAddress,\\n        address _routerAddress,\\n        uint256 _memoryParam\\n    ) public initializer {\\n        __ERC20_init(\\\"Gyro Dollar\\\", \\\"GYD\\\");\\n        gyroPriceOracle = GyroPriceOracle(_priceOracleAddress);\\n        gyroRouter = GyroRouter(_routerAddress);\\n\\n        lastSeenBlock = block.number;\\n        memoryParam = _memoryParam;\\n\\n        portfolioWeightEpsilon = _portfolioWeightEpsilon;\\n    }\\n\\n    function addToken(\\n        address tokenAddress,\\n        address oracleAddress,\\n        bool isStable\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < underlyingTokenAddresses.length; i++) {\\n            require(underlyingTokenAddresses[i] != tokenAddress, \\\"this token already exists\\\");\\n        }\\n\\n        _checkIsStablecoin[tokenAddress] = isStable;\\n        string memory tokenSymbol = ERC20(tokenAddress).symbol();\\n        _tokenAddressToProperties[tokenAddress] = TokenProperties({\\n            oracleAddress: oracleAddress,\\n            tokenSymbol: tokenSymbol,\\n            tokenIndex: uint16(underlyingTokenAddresses.length)\\n        });\\n        underlyingTokenAddresses.push(tokenAddress);\\n    }\\n\\n    function addPool(address _bpoolAddress, uint256 _initialPoolWeight) external onlyOwner {\\n        // check we do not already have this pool\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            require(poolProperties[i].poolAddress != _bpoolAddress, \\\"this pool already exists\\\");\\n        }\\n\\n        BPool _bPool = BPool(_bpoolAddress);\\n        _checkPoolIsValid[_bpoolAddress] = true;\\n\\n        // get the addresses of the underlying tokens\\n        address[] memory _bPoolUnderlyingTokens = _bPool.getFinalTokens();\\n\\n        // fill the underlying token prices array\\n        uint256[] memory _bPoolUnderlyingTokenPrices = new uint256[](_bPoolUnderlyingTokens.length);\\n        for (uint256 i = 0; i < _bPoolUnderlyingTokens.length; i++) {\\n            address tokenAddress = _bPoolUnderlyingTokens[i];\\n            string memory tokenSymbol = ERC20(tokenAddress).symbol();\\n            _bPoolUnderlyingTokenPrices[i] = getPrice(tokenAddress, tokenSymbol);\\n        }\\n\\n        // Calculate BPT price for the pool\\n        uint256 initialPoolPrice =\\n            gyroPriceOracle.getBPTPrice(_bpoolAddress, _bPoolUnderlyingTokenPrices);\\n\\n        poolProperties.push(\\n            PoolProperties({\\n                poolAddress: _bpoolAddress,\\n                initialPoolWeight: _initialPoolWeight,\\n                initialPoolPrice: initialPoolPrice\\n            })\\n        );\\n    }\\n\\n    function calculateImpliedPoolWeights(uint256[] memory _BPTPrices)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        // order of _BPTPrices must be same as order of poolProperties\\n        uint256[] memory _newWeights = new uint256[](_BPTPrices.length);\\n        uint256[] memory _weightedReturns = new uint256[](_BPTPrices.length);\\n\\n        uint256[] memory _initPoolPrices = new uint256[](_BPTPrices.length);\\n        uint256[] memory _initWeights = new uint256[](_BPTPrices.length);\\n\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            _initPoolPrices[i] = poolProperties[i].initialPoolPrice;\\n            _initWeights[i] = poolProperties[i].initialPoolWeight;\\n        }\\n\\n        for (uint256 i = 0; i < _BPTPrices.length; i++) {\\n            _weightedReturns[i] = _BPTPrices[i].scaledDiv(_initPoolPrices[i]).scaledMul(\\n                _initWeights[i]\\n            );\\n        }\\n\\n        uint256 _returnsSum = 0;\\n        for (uint256 i = 0; i < _BPTPrices.length; i++) {\\n            _returnsSum = _returnsSum.add(_weightedReturns[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _BPTPrices.length; i++) {\\n            _newWeights[i] = _weightedReturns[i].scaledDiv(_returnsSum);\\n        }\\n\\n        return _newWeights;\\n    }\\n\\n    function nav(uint256 _totalPortfolioValue) internal view returns (uint256 _nav) {\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply > 0) {\\n            _nav = _totalPortfolioValue.scaledDiv(totalSupply());\\n        } else {\\n            _nav = 1e18;\\n        }\\n\\n        return _nav;\\n    }\\n\\n    function calculatePortfolioWeights(uint256[] memory _BPTAmounts, uint256[] memory _BPTPrices)\\n        internal\\n        pure\\n        returns (uint256[] memory, uint256)\\n    {\\n        uint256[] memory _weights = new uint256[](_BPTPrices.length);\\n        uint256 _totalPortfolioValue = 0;\\n\\n        for (uint256 i = 0; i < _BPTAmounts.length; i++) {\\n            _totalPortfolioValue = _totalPortfolioValue.add(\\n                _BPTAmounts[i].scaledMul(_BPTPrices[i])\\n            );\\n        }\\n\\n        if (_totalPortfolioValue == 0) {\\n            return (_weights, _totalPortfolioValue);\\n        }\\n\\n        for (uint256 i = 0; i < _BPTAmounts.length; i++) {\\n            _weights[i] = _BPTAmounts[i].scaledMul(_BPTPrices[i]).scaledDiv(_totalPortfolioValue);\\n        }\\n\\n        return (_weights, _totalPortfolioValue);\\n    }\\n\\n    function checkStablecoinHealth(uint256 stablecoinPrice, address stablecoinAddress)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // TODO: revisit\\n        //Price\\n        bool _stablecoinHealthy = true;\\n\\n        uint256 decimals = ERC20(stablecoinAddress).decimals();\\n\\n        uint256 maxDeviation = 5 * 10**(decimals - 2);\\n        uint256 idealPrice = 10**decimals;\\n\\n        if (stablecoinPrice >= idealPrice + maxDeviation) {\\n            _stablecoinHealthy = false;\\n        } else if (stablecoinPrice <= idealPrice - maxDeviation) {\\n            _stablecoinHealthy = false;\\n        }\\n\\n        //Volume (to do)\\n\\n        return _stablecoinHealthy;\\n    }\\n\\n    function absValueSub(uint256 _number1, uint256 _number2) internal pure returns (uint256) {\\n        if (_number1 >= _number2) {\\n            return _number1.sub(_number2);\\n        } else {\\n            return _number2.sub(_number1);\\n        }\\n    }\\n\\n    function getPrice(address _token, string memory _tokenSymbol) internal view returns (uint256) {\\n        return PriceOracle(_tokenAddressToProperties[_token].oracleAddress).getPrice(_tokenSymbol);\\n    }\\n\\n    function bytes32ToString(bytes32 x) private pure returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint256 charCount = 0;\\n        for (uint256 j = 0; j < 32; j++) {\\n            bytes1 char = bytes1(bytes32(uint256(x) * 2**(8 * j)));\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    function getAllTokenPrices() public view returns (uint256[] memory) {\\n        uint256[] memory _allUnderlyingPrices = new uint256[](underlyingTokenAddresses.length);\\n        for (uint256 i = 0; i < underlyingTokenAddresses.length; i++) {\\n            address _tokenAddress = underlyingTokenAddresses[i];\\n            string memory _tokenSymbol =\\n                _tokenAddressToProperties[underlyingTokenAddresses[i]].tokenSymbol;\\n            uint256 _tokenPrice = getPrice(_tokenAddress, _tokenSymbol);\\n            _allUnderlyingPrices[i] = _tokenPrice;\\n        }\\n        return _allUnderlyingPrices;\\n    }\\n\\n    function mintTest(address[] memory _BPTokensIn, uint256[] memory _amountsIn)\\n        public\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            bool success =\\n                ERC20(_BPTokensIn[i]).transferFrom(msg.sender, address(this), _amountsIn[i]);\\n            require(success, \\\"failed to transfer tokens, check allowance\\\");\\n        }\\n        uint256[] memory _allUnderlyingPrices = getAllTokenPrices();\\n        uint256[] memory _currentBPTPrices = calculateAllPoolPrices(_allUnderlyingPrices);\\n        uint256 _dollarValue = 0;\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            _dollarValue = _dollarValue.add(_amountsIn[i].scaledMul(_currentBPTPrices[i]));\\n        }\\n\\n        uint256 _gyroToMint = gyroPriceOracle.getAmountToMint(_dollarValue, 0, 1e18);\\n\\n        _mint(msg.sender, _gyroToMint);\\n        return _gyroToMint;\\n    }\\n\\n    function calculateAllPoolPrices(uint256[] memory _allUnderlyingPrices)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _currentBPTPrices = new uint256[](poolProperties.length);\\n\\n        // Calculate BPT prices for all pools\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            BPool _bPool = BPool(poolProperties[i].poolAddress);\\n\\n            address[] memory _bPoolUnderlyingTokens = _bPool.getFinalTokens();\\n\\n            //For each pool fill the underlying token prices array\\n            uint256[] memory _bPoolUnderlyingTokenPrices =\\n                new uint256[](underlyingTokenAddresses.length);\\n            for (uint256 j = 0; j < _bPoolUnderlyingTokens.length; j++) {\\n                _bPoolUnderlyingTokenPrices[j] = _allUnderlyingPrices[\\n                    _tokenAddressToProperties[_bPoolUnderlyingTokens[j]].tokenIndex\\n                ];\\n            }\\n\\n            // Calculate BPT price for the pool\\n            _currentBPTPrices[i] = gyroPriceOracle.getBPTPrice(\\n                poolProperties[i].poolAddress,\\n                _bPoolUnderlyingTokenPrices\\n            );\\n        }\\n\\n        return _currentBPTPrices;\\n    }\\n\\n    function poolHealthHelper(uint256[] memory _allUnderlyingPrices, uint256 _poolIndex)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool _poolHealthy = true;\\n\\n        BPool _bPool = BPool(poolProperties[_poolIndex].poolAddress);\\n        address[] memory _bPoolUnderlyingTokens = _bPool.getFinalTokens();\\n\\n        //Go through the underlying tokens within the pool\\n        for (uint256 j = 0; j < _bPoolUnderlyingTokens.length; j++) {\\n            if (_checkIsStablecoin[_bPoolUnderlyingTokens[j]]) {\\n                uint256 _stablecoinPrice =\\n                    _allUnderlyingPrices[\\n                        _tokenAddressToProperties[_bPoolUnderlyingTokens[j]].tokenIndex\\n                    ];\\n\\n                if (!checkStablecoinHealth(_stablecoinPrice, _bPoolUnderlyingTokens[j])) {\\n                    _poolHealthy = false;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return _poolHealthy;\\n    }\\n\\n    function checkPoolsWithinEpsilon(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _idealWeights\\n    ) internal view returns (bool, bool[] memory) {\\n        bool _allPoolsWithinEpsilon = true;\\n        bool[] memory _poolsWithinEpsilon = new bool[](_BPTokensIn.length);\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            // Check 1: check whether hypothetical weight will be within epsilon\\n            _poolsWithinEpsilon[i] = true;\\n            if (_hypotheticalWeights[i] >= _idealWeights[i].add(portfolioWeightEpsilon)) {\\n                _allPoolsWithinEpsilon = false;\\n                _poolsWithinEpsilon[i] = false;\\n            } else if (_hypotheticalWeights[i].add(portfolioWeightEpsilon) <= _idealWeights[i]) {\\n                _allPoolsWithinEpsilon = false;\\n                _poolsWithinEpsilon[i] = false;\\n            }\\n        }\\n\\n        return (_allPoolsWithinEpsilon, _poolsWithinEpsilon);\\n    }\\n\\n    function checkAllPoolsHealthy(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _idealWeights,\\n        uint256[] memory _allUnderlyingPrices\\n    )\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool[] memory,\\n            bool[] memory\\n        )\\n    {\\n        // Check safety of input tokens\\n        bool _allPoolsWithinEpsilon;\\n        bool[] memory _poolsWithinEpsilon = new bool[](_BPTokensIn.length);\\n        bool[] memory _inputPoolHealth = new bool[](_BPTokensIn.length);\\n        bool _allPoolsHealthy = true;\\n\\n        (_allPoolsWithinEpsilon, _poolsWithinEpsilon) = checkPoolsWithinEpsilon(\\n            _BPTokensIn,\\n            _hypotheticalWeights,\\n            _idealWeights\\n        );\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            _inputPoolHealth[i] = poolHealthHelper(_allUnderlyingPrices, i);\\n            _allPoolsHealthy = _allPoolsHealthy && _inputPoolHealth[i];\\n        }\\n\\n        return (_allPoolsHealthy, _allPoolsWithinEpsilon, _inputPoolHealth, _poolsWithinEpsilon);\\n    }\\n\\n    function safeToMintOutsideEpsilon(\\n        address[] memory _BPTokensIn,\\n        bool[] memory _inputPoolHealth,\\n        uint256[] memory _inputBPTWeights,\\n        uint256[] memory _idealWeights,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _currentWeights,\\n        bool[] memory _poolsWithinEpsilon\\n    ) internal pure returns (bool _anyCheckFail) {\\n        //Check that amount above epsilon is decreasing\\n        //Check that unhealthy pools have input weight below ideal weight\\n        //If both true, then mint\\n        //note: should always be able to mint at the ideal weights!\\n        _anyCheckFail = false;\\n        for (uint256 i; i < _BPTokensIn.length; i++) {\\n            if (!_inputPoolHealth[i]) {\\n                if (_inputBPTWeights[i] > _idealWeights[i]) {\\n                    _anyCheckFail = true;\\n                    break;\\n                }\\n            }\\n\\n            if (!_poolsWithinEpsilon[i]) {\\n                // check if _hypotheticalWeights[i] is closer to _idealWeights[i] than _currentWeights[i]\\n                uint256 _distanceHypotheticalToIdeal =\\n                    absValueSub(_hypotheticalWeights[i], _idealWeights[i]);\\n                uint256 _distanceCurrentToIdeal = absValueSub(_currentWeights[i], _idealWeights[i]);\\n\\n                if (_distanceHypotheticalToIdeal >= _distanceCurrentToIdeal) {\\n                    _anyCheckFail = true;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (!_anyCheckFail) {\\n            return true;\\n        }\\n    }\\n\\n    function checkBPTokenOrder(address[] memory _BPTokensIn) internal view returns (bool _correct) {\\n        require(\\n            _BPTokensIn.length == poolProperties.length,\\n            \\\"bptokens do not have the correct number of addreses\\\"\\n        );\\n        _correct = true;\\n\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            if (poolProperties[i].poolAddress != _BPTokensIn[i]) {\\n                _correct = false;\\n                break;\\n            }\\n        }\\n\\n        return _correct;\\n    }\\n\\n    function checkUnhealthyMovesToIdeal(\\n        address[] memory _BPTokensIn,\\n        bool[] memory _inputPoolHealth,\\n        uint256[] memory _inputBPTWeights,\\n        uint256[] memory _idealWeights\\n    ) internal pure returns (bool _launch) {\\n        bool _unhealthyMovesTowardIdeal = true;\\n        for (uint256 i; i < _BPTokensIn.length; i++) {\\n            if (!_inputPoolHealth[i]) {\\n                if (_inputBPTWeights[i] > _idealWeights[i]) {\\n                    _unhealthyMovesTowardIdeal = false;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (_unhealthyMovesTowardIdeal) {\\n            _launch = true;\\n        }\\n    }\\n\\n    function safeToMint(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _idealWeights,\\n        uint256[] memory _allUnderlyingPrices,\\n        uint256[] memory _amountsIn,\\n        uint256[] memory _currentBPTPrices,\\n        uint256[] memory _currentWeights\\n    ) internal view returns (bool _launch) {\\n        _launch = false;\\n\\n        PoolStatus memory poolStatus;\\n\\n        (\\n            poolStatus._allPoolsHealthy,\\n            poolStatus._allPoolsWithinEpsilon,\\n            poolStatus._inputPoolHealth,\\n            poolStatus._poolsWithinEpsilon\\n        ) = checkAllPoolsHealthy(\\n            _BPTokensIn,\\n            _hypotheticalWeights,\\n            _idealWeights,\\n            _allUnderlyingPrices\\n        );\\n\\n        // if check 1 succeeds and all pools healthy, then proceed with minting\\n        if (poolStatus._allPoolsHealthy) {\\n            if (poolStatus._allPoolsWithinEpsilon) {\\n                _launch = true;\\n            }\\n        } else {\\n            // calculate proportional values of assets user wants to pay with\\n            (uint256[] memory _inputBPTWeights, uint256 _totalPortfolioValue) =\\n                calculatePortfolioWeights(_amountsIn, _currentBPTPrices);\\n            if (_totalPortfolioValue == 0) {\\n                _inputBPTWeights = _idealWeights;\\n            }\\n\\n            //Check that unhealthy pools have input weight below ideal weight. If true, mint\\n            if (poolStatus._allPoolsWithinEpsilon) {\\n                _launch = checkUnhealthyMovesToIdeal(\\n                    _BPTokensIn,\\n                    poolStatus._inputPoolHealth,\\n                    _inputBPTWeights,\\n                    _idealWeights\\n                );\\n            }\\n            //Outside of the epsilon boundary\\n            else {\\n                _launch = safeToMintOutsideEpsilon(\\n                    _BPTokensIn,\\n                    poolStatus._inputPoolHealth,\\n                    _inputBPTWeights,\\n                    _idealWeights,\\n                    _hypotheticalWeights,\\n                    _currentWeights,\\n                    poolStatus._poolsWithinEpsilon\\n                );\\n            }\\n        }\\n\\n        return _launch;\\n    }\\n\\n    function safeToRedeem(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _hypotheticalWeights,\\n        uint256[] memory _idealWeights,\\n        uint256[] memory _currentWeights\\n    ) internal view returns (bool) {\\n        bool _launch = false;\\n        bool _allPoolsWithinEpsilon;\\n        bool[] memory _poolsWithinEpsilon = new bool[](_BPTokensOut.length);\\n\\n        (_allPoolsWithinEpsilon, _poolsWithinEpsilon) = checkPoolsWithinEpsilon(\\n            _BPTokensOut,\\n            _hypotheticalWeights,\\n            _idealWeights\\n        );\\n        if (_allPoolsWithinEpsilon) {\\n            _launch = true;\\n            return _launch;\\n        }\\n\\n        // check if weights that are beyond epsilon boundary are closer to ideal than current weights\\n        bool _checkFail = false;\\n        for (uint256 i; i < _BPTokensOut.length; i++) {\\n            if (!_poolsWithinEpsilon[i]) {\\n                // check if _hypotheticalWeights[i] is closer to _idealWeights[i] than _currentWeights[i]\\n                uint256 _distanceHypotheticalToIdeal =\\n                    absValueSub(_hypotheticalWeights[i], _idealWeights[i]);\\n                uint256 _distanceCurrentToIdeal = absValueSub(_currentWeights[i], _idealWeights[i]);\\n\\n                if (_distanceHypotheticalToIdeal >= _distanceCurrentToIdeal) {\\n                    _checkFail = true;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (!_checkFail) {\\n            _launch = true;\\n        }\\n\\n        return _launch;\\n    }\\n\\n    function calculateAllWeights(\\n        uint256[] memory _currentBPTPrices,\\n        address[] memory _BPTokens,\\n        uint256[] memory _amountsIn,\\n        uint256[] memory _amountsOut\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256[] memory _idealWeights,\\n            uint256[] memory _currentWeights,\\n            uint256[] memory _hypotheticalWeights,\\n            uint256 _nav,\\n            uint256 _totalPortfolioValue\\n        )\\n    {\\n        //Calculate the up to date ideal portfolio weights\\n        _idealWeights = calculateImpliedPoolWeights(_currentBPTPrices);\\n\\n        //Calculate the hypothetical weights if the new BPT tokens were added\\n        uint256[] memory _BPTNewAmounts = new uint256[](_BPTokens.length);\\n        uint256[] memory _BPTCurrentAmounts = new uint256[](_BPTokens.length);\\n\\n        for (uint256 i = 0; i < _BPTokens.length; i++) {\\n            BPool _bPool = BPool(_BPTokens[i]);\\n            _BPTCurrentAmounts[i] = _bPool.balanceOf(address(this));\\n            _BPTNewAmounts[i] = _BPTCurrentAmounts[i].add(_amountsIn[i]).sub(_amountsOut[i]);\\n        }\\n\\n        (_currentWeights, _totalPortfolioValue) = calculatePortfolioWeights(\\n            _BPTCurrentAmounts,\\n            _currentBPTPrices\\n        );\\n        if (_totalPortfolioValue == 0) {\\n            _currentWeights = _idealWeights;\\n        }\\n\\n        _nav = nav(_totalPortfolioValue);\\n\\n        (_hypotheticalWeights, ) = calculatePortfolioWeights(_BPTNewAmounts, _currentBPTPrices);\\n\\n        return (_idealWeights, _currentWeights, _hypotheticalWeights, _nav, _totalPortfolioValue);\\n    }\\n\\n    //_amountsIn in should have a zero index if nothing has been submitted for a particular token\\n    // _BPTokensIn and _amountsIn should have same indexes as poolProperties\\n    function mint(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted\\n    ) public override returns (uint256 amountToMint) {\\n        return mintFor(_BPTokensIn, _amountsIn, _minGyroMinted, msg.sender);\\n    }\\n\\n    function mintFor(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted,\\n        address _onBehalfOf\\n    ) public override returns (uint256 amountToMint) {\\n        (uint256 errorCode, Weights memory weights, FlowLogger memory flowLogger) =\\n            mintChecksPassInternal(_BPTokensIn, _amountsIn, _minGyroMinted);\\n        require(errorCode == 0, errorCodeToString(errorCode));\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            bool success =\\n                ERC20(_BPTokensIn[i]).transferFrom(msg.sender, address(this), _amountsIn[i]);\\n            require(success, \\\"failed to transfer tokens, check allowance\\\");\\n        }\\n\\n        amountToMint = weights.gyroAmount;\\n\\n        _mint(_onBehalfOf, amountToMint);\\n\\n        finalizeFlowLogger(\\n            flowLogger.inflowHistory,\\n            flowLogger.outflowHistory,\\n            weights.gyroAmount,\\n            0,\\n            flowLogger.currentBlock,\\n            flowLogger.lastSeenBlock\\n        );\\n\\n        emit Mint(_onBehalfOf, amountToMint);\\n\\n        return amountToMint;\\n    }\\n\\n    function mintChecksPass(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted\\n    ) public view override returns (uint256 errorCode, uint256 estimatedMint) {\\n        (uint256 _errorCode, Weights memory weights, ) =\\n            mintChecksPassInternal(_BPTokensIn, _amountsIn, _minGyroMinted);\\n\\n        return (_errorCode, weights.gyroAmount);\\n    }\\n\\n    function getReserveValues()\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            address[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        address[] memory _BPTokens = new address[](poolProperties.length);\\n        uint256[] memory _zeroAmounts = new uint256[](poolProperties.length);\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            _BPTokens[i] = poolProperties[i].poolAddress;\\n        }\\n\\n        (uint256 _errorCode, Weights memory weights, ) =\\n            mintChecksPassInternal(_BPTokens, _zeroAmounts, uint256(0));\\n\\n        uint256[] memory _BPReserveDollarValues = new uint256[](_BPTokens.length);\\n\\n        for (uint256 i = 0; i < _BPTokens.length; i++) {\\n            _BPReserveDollarValues[i] = weights._currentWeights[i].scaledMul(\\n                weights._totalPortfolioValue\\n            );\\n        }\\n\\n        return (_errorCode, _BPTokens, _BPReserveDollarValues);\\n    }\\n\\n    function mintChecksPassInternal(\\n        address[] memory _BPTokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 errorCode,\\n            Weights memory weights,\\n            FlowLogger memory flowLogger\\n        )\\n    {\\n        require(\\n            _BPTokensIn.length == _amountsIn.length,\\n            \\\"tokensIn and valuesIn should have the same number of elements\\\"\\n        );\\n\\n        //Filter 1: Require that the tokens are supported and in correct order\\n        bool _orderCorrect = checkBPTokenOrder(_BPTokensIn);\\n        require(_orderCorrect, \\\"Input tokens in wrong order or contains invalid tokens\\\");\\n\\n        uint256[] memory _allUnderlyingPrices = getAllTokenPrices();\\n\\n        uint256[] memory _currentBPTPrices = calculateAllPoolPrices(_allUnderlyingPrices);\\n\\n        weights._zeroArray = new uint256[](_BPTokensIn.length);\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            weights._zeroArray[i] = 0;\\n        }\\n\\n        (\\n            weights._idealWeights,\\n            weights._currentWeights,\\n            weights._hypotheticalWeights,\\n            weights._nav,\\n            weights._totalPortfolioValue\\n        ) = calculateAllWeights(_currentBPTPrices, _BPTokensIn, _amountsIn, weights._zeroArray);\\n\\n        bool _safeToMint =\\n            safeToMint(\\n                _BPTokensIn,\\n                weights._hypotheticalWeights,\\n                weights._idealWeights,\\n                _allUnderlyingPrices,\\n                _amountsIn,\\n                _currentBPTPrices,\\n                weights._currentWeights\\n            );\\n\\n        if (!_safeToMint) {\\n            errorCode |= WOULD_UNBALANCE_GYROSCOPE;\\n        }\\n\\n        weights._dollarValue = 0;\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            weights._dollarValue = weights._dollarValue.add(\\n                _amountsIn[i].scaledMul(_currentBPTPrices[i])\\n            );\\n        }\\n\\n        flowLogger = initializeFlowLogger();\\n\\n        weights.gyroAmount = gyroPriceOracle.getAmountToMint(\\n            weights._dollarValue,\\n            flowLogger.inflowHistory,\\n            weights._nav\\n        );\\n\\n        if (weights.gyroAmount < _minGyroMinted) {\\n            errorCode |= TOO_MUCH_SLIPPAGE;\\n        }\\n\\n        return (errorCode, weights, flowLogger);\\n    }\\n\\n    function redeemChecksPass(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed\\n    ) public view override returns (uint256 errorCode, uint256 estimatedAmount) {\\n        (uint256 _errorCode, Weights memory weights, ) =\\n            redeemChecksPassInternal(_BPTokensOut, _amountsOut, _maxGyroRedeemed);\\n        return (_errorCode, weights.gyroAmount);\\n    }\\n\\n    function redeemChecksPassInternal(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 errorCode,\\n            Weights memory weights,\\n            FlowLogger memory flowLogger\\n        )\\n    {\\n        require(\\n            _BPTokensOut.length == _amountsOut.length,\\n            \\\"tokensIn and valuesIn should have the same number of elements\\\"\\n        );\\n\\n        //Filter 1: Require that the tokens are supported and in correct order\\n        require(\\n            checkBPTokenOrder(_BPTokensOut),\\n            \\\"Input tokens in wrong order or contains invalid tokens\\\"\\n        );\\n\\n        weights._zeroArray = new uint256[](_BPTokensOut.length);\\n        for (uint256 i = 0; i < _BPTokensOut.length; i++) {\\n            weights._zeroArray[i] = 0;\\n        }\\n\\n        uint256[] memory _allUnderlyingPrices = getAllTokenPrices();\\n\\n        uint256[] memory _currentBPTPrices = calculateAllPoolPrices(_allUnderlyingPrices);\\n\\n        (\\n            weights._idealWeights,\\n            weights._currentWeights,\\n            weights._hypotheticalWeights,\\n            weights._nav,\\n            weights._totalPortfolioValue\\n        ) = calculateAllWeights(_currentBPTPrices, _BPTokensOut, weights._zeroArray, _amountsOut);\\n\\n        bool _safeToRedeem =\\n            safeToRedeem(\\n                _BPTokensOut,\\n                weights._hypotheticalWeights,\\n                weights._idealWeights,\\n                weights._currentWeights\\n            );\\n\\n        if (!_safeToRedeem) {\\n            errorCode |= WOULD_UNBALANCE_GYROSCOPE;\\n        }\\n\\n        weights._dollarValue = 0;\\n\\n        for (uint256 i = 0; i < _BPTokensOut.length; i++) {\\n            weights._dollarValue = weights._dollarValue.add(\\n                _amountsOut[i].scaledMul(_currentBPTPrices[i])\\n            );\\n        }\\n\\n        flowLogger = initializeFlowLogger();\\n\\n        weights.gyroAmount = gyroPriceOracle.getAmountToRedeem(\\n            weights._dollarValue,\\n            flowLogger.outflowHistory,\\n            weights._nav\\n        );\\n\\n        if (weights.gyroAmount > _maxGyroRedeemed) {\\n            errorCode |= TOO_MUCH_SLIPPAGE;\\n        }\\n\\n        return (errorCode, weights, flowLogger);\\n    }\\n\\n    function redeem(\\n        address[] memory _BPTokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed\\n    ) public override returns (uint256 _gyroRedeemed) {\\n        (uint256 errorCode, Weights memory weights, FlowLogger memory flowLogger) =\\n            redeemChecksPassInternal(_BPTokensOut, _amountsOut, _maxGyroRedeemed);\\n        require(errorCode == 0, errorCodeToString(errorCode));\\n\\n        _gyroRedeemed = weights.gyroAmount;\\n\\n        _burn(msg.sender, _gyroRedeemed);\\n\\n        gyroRouter.withdraw(_BPTokensOut, _amountsOut);\\n\\n        for (uint256 i = 0; i < _amountsOut.length; i++) {\\n            bool success =\\n                ERC20(_BPTokensOut[i]).transferFrom(address(this), msg.sender, _amountsOut[i]);\\n            require(success, \\\"failed to transfer tokens\\\");\\n        }\\n\\n        emit Redeem(msg.sender, _gyroRedeemed);\\n        finalizeFlowLogger(\\n            flowLogger.inflowHistory,\\n            flowLogger.outflowHistory,\\n            0,\\n            _gyroRedeemed,\\n            flowLogger.currentBlock,\\n            flowLogger.lastSeenBlock\\n        );\\n        return _gyroRedeemed;\\n    }\\n\\n    function initializeFlowLogger() internal view returns (FlowLogger memory flowLogger) {\\n        flowLogger.lastSeenBlock = lastSeenBlock;\\n        flowLogger.currentBlock = block.number;\\n        flowLogger.inflowHistory = inflowHistory;\\n        flowLogger.outflowHistory = outflowHistory;\\n\\n        uint256 _memoryParam = memoryParam;\\n\\n        if (flowLogger.lastSeenBlock < flowLogger.currentBlock) {\\n            flowLogger.inflowHistory = flowLogger.inflowHistory.scaledMul(\\n                _memoryParam.scaledPow(flowLogger.currentBlock.sub(flowLogger.lastSeenBlock))\\n            );\\n            flowLogger.outflowHistory = flowLogger.outflowHistory.scaledMul(\\n                _memoryParam.scaledPow(flowLogger.currentBlock.sub(flowLogger.lastSeenBlock))\\n            );\\n        }\\n\\n        return flowLogger;\\n    }\\n\\n    function finalizeFlowLogger(\\n        uint256 _inflowHistory,\\n        uint256 _outflowHistory,\\n        uint256 _gyroMinted,\\n        uint256 _gyroRedeemed,\\n        uint256 _currentBlock,\\n        uint256 _lastSeenBlock\\n    ) internal {\\n        if (_gyroMinted > 0) {\\n            inflowHistory = _inflowHistory.add(_gyroMinted);\\n        }\\n        if (_gyroRedeemed > 0) {\\n            outflowHistory = _outflowHistory.add(_gyroRedeemed);\\n        }\\n        if (_lastSeenBlock < _currentBlock) {\\n            lastSeenBlock = _currentBlock;\\n        }\\n    }\\n\\n    function poolAddresses() public view returns (address[] memory) {\\n        address[] memory _addresses = new address[](poolProperties.length);\\n        for (uint256 i = 0; i < poolProperties.length; i++) {\\n            _addresses[i] = poolProperties[i].poolAddress;\\n        }\\n        return _addresses;\\n    }\\n\\n    function getUnderlyingTokenAddresses() external view returns (address[] memory) {\\n        address[] memory _addresses = new address[](underlyingTokenAddresses.length);\\n        for (uint256 i = 0; i < underlyingTokenAddresses.length; i++) {\\n            _addresses[i] = underlyingTokenAddresses[i];\\n        }\\n        return _addresses;\\n    }\\n\\n    function errorCodeToString(uint256 errorCode) public pure returns (string memory) {\\n        if ((errorCode & WOULD_UNBALANCE_GYROSCOPE) != 0) {\\n            return \\\"ERR_WOULD_UNBALANCE_GYROSCOPE\\\";\\n        } else if ((errorCode & TOO_MUCH_SLIPPAGE) != 0) {\\n            return \\\"ERR_TOO_MUCH_SLIPPAGE\\\";\\n        } else {\\n            return \\\"ERR_UNKNOWN\\\";\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x746ce2f97b3970941879936c8160936c2c8131cd3ecbdf3f0501d6037be9378d\",\"license\":\"Unlicense\"},\"contracts/GyroLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BalancerGyroRouter.sol\\\";\\nimport \\\"./GyroFund.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @notice GyroLib is a contract used to add functionality around the GyroFund\\n * to allow users to exchange assets for Gyro rather than having\\n * to use already minted Balancer Pool Tokens\\n */\\ncontract GyroLib is Ownable {\\n    event Mint(address indexed minter, uint256 indexed amount);\\n    event Redeem(address indexed redeemer, uint256 indexed amount);\\n\\n    GyroFundV1 public fund;\\n    BalancerExternalTokenRouter public externalTokensRouter;\\n\\n    constructor(address gyroFundAddress, address externalTokensRouterAddress) {\\n        fund = GyroFundV1(gyroFundAddress);\\n        externalTokensRouter = BalancerExternalTokenRouter(externalTokensRouterAddress);\\n    }\\n\\n    function setFundAddress(address _fundAddress) external onlyOwner {\\n        fund = GyroFundV1(_fundAddress);\\n    }\\n\\n    function setRouterAddress(address _routerAddress) external onlyOwner {\\n        externalTokensRouter = BalancerExternalTokenRouter(_routerAddress);\\n    }\\n\\n    /**\\n     * @notice Mints at least `_minAmountOut` Gyro dollars by using the tokens and amounts\\n     * passed in `_tokensIn` and `_amountsIn`. `_tokensIn` and `_amountsIn` must\\n     * be the same length and `_amountsIn[i]` is the amount of `_tokensIn[i]` to\\n     * use to mint Gyro dollars.\\n     * This contract should be approved to spend at least the amount given\\n     * for each token of `_tokensIn`\\n     *\\n     * @param _tokensIn a list of tokens to use to mint Gyro dollars\\n     * @param _amountsIn the amount of each token to use\\n     * @param _minAmountOut the minimum number of Gyro dollars wanted, used to prevent against slippage\\n     * @return the amount of Gyro dollars minted\\n     */\\n    function mintFromUnderlyingTokens(\\n        address[] memory _tokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minAmountOut\\n    ) public returns (uint256) {\\n        for (uint256 i = 0; i < _tokensIn.length; i++) {\\n            bool success =\\n                IERC20(_tokensIn[i]).transferFrom(msg.sender, address(this), _amountsIn[i]);\\n            require(success, \\\"failed to transfer tokens from GyroFund to GryoRouter\\\");\\n            IERC20(_tokensIn[i]).approve(address(externalTokensRouter), _amountsIn[i]);\\n        }\\n        (address[] memory bptTokens, uint256[] memory amounts) =\\n            externalTokensRouter.deposit(_tokensIn, _amountsIn);\\n\\n        (address[] memory sortedAddresses, uint256[] memory sortedAmounts) =\\n            sortBPTokenstoPools(bptTokens, amounts);\\n\\n        for (uint256 i = 0; i < sortedAddresses.length; i++) {\\n            IERC20(sortedAddresses[i]).approve(address(fund), sortedAmounts[i]);\\n        }\\n\\n        uint256 minted = fund.mint(sortedAddresses, sortedAmounts, _minAmountOut);\\n        require(fund.transfer(msg.sender, minted), \\\"failed to send back gyro\\\");\\n        emit Mint(msg.sender, minted);\\n        return minted;\\n    }\\n\\n    /**\\n     * @notice Redeems at most `_maxRedeemed` to receive exactly `_amountsOut[i]`\\n     * of each `_tokensOut[i]`.\\n     * `_tokensOut[i]` and  `_amountsOut[i]` must be the same length and `_amountsOut[i]`\\n     * is the amount desired of `_tokensOut[i]`\\n     * This contract should be allowed to spend the amount of Gyro dollars redeemed\\n     * which is at most `_maxRedeemed`\\n     *\\n     * @param _tokensOut the tokens to receive in exchange for redeeming Gyro dollars\\n     * @param _amountsOut the amount of each token to receive\\n     * @param _maxRedeemed the maximum number of Gyro dollars to redeem\\n     * @return the amount of Gyro dollar redeemed\\n     */\\n    function redeemToUnderlyingTokens(\\n        address[] memory _tokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxRedeemed\\n    ) public returns (uint256) {\\n        (address[] memory _BPTokensIn, uint256[] memory _BPAmountsIn) =\\n            externalTokensRouter.estimateWithdraw(_tokensOut, _amountsOut);\\n\\n        (address[] memory _sortedAddresses, uint256[] memory _sortedAmounts) =\\n            sortBPTokenstoPools(_BPTokensIn, _BPAmountsIn);\\n\\n        (uint256 errorCode, uint256 _amountToRedeem) =\\n            fund.redeemChecksPass(_sortedAddresses, _sortedAmounts, _maxRedeemed);\\n\\n        require(errorCode == 0, fund.errorCodeToString(errorCode));\\n        require(_amountToRedeem <= _maxRedeemed, \\\"too much slippage\\\");\\n\\n        require(\\n            fund.transferFrom(msg.sender, address(this), _amountToRedeem),\\n            \\\"failed to send gyro to lib\\\"\\n        );\\n\\n        uint256 _amountRedeemed = fund.redeem(_sortedAddresses, _sortedAmounts, _maxRedeemed);\\n\\n        for (uint256 i = 0; i < _sortedAddresses.length; i++) {\\n            require(\\n                IERC20(_sortedAddresses[i]).approve(\\n                    address(externalTokensRouter),\\n                    _sortedAmounts[i]\\n                ),\\n                \\\"failed to approve BPTokens\\\"\\n            );\\n        }\\n\\n        externalTokensRouter.withdraw(_tokensOut, _amountsOut);\\n\\n        for (uint256 i = 0; i < _tokensOut.length; i++) {\\n            IERC20(_tokensOut[i]).transfer(msg.sender, _amountsOut[i]);\\n        }\\n\\n        emit Redeem(msg.sender, _amountRedeemed);\\n        return _amountRedeemed;\\n    }\\n\\n    /**\\n     * @notice This functions approximates how many Gyro dollars would be minted given\\n     * `_tokensIn` and `_amountsIn`. See the documentation of `mintFromUnderlyingTokens`\\n     * for more details about these parameters\\n     * @param _tokensIn the tokens to use for minting\\n     * @param _amountsIn the amount of each token to use\\n     * @return the estimated amount of Gyro dolars minted\\n     */\\n    function estimateMintedGyro(address[] memory _tokensIn, uint256[] memory _amountsIn)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (address[] memory bptTokens, uint256[] memory amounts) =\\n            externalTokensRouter.estimateDeposit(_tokensIn, _amountsIn);\\n\\n        (address[] memory _sortedAddresses, uint256[] memory _sortedAmounts) =\\n            sortBPTokenstoPools(bptTokens, amounts);\\n\\n        (, uint256 _amountToMint) = fund.mintChecksPass(_sortedAddresses, _sortedAmounts, 10);\\n\\n        return _amountToMint;\\n    }\\n\\n    /**\\n     * @notice This functions approximates how many Gyro dollars would be redeemed given\\n     * `_tokensOut` and `_amountsOut`. See the documentation of `redeemToUnderlyingTokens`\\n     * for more details about these parameters\\n     * @param _tokensOut the tokens receive back\\n     * @param _amountsOut the amount of each token to receive\\n     * @return the estimated amount of Gyro dolars redeemed\\n     */\\n    function estimateRedeemedGyro(address[] memory _tokensOut, uint256[] memory _amountsOut)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (address[] memory bptTokens, uint256[] memory amounts) =\\n            externalTokensRouter.estimateWithdraw(_tokensOut, _amountsOut);\\n\\n        (address[] memory _sortedAddresses, uint256[] memory _sortedAmounts) =\\n            sortBPTokenstoPools(bptTokens, amounts);\\n\\n        (, uint256 _amountToRedeem) = fund.redeemChecksPass(_sortedAddresses, _sortedAmounts, 10);\\n\\n        return _amountToRedeem;\\n    }\\n\\n    /**\\n     * @notice Checks if a call to `mintFromUnderlyingTokens` with the given\\n     * `_tokensIn`, `_amountsIn and `_minGyroMinted` would succeed or not,\\n     * and returns the potential error code\\n     * @param _tokensIn a list of tokens to use to mint Gyro dollars\\n     * @param _amountsIn the amount of each token to use\\n     * @param _minGyroMinted the minimum number of Gyro dollars wanted\\n     * @return an error code if the call would fail, otherwise 0\\n     * See GyroFundV1 for the meaning of each error code\\n     */\\n    function wouldMintChecksPass(\\n        address[] memory _tokensIn,\\n        uint256[] memory _amountsIn,\\n        uint256 _minGyroMinted\\n    ) public view returns (uint256) {\\n        (address[] memory bptTokens, uint256[] memory amounts) =\\n            externalTokensRouter.estimateDeposit(_tokensIn, _amountsIn);\\n\\n        (address[] memory sortedAddresses, uint256[] memory sortedAmounts) =\\n            sortBPTokenstoPools(bptTokens, amounts);\\n\\n        (uint256 errorCode, ) = fund.mintChecksPass(sortedAddresses, sortedAmounts, _minGyroMinted);\\n\\n        return errorCode;\\n    }\\n\\n    /**\\n     * @notice Checks if a call to `redeemToUnderlyingTokens` with the given\\n     * `_tokensOut`, `_amountsOut and `_maxGyroRedeemed` would succeed or not,\\n     * and returns the potential error code\\n     * @param _tokensOut the tokens to receive in exchange for redeeming Gyro dollars\\n     * @param _amountsOut the amount of each token to receive\\n     * @param _maxGyroRedeemed the maximum number of Gyro dollars to redeem\\n     * @return an error code if the call would fail, otherwise 0\\n     */\\n    function wouldRedeemChecksPass(\\n        address[] memory _tokensOut,\\n        uint256[] memory _amountsOut,\\n        uint256 _maxGyroRedeemed\\n    ) public view returns (uint256) {\\n        (address[] memory bptTokens, uint256[] memory amounts) =\\n            externalTokensRouter.estimateDeposit(_tokensOut, _amountsOut);\\n\\n        (address[] memory sortedAddresses, uint256[] memory sortedAmounts) =\\n            sortBPTokenstoPools(bptTokens, amounts);\\n\\n        (uint256 errorCode, ) =\\n            fund.redeemChecksPass(sortedAddresses, sortedAmounts, _maxGyroRedeemed);\\n\\n        return errorCode;\\n    }\\n\\n    /**\\n     * @return the list of tokens supported by the Gyro fund\\n     */\\n    function getSupportedTokens() external view returns (address[] memory) {\\n        return fund.getUnderlyingTokenAddresses();\\n    }\\n\\n    /**\\n     * @return the list of Balance pools supported by the Gyro fund\\n     */\\n    function getSupportedPools() external view returns (address[] memory) {\\n        return fund.poolAddresses();\\n    }\\n\\n    /**\\n     * @return the current values of the Gyro fund's reserve\\n     */\\n    function getReserveValues()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            address[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        return fund.getReserveValues();\\n    }\\n\\n    function sortBPTokenstoPools(address[] memory _BPTokensIn, uint256[] memory amounts)\\n        internal\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory sortedAddresses = fund.poolAddresses();\\n        uint256[] memory sortedAmounts = new uint256[](sortedAddresses.length);\\n\\n        for (uint256 i = 0; i < _BPTokensIn.length; i++) {\\n            bool found = false;\\n            for (uint256 j = 0; j < sortedAddresses.length; j++) {\\n                if (sortedAddresses[j] == _BPTokensIn[i]) {\\n                    sortedAmounts[j] += amounts[i];\\n                    found = true;\\n                    break;\\n                }\\n            }\\n            require(found, \\\"could not find valid pool\\\");\\n        }\\n\\n        return (sortedAddresses, sortedAmounts);\\n    }\\n}\\n\",\"keccak256\":\"0xbf0158e93654d65575ee5f9523376bea2c7bebd60b43f25f6509baf56c7113be\",\"license\":\"Unlicense\"},\"contracts/GyroPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./balancer/BPool.sol\\\";\\nimport \\\"./abdk/ABDKMath64x64.sol\\\";\\nimport \\\"./compound/UniswapAnchoredView.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./ExtendedMath.sol\\\";\\n\\n/**\\n * PriceOracle is the interface for asset price oracles\\n * Currently used with a proxy for the Compound oracle on testnet\\n */\\ninterface PriceOracle {\\n    function getPrice(string memory tokenSymbol) external view returns (uint256);\\n}\\n\\n/**\\n * GyroPriceOracle is the P-AMM implementation described here:\\n * https://docs.gyro.finance/learn/gyro-amms/p-amm\\n * The testnet implementation (GyroPriceOracleV1) simplifications are detailed here:\\n * https://docs.gyro.finance/testnet-alpha/gyroscope-amm\\n */\\ninterface GyroPriceOracle {\\n    function getAmountToMint(\\n        uint256 _dollarValueIn,\\n        uint256 _inflowHistory,\\n        uint256 _nav\\n    ) external view returns (uint256);\\n\\n    function getAmountToRedeem(\\n        uint256 _dollarValueOut,\\n        uint256 _outflowHistory,\\n        uint256 _nav\\n    ) external view returns (uint256 _gyroAmount);\\n\\n    function getBPTPrice(address _bPoolAddress, uint256[] memory _underlyingPrices)\\n        external\\n        view\\n        returns (uint256 _bptPrice);\\n}\\n\\ncontract GyroPriceOracleV1 is GyroPriceOracle {\\n    using ExtendedMath for int128;\\n    using ExtendedMath for uint256;\\n    using ABDKMath64x64 for uint256;\\n    using ABDKMath64x64 for int128;\\n    using SafeMath for uint256;\\n\\n    uint256 constant bpoolDecimals = 18;\\n\\n    /**\\n     * Calculates the offer price to mint a new Gyro Dollar in the P-AMM.\\n     * @param _dollarValueIn = dollar value of user-provided input assets\\n     * @param _inflowHistory = current state of Gyroscope inflow history\\n     * @param _nav = current reserve value per Gyro Dollar\\n     * Returns the amount of GYD that the protocol will offer to mint in return\\n     * for the input assets.\\n     */\\n    function getAmountToMint(\\n        uint256 _dollarValueIn,\\n        uint256 _inflowHistory,\\n        uint256 _nav\\n    ) external pure override returns (uint256 _gyroAmount) {\\n        uint256 _one = 1e18;\\n        if (_nav < _one) {\\n            _gyroAmount = _dollarValueIn;\\n        } else {\\n            // gyroAmount = dollarValueIn * (1 - eps_inflowHistory) or min of 0\\n            uint256 _eps = 1e11;\\n            uint256 _scaling = _eps.scaledMul(_inflowHistory);\\n            if (_scaling >= _one) {\\n                _gyroAmount = 0;\\n            } else {\\n                _gyroAmount = _dollarValueIn.scaledMul(_one.sub(_scaling));\\n            }\\n        }\\n        _gyroAmount = _dollarValueIn;\\n        return _gyroAmount;\\n    }\\n\\n    /**\\n     * Calculates the offer price to redeem a Gyro Dollar in the P-AMM.\\n     * @param _dollarValueOut = dollar-value of user-requested outputs, to redeem from reserve\\n     * @param _outflowHistory = current state of Gyroscope outflow history\\n     * @param _nav = current reserve value per Gyro Dollar\\n     * Returns the amount of GYD the protocol will ask to redeem to fulfill the requested asset outputs\\n     */\\n    function getAmountToRedeem(\\n        uint256 _dollarValueOut,\\n        uint256 _outflowHistory,\\n        uint256 _nav\\n    ) external pure override returns (uint256 _gyroAmount) {\\n        if (_nav < 1e18) {\\n            // gyroAmount = dollarValueOut * (1 + eps*outflowHistory)\\n            uint256 _eps = 1e11;\\n            uint256 _scaling = _eps.scaledMul(_outflowHistory).add(1e18);\\n            _gyroAmount = _dollarValueOut.scaledMul(_scaling);\\n        } else {\\n            _gyroAmount = _dollarValueOut;\\n        }\\n\\n        return _gyroAmount;\\n    }\\n\\n    /**\\n     * Calculates the value of Balancer pool tokens using the logic described here:\\n     * https://docs.gyro.finance/learn/oracles/bpt-oracle\\n     * This is robust to price manipulations within the Balancer pool.\\n     * @param _bPoolAddress = address of Balancer pool\\n     * @param _underlyingPrices = array of prices for underlying assets in the pool, in the same\\n     * order as _bPool.getFinalTokens() will return\\n     */\\n    function getBPTPrice(address _bPoolAddress, uint256[] memory _underlyingPrices)\\n        public\\n        view\\n        override\\n        returns (uint256 _bptPrice)\\n    {\\n        /* calculations:\\n            bptSupply = # of BPT tokens\\n            bPoolWeights = array of pool weights (require _underlyingPrices comes in same order)\\n            k = constant = product of reserves^weight\\n            bptPrice = (k * product of (p_i / w_i)^w_i ) / bptSupply\\n\\n            functions from ABDKMath64x64 library\\n            -- exp_2 = binary exponent\\n            -- log_2 = binary logarithm\\n            -- mul = calculate x*y\\n\\n            x^y = 2^(y log_2 x)\\n            exp_2( mul(y, log_2(x)) )\\n        */\\n        BPool _bPool = BPool(_bPoolAddress);\\n        uint256 _bptSupply = _bPool.totalSupply();\\n        address[] memory _tokens = _bPool.getFinalTokens();\\n\\n        uint256 _k = uint256(1e18); // check that these are the right to get value 1\\n        uint256 _weightedProd = uint256(1e18);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            uint256 _weight = _bPool.getNormalizedWeight(_tokens[i]);\\n            uint256 _price = _underlyingPrices[i];\\n            uint256 _tokenBalance = _bPool.getBalance(_tokens[i]);\\n            uint256 _decimals = ERC20(_tokens[i]).decimals();\\n\\n            if (_decimals < bpoolDecimals) {\\n                _tokenBalance = _tokenBalance.mul(10**(bpoolDecimals - _decimals));\\n                _price = _price.mul(10**(bpoolDecimals - _decimals));\\n            }\\n\\n            _k = _k.mulPow(_tokenBalance, _weight, bpoolDecimals);\\n\\n            _weightedProd = _weightedProd.mulPow(\\n                _price.scaledDiv(_weight, bpoolDecimals),\\n                _weight,\\n                bpoolDecimals\\n            );\\n        }\\n\\n        uint256 result = _k.scaledMul(_weightedProd).scaledDiv(_bptSupply);\\n        return result;\\n    }\\n}\\n\\n/**\\n * Proxy contract for Compound asset price oracle, used in testnet implementation\\n */\\ncontract CompoundPriceWrapper is PriceOracle {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant oraclePriceScale = 1000000;\\n    address public compoundOracle;\\n\\n    constructor(address _compoundOracle) {\\n        compoundOracle = _compoundOracle;\\n    }\\n\\n    function getPrice(string memory tokenSymbol) public view override returns (uint256) {\\n        bytes32 symbolHash = keccak256(bytes(tokenSymbol));\\n        // Compound oracle uses \\\"ETH\\\", so change \\\"WETH\\\" to \\\"ETH\\\"\\n        if (symbolHash == keccak256(bytes(\\\"WETH\\\"))) {\\n            tokenSymbol = \\\"ETH\\\";\\n        }\\n\\n        if (symbolHash == keccak256(bytes(\\\"sUSD\\\")) || symbolHash == keccak256(bytes(\\\"BUSD\\\"))) {\\n            tokenSymbol = \\\"DAI\\\";\\n        }\\n        UniswapAnchoredView oracle = UniswapAnchoredView(compoundOracle);\\n        uint256 unscaledPrice = oracle.price(tokenSymbol);\\n        TokenConfig memory tokenConfig = oracle.getTokenConfigBySymbol(tokenSymbol);\\n        return unscaledPrice.mul(tokenConfig.baseUnit).div(oraclePriceScale);\\n    }\\n}\\n\",\"keccak256\":\"0xb2af7a52b6e22a3b290a31a8cfa32cb41044ba4cc02293ea55e13f094ad4a876\",\"license\":\"Unlicense\"},\"contracts/GyroRouter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./GyroFund.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./abdk/ABDKMath64x64.sol\\\";\\n\\ninterface GyroRouter {\\n    function deposit(address[] memory _tokensIn, uint256[] memory _amountsIn)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function withdraw(address[] memory _tokensOut, uint256[] memory _amountsOut)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0x7146992bbbc45778beb90ababd052b0d8d775ca80046915762349a8592a1d76d\",\"license\":\"Unlicense\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function initializeOwner() external {\\n        require(_owner == address(0), \\\"owner already initialized\\\");\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8ce2fd266470f41ea749996d52c28d3486ed19766178a46e9991683b60129bb7\",\"license\":\"MIT\"},\"contracts/abdk/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128(x << 64);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        return int64(x >> 64);\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        require(\\n            x <= 0x7FFFFFFFFFFFFFFF,\\n            \\\"value is too high to be transformed in a 64.64-bit number\\\"\\n        );\\n        return int128(x << 64);\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number scaled with 10^decimals into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param decimal scale of the number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromScaled(uint256 x, uint256 decimal) internal pure returns (int128) {\\n        uint256 scale = 10**decimal;\\n        int128 wholeNumber = fromUInt(x / scale);\\n        int128 decimalNumber = div(fromUInt(x % scale), fromUInt(scale));\\n        return add(wholeNumber, decimalNumber);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        require(x >= 0);\\n        return uint64(x >> 64);\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        int256 result = x >> 64;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        return int256(x) << 64;\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) + y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = int256(x) - y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        int256 result = (int256(x) * y) >> 64;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        if (x == MIN_64x64) {\\n            require(\\n                y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n                    y <= 0x1000000000000000000000000000000000000000000000000\\n            );\\n            return -y << 63;\\n        } else {\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x;\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint256 absoluteResult = mulu(x, uint256(y));\\n            if (negativeResult) {\\n                require(\\n                    absoluteResult <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    absoluteResult <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(absoluteResult);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) return 0;\\n\\n        require(x >= 0);\\n\\n        uint256 lo = (uint256(x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n        uint256 hi = uint256(x) * (y >> 128);\\n\\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        hi <<= 64;\\n\\n        require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n        return hi + lo;\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        require(y != 0);\\n        int256 result = (int256(x) << 64) / y;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        require(y != 0);\\n\\n        bool negativeResult = false;\\n        if (x < 0) {\\n            x = -x; // We rely on overflow behavior here\\n            negativeResult = true;\\n        }\\n        if (y < 0) {\\n            y = -y; // We rely on overflow behavior here\\n            negativeResult = !negativeResult;\\n        }\\n        uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n        if (negativeResult) {\\n            require(absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128(absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128(absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        require(y != 0);\\n        uint128 result = divuu(x, y);\\n        require(result <= uint128(MAX_64x64));\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        require(x != MIN_64x64);\\n        return -x;\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        require(x != MIN_64x64);\\n        return x < 0 ? -x : x;\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        require(x != 0);\\n        int256 result = int256(0x100000000000000000000000000000000) / x;\\n        require(result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        return int128((int256(x) + int256(y)) >> 1);\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        int256 m = int256(x) * int256(y);\\n        require(m >= 0);\\n        require(m < 0x4000000000000000000000000000000000000000000000000000000000000000);\\n        return int128(sqrtu(uint256(m)));\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        uint256 absoluteResult;\\n        bool negativeResult = false;\\n        if (x >= 0) {\\n            absoluteResult = powu(uint256(x) << 63, y);\\n        } else {\\n            // We rely on overflow behavior here\\n            absoluteResult = powu(uint256(uint128(-x)) << 63, y);\\n            negativeResult = y & 1 > 0;\\n        }\\n\\n        absoluteResult >>= 63;\\n\\n        if (negativeResult) {\\n            require(absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128(absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128(absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        require(x >= 0);\\n        return int128(sqrtu(uint256(x) << 64));\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        require(x > 0);\\n\\n        int256 msb = 0;\\n        int256 xc = x;\\n        if (xc >= 0x10000000000000000) {\\n            xc >>= 64;\\n            msb += 64;\\n        }\\n        if (xc >= 0x100000000) {\\n            xc >>= 32;\\n            msb += 32;\\n        }\\n        if (xc >= 0x10000) {\\n            xc >>= 16;\\n            msb += 16;\\n        }\\n        if (xc >= 0x100) {\\n            xc >>= 8;\\n            msb += 8;\\n        }\\n        if (xc >= 0x10) {\\n            xc >>= 4;\\n            msb += 4;\\n        }\\n        if (xc >= 0x4) {\\n            xc >>= 2;\\n            msb += 2;\\n        }\\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n        int256 result = (msb - 64) << 64;\\n        uint256 ux = uint256(x) << uint256(127 - msb);\\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n            ux *= ux;\\n            uint256 b = ux >> 255;\\n            ux >>= 127 + b;\\n            result += bit * int256(b);\\n        }\\n\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        require(x > 0);\\n\\n        return int128((uint256(log_2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128);\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        require(x < 0x400000000000000000, \\\"exponent too large\\\"); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        uint256 result = 0x80000000000000000000000000000000;\\n\\n        if (x & 0x8000000000000000 > 0)\\n            result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n        if (x & 0x4000000000000000 > 0)\\n            result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n        if (x & 0x2000000000000000 > 0)\\n            result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n        if (x & 0x1000000000000000 > 0)\\n            result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n        if (x & 0x800000000000000 > 0)\\n            result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n        if (x & 0x400000000000000 > 0)\\n            result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n        if (x & 0x200000000000000 > 0)\\n            result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n        if (x & 0x100000000000000 > 0)\\n            result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n        if (x & 0x80000000000000 > 0)\\n            result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n        if (x & 0x40000000000000 > 0)\\n            result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n        if (x & 0x20000000000000 > 0)\\n            result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n        if (x & 0x10000000000000 > 0)\\n            result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n        if (x & 0x8000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n        if (x & 0x4000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n        if (x & 0x2000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n        if (x & 0x1000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n        if (x & 0x800000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n        if (x & 0x400000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n        if (x & 0x200000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n        if (x & 0x100000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n        if (x & 0x80000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n        if (x & 0x40000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n        if (x & 0x20000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n        if (x & 0x10000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n        if (x & 0x8000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n        if (x & 0x4000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n        if (x & 0x2000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n        if (x & 0x1000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n        if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n        if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n        if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n        if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n        if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n        if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n        if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n        if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n        if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n        if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n        if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n        if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n        if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n        if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n        if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n        if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n        if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n        if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n        if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n        if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n        if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n        if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n        if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n        if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n        if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n        if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n        if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n        if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n        if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n        if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n        if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n        if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n        if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n        if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n        if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n        if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n        result >>= uint256(63 - (x >> 64));\\n        require(result <= uint256(MAX_64x64));\\n\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        require(x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        return exp_2(int128((int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128));\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        require(y != 0);\\n\\n        uint256 result;\\n\\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;\\n        else {\\n            uint256 msb = 192;\\n            uint256 xc = x >> 192;\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 hi = result * (y >> 128);\\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 xh = x >> 192;\\n            uint256 xl = x << 64;\\n\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n            lo = hi << 128;\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n\\n            assert(xh == hi >> 128);\\n\\n            result += xl / y;\\n        }\\n\\n        require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return uint128(result);\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n     * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x unsigned 129.127-bit fixed point number\\n     * @param y uint256 value\\n     * @return unsigned 129.127-bit fixed point number\\n     */\\n    function powu(uint256 x, uint256 y) private pure returns (uint256) {\\n        if (y == 0) return 0x80000000000000000000000000000000;\\n        else if (x == 0) return 0;\\n        else {\\n            int256 msb = 0;\\n            uint256 xc = x;\\n            if (xc >= 0x100000000000000000000000000000000) {\\n                xc >>= 128;\\n                msb += 128;\\n            }\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 xe = msb - 127;\\n            if (xe > 0) x >>= uint256(xe);\\n            else x <<= uint256(-xe);\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n            int256 re = 0;\\n\\n            while (y > 0) {\\n                if (y & 1 > 0) {\\n                    result = result * x;\\n                    y -= 1;\\n                    re += xe;\\n                    if (\\n                        result >= 0x8000000000000000000000000000000000000000000000000000000000000000\\n                    ) {\\n                        result >>= 128;\\n                        re += 1;\\n                    } else result >>= 127;\\n                    if (re < -127) return 0; // Underflow\\n                    require(re < 128); // Overflow\\n                } else {\\n                    x = x * x;\\n                    y >>= 1;\\n                    xe <<= 1;\\n                    if (x >= 0x8000000000000000000000000000000000000000000000000000000000000000) {\\n                        x >>= 128;\\n                        xe += 1;\\n                    } else x >>= 127;\\n                    if (xe < -127) return 0; // Underflow\\n                    require(xe < 128); // Overflow\\n                }\\n            }\\n\\n            if (re > 0) result <<= uint256(re);\\n            else if (re < 0) result >>= uint256(-re);\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        if (x == 0) return 0;\\n        else {\\n            uint256 xx = x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) {\\n                xx >>= 128;\\n                r <<= 64;\\n            }\\n            if (xx >= 0x10000000000000000) {\\n                xx >>= 64;\\n                r <<= 32;\\n            }\\n            if (xx >= 0x100000000) {\\n                xx >>= 32;\\n                r <<= 16;\\n            }\\n            if (xx >= 0x10000) {\\n                xx >>= 16;\\n                r <<= 8;\\n            }\\n            if (xx >= 0x100) {\\n                xx >>= 8;\\n                r <<= 4;\\n            }\\n            if (xx >= 0x10) {\\n                xx >>= 4;\\n                r <<= 2;\\n            }\\n            if (xx >= 0x8) {\\n                r <<= 1;\\n            }\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1; // Seven iterations should be enough\\n            uint256 r1 = x / r;\\n            return uint128(r < r1 ? r : r1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe881dd705c66b4c400bd9face57305cafd279e085a02ed4fdbeceba79c4df1e4\",\"license\":\"BSD-4-Clause\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nabstract contract BColor {\\n    function getColor() external view virtual returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc977d6843f56b93de4e91e40d4ad5b5de31fbabcfc9a8db4a08f6a1046f84085\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0x0a8df6b935b1a1a008f55c2a9dc3e30d8a3438a203d901d3ae097dbce4421f19\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        // Charge the trading fee for the proportion of tokenAi\\n        // which is implicitly traded to the other pool tokens.\\n        // That proportion is (1- weightTokenIn)\\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee =\\n            bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee =\\n            bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee =\\n            bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut =\\n            bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0xbfc71c10fe96512921ba4c64f2304a453a5b7123fe8bf35bff95bebd5d3ce39c\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256, bool)\\n    {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x313eb1dcfe69101be7959570e6d4f4990866fd924ceccf8423871a22bf5e48e6\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        uint256 tokenAmountIn\\n    );\\n\\n    event LOG_EXIT(\\n        address indexed caller,\\n        address indexed tokenOut,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_CALL(\\n        bytes4 indexed sig,\\n        address indexed caller,\\n        bytes data\\n    ) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens()\\n        external\\n        view\\n        _viewlock_\\n        returns (address[] memory tokens)\\n    {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens()\\n        external\\n        view\\n        _viewlock_\\n        returns (address[] memory tokens)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256)\\n    {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight()\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256)\\n    {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256)\\n    {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256)\\n    {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_\\n    // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(\\n                token,\\n                msg.sender,\\n                bsub(tokenBalanceWithdrawn, tokenExitFee)\\n            );\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({\\n            bound: false,\\n            index: 0,\\n            denorm: 0,\\n            balance: 0\\n        });\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = BIERC20(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return\\n            calcSpotPrice(\\n                inRecord.balance,\\n                inRecord.denorm,\\n                outRecord.balance,\\n                outRecord.denorm,\\n                _swapFee\\n            );\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return\\n            calcSpotPrice(\\n                inRecord.balance,\\n                inRecord.denorm,\\n                outRecord.balance,\\n                outRecord.denorm,\\n                0\\n            );\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn)\\n        external\\n        _logs_\\n        _lock_\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        _logs_\\n        _lock_\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    )\\n        external\\n        _logs_\\n        _lock_\\n        returns (uint256 tokenAmountOut, uint256 spotPriceAfter)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(\\n            tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO),\\n            \\\"ERR_MAX_IN_RATIO\\\"\\n        );\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(\\n                inRecord.balance,\\n                inRecord.denorm,\\n                outRecord.balance,\\n                outRecord.denorm,\\n                _swapFee\\n            );\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(\\n            spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut),\\n            \\\"ERR_MATH_APPROX\\\"\\n        );\\n\\n        emit LOG_SWAP(\\n            msg.sender,\\n            tokenIn,\\n            tokenOut,\\n            tokenAmountIn,\\n            tokenAmountOut\\n        );\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    )\\n        external\\n        _logs_\\n        _lock_\\n        returns (uint256 tokenAmountIn, uint256 spotPriceAfter)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(\\n            tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO),\\n            \\\"ERR_MAX_OUT_RATIO\\\"\\n        );\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(\\n                inRecord.balance,\\n                inRecord.denorm,\\n                outRecord.balance,\\n                outRecord.denorm,\\n                _swapFee\\n            );\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(\\n            spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut),\\n            \\\"ERR_MATH_APPROX\\\"\\n        );\\n\\n        emit LOG_SWAP(\\n            msg.sender,\\n            tokenIn,\\n            tokenOut,\\n            tokenAmountIn,\\n            tokenAmountOut\\n        );\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(\\n            tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO),\\n            \\\"ERR_MAX_IN_RATIO\\\"\\n        );\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(\\n            tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO),\\n            \\\"ERR_MAX_IN_RATIO\\\"\\n        );\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(\\n            tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO),\\n            \\\"ERR_MAX_OUT_RATIO\\\"\\n        );\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(\\n            tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO),\\n            \\\"ERR_MAX_OUT_RATIO\\\"\\n        );\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = BIERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = BIERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x71fba88457cd926e3e5afdc073c1e9c3e3220471a0d5056d6ba63ec3fce11e5e\",\"license\":\"UNLICENSED\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BNum.sol\\\";\\n\\n// Highly opinionated token implementation\\n\\ninterface BIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, BIERC20 {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt)\\n        external\\n        returns (bool)\\n    {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt)\\n        external\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(\\n            msg.sender == src || amt <= _allowance[src][msg.sender],\\n            \\\"ERR_BTOKEN_BAD_CALLER\\\"\\n        );\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = bsub(\\n                _allowance[src][msg.sender],\\n                amt\\n            );\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xce31f6712f87e56b4a0b9293f3115c2039225a5b4ec20a389f6d8e3ebf4daf02\",\"license\":\"UNLICENSED\"},\"contracts/compound/UniswapAnchoredView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Ownable.sol\\\";\\n\\nenum PriceSource {\\n    FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n    FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n    REPORTER /// implies the price is set by the reporter\\n}\\n\\nstruct TokenConfig {\\n    address cToken;\\n    address underlying;\\n    bytes32 symbolHash;\\n    uint256 baseUnit;\\n    PriceSource priceSource;\\n    uint256 fixedPrice;\\n    address uniswapMarket;\\n    bool isUniswapReversed;\\n}\\n\\ninterface UniswapAnchoredView {\\n    function price(string calldata symbol) external view returns (uint256);\\n\\n    function getTokenConfigBySymbol(string memory symbol)\\n        external\\n        view\\n        returns (TokenConfig memory);\\n}\\n\\ncontract DummyUniswapAnchoredView is Ownable, UniswapAnchoredView {\\n    mapping(string => uint256) private prices;\\n    mapping(string => TokenConfig) private tokenConfigs;\\n    mapping(string => bool) public tokenRegistered;\\n\\n    function addToken(string memory symbol, TokenConfig memory config) public onlyOwner {\\n        tokenRegistered[symbol] = true;\\n        tokenConfigs[symbol] = config;\\n    }\\n\\n    function setPrice(string memory symbol, uint256 _price) public onlyOwner {\\n        require(tokenRegistered[symbol], \\\"symbol not registered\\\");\\n        prices[symbol] = _price;\\n    }\\n\\n    function price(string calldata symbol) external view override returns (uint256) {\\n        return prices[symbol];\\n    }\\n\\n    function getTokenConfigBySymbol(string memory symbol)\\n        external\\n        view\\n        override\\n        returns (TokenConfig memory)\\n    {\\n        return tokenConfigs[symbol];\\n    }\\n}\\n\",\"keccak256\":\"0x317bedbbaeb93083a5beaabadf56a35be96d8e72153840c0d13d8af5c7e3e446\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516131aa3803806131aa8339818101604052604081101561003357600080fd5b508051602090910151600180546001600160a01b039384166001600160a01b031991821617909155600280549390921692169190911790556131308061007a6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a25780638da5cb5b116100715780638da5cb5b1461085b578063b60d428814610863578063c18a98721461086b578063d3c7c2c71461098e578063f2fde38b146109965761010b565b8063715018a6146107b157806380c92251146107b957806385dc3004146107dd5780638b450aba146108035761010b565b806354347cef116100de57806354347cef146104b75780635f53837f146105dc578063639431e8146105e457806363ebe07e1461068c5761010b565b80630a5bf41814610110578063372a47b61461024757806341cb87fc1461036a5780634435abc114610392575b600080fd5b6102356004803603606081101561012657600080fd5b810190602081018135600160201b81111561014057600080fd5b82018360208201111561015257600080fd5b803590602001918460208302840111600160201b8311171561017357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101c257600080fd5b8201836020820111156101d457600080fd5b803590602001918460208302840111600160201b831117156101f557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506109bc915050565b60408051918252519081900360200190f35b6102356004803603604081101561025d57600080fd5b810190602081018135600160201b81111561027757600080fd5b82018360208201111561028957600080fd5b803590602001918460208302840111600160201b831117156102aa57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102f957600080fd5b82018360208201111561030b57600080fd5b803590602001918460208302840111600160201b8311171561032c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611538945050505050565b6103906004803603602081101561038057600080fd5b50356001600160a01b0316611885565b005b610235600480360360608110156103a857600080fd5b810190602081018135600160201b8111156103c257600080fd5b8201836020820111156103d457600080fd5b803590602001918460208302840111600160201b831117156103f557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561044457600080fd5b82018360208201111561045657600080fd5b803590602001918460208302840111600160201b8311171561047757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506118f4915050565b610235600480360360608110156104cd57600080fd5b810190602081018135600160201b8111156104e757600080fd5b8201836020820111156104f957600080fd5b803590602001918460208302840111600160201b8311171561051a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561056957600080fd5b82018360208201111561057b57600080fd5b803590602001918460208302840111600160201b8311171561059c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250611c3d915050565b610390611ee6565b6105ec611f58565b604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561063657818101518382015260200161061e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561067557818101518382015260200161065d565b505050509050019550505050505060405180910390f35b610235600480360360608110156106a257600080fd5b810190602081018135600160201b8111156106bc57600080fd5b8201836020820111156106ce57600080fd5b803590602001918460208302840111600160201b831117156106ef57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561073e57600080fd5b82018360208201111561075057600080fd5b803590602001918460208302840111600160201b8311171561077157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061210a915050565b6103906127f7565b6107c161288e565b604080516001600160a01b039092168252519081900360200190f35b610390600480360360208110156107f357600080fd5b50356001600160a01b031661289d565b61080b61290c565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561084757818101518382015260200161082f565b505050509050019250505060405180910390f35b6107c1612a1d565b6107c1612a2c565b6102356004803603604081101561088157600080fd5b810190602081018135600160201b81111561089b57600080fd5b8201836020820111156108ad57600080fd5b803590602001918460208302840111600160201b831117156108ce57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561091d57600080fd5b82018360208201111561092f57600080fd5b803590602001918460208302840111600160201b8311171561095057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612a3b945050505050565b61080b612ce6565b610390600480360360208110156109ac57600080fd5b50356001600160a01b0316612d2b565b6002546040805163c66ca5fb60e01b815260048101918252855160448201528551600093849384936001600160a01b039092169263c66ca5fb928a928a9290918291602482019160640190602080880191028083838d5b83811015610a2b578181015183820152602001610a13565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610a6a578181015183820152602001610a52565b5050505090500194505050505060006040518083038186803b158015610a8f57600080fd5b505afa158015610aa3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015610acc57600080fd5b8101908080516040519392919084600160201b821115610aeb57600080fd5b908301906020820185811115610b0057600080fd5b82518660208202830111600160201b82111715610b1c57600080fd5b82525081516020918201928201910280838360005b83811015610b49578181015183820152602001610b31565b5050505090500160405260200180516040519392919084600160201b821115610b7157600080fd5b908301906020820185811115610b8657600080fd5b82518660208202830111600160201b82111715610ba257600080fd5b82525081516020918201928201910280838360005b83811015610bcf578181015183820152602001610bb7565b5050505090500160405250505091509150600080610bed8484612e18565b91509150600080600160009054906101000a90046001600160a01b03166001600160a01b03166367691bf385858b6040518463ffffffff1660e01b8152600401808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015610c74578181015183820152602001610c5c565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015610cb3578181015183820152602001610c9b565b5050505090500195505050505050604080518083038186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d6040811015610d0257600080fd5b50805160209091015160015460408051633b19d5b760e21b81526004810185905290519395509193508415926001600160a01b039091169163ec6756dc916024808301926000929190829003018186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d9c57600080fd5b8101908080516040519392919084600160201b821115610dbb57600080fd5b908301906020820185811115610dd057600080fd5b8251600160201b811182820188101715610de957600080fd5b82525081516020918201929091019080838360005b83811015610e16578181015183820152602001610dfe565b50505050905090810190601f168015610e435780820380516001836020036101000a031916815260200191505b5060405250505090610ed35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e98578181015183820152602001610e80565b50505050905090810190601f168015610ec55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5087811115610f1d576040805162461bcd60e51b8152602060048201526011602482015270746f6f206d75636820736c69707061676560781b604482015290519081900360640190fd5b600154604080516323b872dd60e01b81523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015610f7757600080fd5b505af1158015610f8b573d6000803e3d6000fd5b505050506040513d6020811015610fa157600080fd5b5051610ff4576040805162461bcd60e51b815260206004820152601a60248201527f6661696c656420746f2073656e64206779726f20746f206c6962000000000000604482015290519081900360640190fd5b60015460405163af1a153160e01b8152604481018a90526060600482019081528651606483015286516000936001600160a01b03169263af1a153192899289928f929182916024810191608490910190602080890191028083838e5b83811015611068578181015183820152602001611050565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156110a757818101518382015260200161108f565b5050505090500195505050505050602060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506040513d60208110156110f957600080fd5b5051905060005b85518110156112205785818151811061111557fe5b60200260200101516001600160a01b031663095ea7b3600260009054906101000a90046001600160a01b031687848151811061114d57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050506040513d60208110156111c557600080fd5b5051611218576040805162461bcd60e51b815260206004820152601a60248201527f6661696c656420746f20617070726f7665204250546f6b656e73000000000000604482015290519081900360640190fd5b600101611100565b5060025460408051636f36b6cb60e11b8152600481019182528d5160448201528d516001600160a01b039093169263de6d6d96928f928f92829160248101916064909101906020808801910280838360005b8381101561128a578181015183820152602001611272565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156112c95781810151838201526020016112b1565b50505050905001945050505050600060405180830381600087803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561132d57600080fd5b8101908080516040519392919084600160201b82111561134c57600080fd5b90830190602082018581111561136157600080fd5b82518660208202830111600160201b8211171561137d57600080fd5b82525081516020918201928201910280838360005b838110156113aa578181015183820152602001611392565b5050505090500160405260200180516040519392919084600160201b8211156113d257600080fd5b9083019060208201858111156113e757600080fd5b82518660208202830111600160201b8211171561140357600080fd5b82525081516020918201928201910280838360005b83811015611430578181015183820152602001611418565b50505050905001604052505050505060005b8b518110156114fc578b818151811061145757fe5b60200260200101516001600160a01b031663a9059cbb338d848151811061147a57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156114c857600080fd5b505af11580156114dc573d6000803e3d6000fd5b505050506040513d60208110156114f257600080fd5b5050600101611442565b50604051819033907f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a690600090a39a9950505050505050505050565b6002546040805163c66ca5fb60e01b815260048101918252845160448201528451600093849384936001600160a01b039092169263c66ca5fb928992899290918291602482019160640190602080880191028083838d5b838110156115a757818101518382015260200161158f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156115e65781810151838201526020016115ce565b5050505090500194505050505060006040518083038186803b15801561160b57600080fd5b505afa15801561161f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561164857600080fd5b8101908080516040519392919084600160201b82111561166757600080fd5b90830190602082018581111561167c57600080fd5b82518660208202830111600160201b8211171561169857600080fd5b82525081516020918201928201910280838360005b838110156116c55781810151838201526020016116ad565b5050505090500160405260200180516040519392919084600160201b8211156116ed57600080fd5b90830190602082018581111561170257600080fd5b82518660208202830111600160201b8211171561171e57600080fd5b82525081516020918201928201910280838360005b8381101561174b578181015183820152602001611733565b50505050905001604052505050915091506000806117698484612e18565b6001546040516367691bf360e01b8152600a604482018190526060600483019081528551606484015285519597509395506000946001600160a01b03909316936367691bf39388938893929182916024810191608490910190602080890191028083838e5b838110156117e65781810151838201526020016117ce565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561182557818101518382015260200161180d565b5050505090500195505050505050604080518083038186803b15801561184a57600080fd5b505afa15801561185e573d6000803e3d6000fd5b505050506040513d604081101561187457600080fd5b506020015198975050505050505050565b6000546001600160a01b031633146118d2576040805162461bcd60e51b815260206004820181905260248201526000805160206130a6833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60025460408051634fb4dc1f60e11b815260048101918252855160448201528551600093849384936001600160a01b0390921692639f69b83e928a928a9290918291602482019160640190602080880191028083838d5b8381101561196357818101518382015260200161194b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156119a257818101518382015260200161198a565b5050505090500194505050505060006040518083038186803b1580156119c757600080fd5b505afa1580156119db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015611a0457600080fd5b8101908080516040519392919084600160201b821115611a2357600080fd5b908301906020820185811115611a3857600080fd5b82518660208202830111600160201b82111715611a5457600080fd5b82525081516020918201928201910280838360005b83811015611a81578181015183820152602001611a69565b5050505090500160405260200180516040519392919084600160201b821115611aa957600080fd5b908301906020820185811115611abe57600080fd5b82518660208202830111600160201b82111715611ada57600080fd5b82525081516020918201928201910280838360005b83811015611b07578181015183820152602001611aef565b5050505090500160405250505091509150600080611b258484612e18565b60015460405163a3767d0f60e01b8152604481018a90526060600482019081528451606483015284519496509294506000936001600160a01b039092169263a3767d0f92879287928d9290918291602482019160840190602080890191028083838e5b83811015611ba0578181015183820152602001611b88565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015611bdf578181015183820152602001611bc7565b5050505090500195505050505050604080518083038186803b158015611c0457600080fd5b505afa158015611c18573d6000803e3d6000fd5b505050506040513d6040811015611c2e57600080fd5b50519998505050505050505050565b60025460408051634fb4dc1f60e11b815260048101918252855160448201528551600093849384936001600160a01b0390921692639f69b83e928a928a9290918291602482019160640190602080880191028083838d5b83811015611cac578181015183820152602001611c94565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611ceb578181015183820152602001611cd3565b5050505090500194505050505060006040518083038186803b158015611d1057600080fd5b505afa158015611d24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015611d4d57600080fd5b8101908080516040519392919084600160201b821115611d6c57600080fd5b908301906020820185811115611d8157600080fd5b82518660208202830111600160201b82111715611d9d57600080fd5b82525081516020918201928201910280838360005b83811015611dca578181015183820152602001611db2565b5050505090500160405260200180516040519392919084600160201b821115611df257600080fd5b908301906020820185811115611e0757600080fd5b82518660208202830111600160201b82111715611e2357600080fd5b82525081516020918201928201910280838360005b83811015611e50578181015183820152602001611e38565b5050505090500160405250505091509150600080611e6e8484612e18565b6001546040516367691bf360e01b8152604481018a90526060600482019081528451606483015284519496509294506000936001600160a01b03909216926367691bf392879287928d9290918291602482019160840190602080890191028083838e8315611ba0578181015183820152602001611b88565b6000546001600160a01b031615611f44576040805162461bcd60e51b815260206004820152601960248201527f6f776e657220616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600080546001600160a01b03191633179055565b6000606080600160009054906101000a90046001600160a01b03166001600160a01b031663639431e86040518163ffffffff1660e01b815260040160006040518083038186803b158015611fab57600080fd5b505afa158015611fbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526060811015611fe857600080fd5b815160208301805160405192949293830192919084600160201b82111561200e57600080fd5b90830190602082018581111561202357600080fd5b82518660208202830111600160201b8211171561203f57600080fd5b82525081516020918201928201910280838360005b8381101561206c578181015183820152602001612054565b5050505090500160405260200180516040519392919084600160201b82111561209457600080fd5b9083019060208201858111156120a957600080fd5b82518660208202830111600160201b821117156120c557600080fd5b82525081516020918201928201910280838360005b838110156120f25781810151838201526020016120da565b50505050905001604052505050925092509250909192565b6000805b84518110156122d857600085828151811061212557fe5b60200260200101516001600160a01b03166323b872dd333088868151811061214957fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156121a757600080fd5b505af11580156121bb573d6000803e3d6000fd5b505050506040513d60208110156121d157600080fd5b50519050806122115760405162461bcd60e51b81526004018080602001828103825260358152602001806130c66035913960400191505060405180910390fd5b85828151811061221d57fe5b60200260200101516001600160a01b031663095ea7b3600260009054906101000a90046001600160a01b031687858151811061225557fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156122a357600080fd5b505af11580156122b7573d6000803e3d6000fd5b505050506040513d60208110156122cd57600080fd5b50505060010161210e565b506002546040805163efc908a160e01b81526004810191825286516044820152865160009384936001600160a01b039091169263efc908a1928a928a92909182916024810191606490910190602080880191028083838d5b83811015612348578181015183820152602001612330565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561238757818101518382015260200161236f565b50505050905001945050505050600060405180830381600087803b1580156123ae57600080fd5b505af11580156123c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156123eb57600080fd5b8101908080516040519392919084600160201b82111561240a57600080fd5b90830190602082018581111561241f57600080fd5b82518660208202830111600160201b8211171561243b57600080fd5b82525081516020918201928201910280838360005b83811015612468578181015183820152602001612450565b5050505090500160405260200180516040519392919084600160201b82111561249057600080fd5b9083019060208201858111156124a557600080fd5b82518660208202830111600160201b821117156124c157600080fd5b82525081516020918201928201910280838360005b838110156124ee5781810151838201526020016124d6565b505050509050016040525050509150915060008061250c8484612e18565b9150915060005b82518110156125e25782818151811061252857fe5b60200260200101516001600160a01b031663095ea7b3600160009054906101000a90046001600160a01b031684848151811061256057fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156125ae57600080fd5b505af11580156125c2573d6000803e3d6000fd5b505050506040513d60208110156125d857600080fd5b5050600101612513565b50600154604051635e2a002360e01b8152604481018890526060600482019081528451606483015284516000936001600160a01b031692635e2a002392879287928d929182916024810191608490910190602080890191028083838e5b8381101561265757818101518382015260200161263f565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561269657818101518382015260200161267e565b5050505090500195505050505050602060405180830381600087803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b505050506040513d60208110156126e857600080fd5b50516001546040805163a9059cbb60e01b81523360048201526024810184905290519293506001600160a01b039091169163a9059cbb916044808201926020929091908290030181600087803b15801561274157600080fd5b505af1158015612755573d6000803e3d6000fd5b505050506040513d602081101561276b57600080fd5b50516127be576040805162461bcd60e51b815260206004820152601860248201527f6661696c656420746f2073656e64206261636b206779726f0000000000000000604482015290519081900360640190fd5b604051819033907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a398975050505050505050565b6000546001600160a01b03163314612844576040805162461bcd60e51b815260206004820181905260248201526000805160206130a6833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b6000546001600160a01b031633146128ea576040805162461bcd60e51b815260206004820181905260248201526000805160206130a6833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051638f7873ed60e01b815290516060926001600160a01b031691638f7873ed916004808301926000929190829003018186803b15801561295157600080fd5b505afa158015612965573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561298e57600080fd5b8101908080516040519392919084600160201b8211156129ad57600080fd5b9083019060208201858111156129c257600080fd5b82518660208202830111600160201b821117156129de57600080fd5b82525081516020918201928201910280838360005b83811015612a0b5781810151838201526020016129f3565b50505050905001604052505050905090565b6000546001600160a01b031690565b6001546001600160a01b031681565b60025460408051634fb4dc1f60e11b815260048101918252845160448201528451600093849384936001600160a01b0390921692639f69b83e928992899290918291602482019160640190602080880191028083838d5b83811015612aaa578181015183820152602001612a92565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015612ae9578181015183820152602001612ad1565b5050505090500194505050505060006040518083038186803b158015612b0e57600080fd5b505afa158015612b22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612b4b57600080fd5b8101908080516040519392919084600160201b821115612b6a57600080fd5b908301906020820185811115612b7f57600080fd5b82518660208202830111600160201b82111715612b9b57600080fd5b82525081516020918201928201910280838360005b83811015612bc8578181015183820152602001612bb0565b5050505090500160405260200180516040519392919084600160201b821115612bf057600080fd5b908301906020820185811115612c0557600080fd5b82518660208202830111600160201b82111715612c2157600080fd5b82525081516020918201928201910280838360005b83811015612c4e578181015183820152602001612c36565b5050505090500160405250505091509150600080612c6c8484612e18565b60015460405163a3767d0f60e01b8152600a604482018190526060600483019081528551606484015285519597509395506000946001600160a01b039093169363a3767d0f9388938893929182916024810191608490910190602080890191028083838e83156117e65781810151838201526020016117ce565b60015460408051634f5548bb60e01b815290516060926001600160a01b031691634f5548bb916004808301926000929190829003018186803b15801561295157600080fd5b6000546001600160a01b03163314612d78576040805162461bcd60e51b815260206004820181905260248201526000805160206130a6833981519152604482015290519081900360640190fd5b6001600160a01b038116612dbd5760405162461bcd60e51b81526004018080602001828103825260268152602001806130806026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060806000600160009054906101000a90046001600160a01b03166001600160a01b0316638f7873ed6040518163ffffffff1660e01b815260040160006040518083038186803b158015612e6b57600080fd5b505afa158015612e7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612ea857600080fd5b8101908080516040519392919084600160201b821115612ec757600080fd5b908301906020820185811115612edc57600080fd5b82518660208202830111600160201b82111715612ef857600080fd5b82525081516020918201928201910280838360005b83811015612f25578181015183820152602001612f0d565b5050505090500160405250505090506000815167ffffffffffffffff81118015612f4e57600080fd5b50604051908082528060200260200182016040528015612f78578160200160208202803683370190505b50905060005b8651811015613073576000805b845181101561301757888381518110612fa057fe5b60200260200101516001600160a01b0316858281518110612fbd57fe5b60200260200101516001600160a01b0316141561300f57878381518110612fe057fe5b6020026020010151848281518110612ff457fe5b60200260200101818151019150818152505060019150613017565b600101612f8b565b508061306a576040805162461bcd60e51b815260206004820152601960248201527f636f756c64206e6f742066696e642076616c696420706f6f6c00000000000000604482015290519081900360640190fd5b50600101612f7e565b5090959094509250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726661696c656420746f207472616e7366657220746f6b656e732066726f6d204779726f46756e6420746f204772796f526f75746572a2646970667358221220c232213be59fd4e87e6407755c4cf6a38f1912d6eae96ab3532e216e8c7bea6b64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a25780638da5cb5b116100715780638da5cb5b1461085b578063b60d428814610863578063c18a98721461086b578063d3c7c2c71461098e578063f2fde38b146109965761010b565b8063715018a6146107b157806380c92251146107b957806385dc3004146107dd5780638b450aba146108035761010b565b806354347cef116100de57806354347cef146104b75780635f53837f146105dc578063639431e8146105e457806363ebe07e1461068c5761010b565b80630a5bf41814610110578063372a47b61461024757806341cb87fc1461036a5780634435abc114610392575b600080fd5b6102356004803603606081101561012657600080fd5b810190602081018135600160201b81111561014057600080fd5b82018360208201111561015257600080fd5b803590602001918460208302840111600160201b8311171561017357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101c257600080fd5b8201836020820111156101d457600080fd5b803590602001918460208302840111600160201b831117156101f557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506109bc915050565b60408051918252519081900360200190f35b6102356004803603604081101561025d57600080fd5b810190602081018135600160201b81111561027757600080fd5b82018360208201111561028957600080fd5b803590602001918460208302840111600160201b831117156102aa57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102f957600080fd5b82018360208201111561030b57600080fd5b803590602001918460208302840111600160201b8311171561032c57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611538945050505050565b6103906004803603602081101561038057600080fd5b50356001600160a01b0316611885565b005b610235600480360360608110156103a857600080fd5b810190602081018135600160201b8111156103c257600080fd5b8201836020820111156103d457600080fd5b803590602001918460208302840111600160201b831117156103f557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561044457600080fd5b82018360208201111561045657600080fd5b803590602001918460208302840111600160201b8311171561047757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506118f4915050565b610235600480360360608110156104cd57600080fd5b810190602081018135600160201b8111156104e757600080fd5b8201836020820111156104f957600080fd5b803590602001918460208302840111600160201b8311171561051a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561056957600080fd5b82018360208201111561057b57600080fd5b803590602001918460208302840111600160201b8311171561059c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250611c3d915050565b610390611ee6565b6105ec611f58565b604051808481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561063657818101518382015260200161061e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561067557818101518382015260200161065d565b505050509050019550505050505060405180910390f35b610235600480360360608110156106a257600080fd5b810190602081018135600160201b8111156106bc57600080fd5b8201836020820111156106ce57600080fd5b803590602001918460208302840111600160201b831117156106ef57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561073e57600080fd5b82018360208201111561075057600080fd5b803590602001918460208302840111600160201b8311171561077157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061210a915050565b6103906127f7565b6107c161288e565b604080516001600160a01b039092168252519081900360200190f35b610390600480360360208110156107f357600080fd5b50356001600160a01b031661289d565b61080b61290c565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561084757818101518382015260200161082f565b505050509050019250505060405180910390f35b6107c1612a1d565b6107c1612a2c565b6102356004803603604081101561088157600080fd5b810190602081018135600160201b81111561089b57600080fd5b8201836020820111156108ad57600080fd5b803590602001918460208302840111600160201b831117156108ce57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561091d57600080fd5b82018360208201111561092f57600080fd5b803590602001918460208302840111600160201b8311171561095057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612a3b945050505050565b61080b612ce6565b610390600480360360208110156109ac57600080fd5b50356001600160a01b0316612d2b565b6002546040805163c66ca5fb60e01b815260048101918252855160448201528551600093849384936001600160a01b039092169263c66ca5fb928a928a9290918291602482019160640190602080880191028083838d5b83811015610a2b578181015183820152602001610a13565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610a6a578181015183820152602001610a52565b5050505090500194505050505060006040518083038186803b158015610a8f57600080fd5b505afa158015610aa3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015610acc57600080fd5b8101908080516040519392919084600160201b821115610aeb57600080fd5b908301906020820185811115610b0057600080fd5b82518660208202830111600160201b82111715610b1c57600080fd5b82525081516020918201928201910280838360005b83811015610b49578181015183820152602001610b31565b5050505090500160405260200180516040519392919084600160201b821115610b7157600080fd5b908301906020820185811115610b8657600080fd5b82518660208202830111600160201b82111715610ba257600080fd5b82525081516020918201928201910280838360005b83811015610bcf578181015183820152602001610bb7565b5050505090500160405250505091509150600080610bed8484612e18565b91509150600080600160009054906101000a90046001600160a01b03166001600160a01b03166367691bf385858b6040518463ffffffff1660e01b8152600401808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015610c74578181015183820152602001610c5c565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015610cb3578181015183820152602001610c9b565b5050505090500195505050505050604080518083038186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d6040811015610d0257600080fd5b50805160209091015160015460408051633b19d5b760e21b81526004810185905290519395509193508415926001600160a01b039091169163ec6756dc916024808301926000929190829003018186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d9c57600080fd5b8101908080516040519392919084600160201b821115610dbb57600080fd5b908301906020820185811115610dd057600080fd5b8251600160201b811182820188101715610de957600080fd5b82525081516020918201929091019080838360005b83811015610e16578181015183820152602001610dfe565b50505050905090810190601f168015610e435780820380516001836020036101000a031916815260200191505b5060405250505090610ed35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e98578181015183820152602001610e80565b50505050905090810190601f168015610ec55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5087811115610f1d576040805162461bcd60e51b8152602060048201526011602482015270746f6f206d75636820736c69707061676560781b604482015290519081900360640190fd5b600154604080516323b872dd60e01b81523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015610f7757600080fd5b505af1158015610f8b573d6000803e3d6000fd5b505050506040513d6020811015610fa157600080fd5b5051610ff4576040805162461bcd60e51b815260206004820152601a60248201527f6661696c656420746f2073656e64206779726f20746f206c6962000000000000604482015290519081900360640190fd5b60015460405163af1a153160e01b8152604481018a90526060600482019081528651606483015286516000936001600160a01b03169263af1a153192899289928f929182916024810191608490910190602080890191028083838e5b83811015611068578181015183820152602001611050565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156110a757818101518382015260200161108f565b5050505090500195505050505050602060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506040513d60208110156110f957600080fd5b5051905060005b85518110156112205785818151811061111557fe5b60200260200101516001600160a01b031663095ea7b3600260009054906101000a90046001600160a01b031687848151811061114d57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050506040513d60208110156111c557600080fd5b5051611218576040805162461bcd60e51b815260206004820152601a60248201527f6661696c656420746f20617070726f7665204250546f6b656e73000000000000604482015290519081900360640190fd5b600101611100565b5060025460408051636f36b6cb60e11b8152600481019182528d5160448201528d516001600160a01b039093169263de6d6d96928f928f92829160248101916064909101906020808801910280838360005b8381101561128a578181015183820152602001611272565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156112c95781810151838201526020016112b1565b50505050905001945050505050600060405180830381600087803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561132d57600080fd5b8101908080516040519392919084600160201b82111561134c57600080fd5b90830190602082018581111561136157600080fd5b82518660208202830111600160201b8211171561137d57600080fd5b82525081516020918201928201910280838360005b838110156113aa578181015183820152602001611392565b5050505090500160405260200180516040519392919084600160201b8211156113d257600080fd5b9083019060208201858111156113e757600080fd5b82518660208202830111600160201b8211171561140357600080fd5b82525081516020918201928201910280838360005b83811015611430578181015183820152602001611418565b50505050905001604052505050505060005b8b518110156114fc578b818151811061145757fe5b60200260200101516001600160a01b031663a9059cbb338d848151811061147a57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156114c857600080fd5b505af11580156114dc573d6000803e3d6000fd5b505050506040513d60208110156114f257600080fd5b5050600101611442565b50604051819033907f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a690600090a39a9950505050505050505050565b6002546040805163c66ca5fb60e01b815260048101918252845160448201528451600093849384936001600160a01b039092169263c66ca5fb928992899290918291602482019160640190602080880191028083838d5b838110156115a757818101518382015260200161158f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156115e65781810151838201526020016115ce565b5050505090500194505050505060006040518083038186803b15801561160b57600080fd5b505afa15801561161f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561164857600080fd5b8101908080516040519392919084600160201b82111561166757600080fd5b90830190602082018581111561167c57600080fd5b82518660208202830111600160201b8211171561169857600080fd5b82525081516020918201928201910280838360005b838110156116c55781810151838201526020016116ad565b5050505090500160405260200180516040519392919084600160201b8211156116ed57600080fd5b90830190602082018581111561170257600080fd5b82518660208202830111600160201b8211171561171e57600080fd5b82525081516020918201928201910280838360005b8381101561174b578181015183820152602001611733565b50505050905001604052505050915091506000806117698484612e18565b6001546040516367691bf360e01b8152600a604482018190526060600483019081528551606484015285519597509395506000946001600160a01b03909316936367691bf39388938893929182916024810191608490910190602080890191028083838e5b838110156117e65781810151838201526020016117ce565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561182557818101518382015260200161180d565b5050505090500195505050505050604080518083038186803b15801561184a57600080fd5b505afa15801561185e573d6000803e3d6000fd5b505050506040513d604081101561187457600080fd5b506020015198975050505050505050565b6000546001600160a01b031633146118d2576040805162461bcd60e51b815260206004820181905260248201526000805160206130a6833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60025460408051634fb4dc1f60e11b815260048101918252855160448201528551600093849384936001600160a01b0390921692639f69b83e928a928a9290918291602482019160640190602080880191028083838d5b8381101561196357818101518382015260200161194b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156119a257818101518382015260200161198a565b5050505090500194505050505060006040518083038186803b1580156119c757600080fd5b505afa1580156119db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015611a0457600080fd5b8101908080516040519392919084600160201b821115611a2357600080fd5b908301906020820185811115611a3857600080fd5b82518660208202830111600160201b82111715611a5457600080fd5b82525081516020918201928201910280838360005b83811015611a81578181015183820152602001611a69565b5050505090500160405260200180516040519392919084600160201b821115611aa957600080fd5b908301906020820185811115611abe57600080fd5b82518660208202830111600160201b82111715611ada57600080fd5b82525081516020918201928201910280838360005b83811015611b07578181015183820152602001611aef565b5050505090500160405250505091509150600080611b258484612e18565b60015460405163a3767d0f60e01b8152604481018a90526060600482019081528451606483015284519496509294506000936001600160a01b039092169263a3767d0f92879287928d9290918291602482019160840190602080890191028083838e5b83811015611ba0578181015183820152602001611b88565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015611bdf578181015183820152602001611bc7565b5050505090500195505050505050604080518083038186803b158015611c0457600080fd5b505afa158015611c18573d6000803e3d6000fd5b505050506040513d6040811015611c2e57600080fd5b50519998505050505050505050565b60025460408051634fb4dc1f60e11b815260048101918252855160448201528551600093849384936001600160a01b0390921692639f69b83e928a928a9290918291602482019160640190602080880191028083838d5b83811015611cac578181015183820152602001611c94565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611ceb578181015183820152602001611cd3565b5050505090500194505050505060006040518083038186803b158015611d1057600080fd5b505afa158015611d24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015611d4d57600080fd5b8101908080516040519392919084600160201b821115611d6c57600080fd5b908301906020820185811115611d8157600080fd5b82518660208202830111600160201b82111715611d9d57600080fd5b82525081516020918201928201910280838360005b83811015611dca578181015183820152602001611db2565b5050505090500160405260200180516040519392919084600160201b821115611df257600080fd5b908301906020820185811115611e0757600080fd5b82518660208202830111600160201b82111715611e2357600080fd5b82525081516020918201928201910280838360005b83811015611e50578181015183820152602001611e38565b5050505090500160405250505091509150600080611e6e8484612e18565b6001546040516367691bf360e01b8152604481018a90526060600482019081528451606483015284519496509294506000936001600160a01b03909216926367691bf392879287928d9290918291602482019160840190602080890191028083838e8315611ba0578181015183820152602001611b88565b6000546001600160a01b031615611f44576040805162461bcd60e51b815260206004820152601960248201527f6f776e657220616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600080546001600160a01b03191633179055565b6000606080600160009054906101000a90046001600160a01b03166001600160a01b031663639431e86040518163ffffffff1660e01b815260040160006040518083038186803b158015611fab57600080fd5b505afa158015611fbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526060811015611fe857600080fd5b815160208301805160405192949293830192919084600160201b82111561200e57600080fd5b90830190602082018581111561202357600080fd5b82518660208202830111600160201b8211171561203f57600080fd5b82525081516020918201928201910280838360005b8381101561206c578181015183820152602001612054565b5050505090500160405260200180516040519392919084600160201b82111561209457600080fd5b9083019060208201858111156120a957600080fd5b82518660208202830111600160201b821117156120c557600080fd5b82525081516020918201928201910280838360005b838110156120f25781810151838201526020016120da565b50505050905001604052505050925092509250909192565b6000805b84518110156122d857600085828151811061212557fe5b60200260200101516001600160a01b03166323b872dd333088868151811061214957fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156121a757600080fd5b505af11580156121bb573d6000803e3d6000fd5b505050506040513d60208110156121d157600080fd5b50519050806122115760405162461bcd60e51b81526004018080602001828103825260358152602001806130c66035913960400191505060405180910390fd5b85828151811061221d57fe5b60200260200101516001600160a01b031663095ea7b3600260009054906101000a90046001600160a01b031687858151811061225557fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156122a357600080fd5b505af11580156122b7573d6000803e3d6000fd5b505050506040513d60208110156122cd57600080fd5b50505060010161210e565b506002546040805163efc908a160e01b81526004810191825286516044820152865160009384936001600160a01b039091169263efc908a1928a928a92909182916024810191606490910190602080880191028083838d5b83811015612348578181015183820152602001612330565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561238757818101518382015260200161236f565b50505050905001945050505050600060405180830381600087803b1580156123ae57600080fd5b505af11580156123c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156123eb57600080fd5b8101908080516040519392919084600160201b82111561240a57600080fd5b90830190602082018581111561241f57600080fd5b82518660208202830111600160201b8211171561243b57600080fd5b82525081516020918201928201910280838360005b83811015612468578181015183820152602001612450565b5050505090500160405260200180516040519392919084600160201b82111561249057600080fd5b9083019060208201858111156124a557600080fd5b82518660208202830111600160201b821117156124c157600080fd5b82525081516020918201928201910280838360005b838110156124ee5781810151838201526020016124d6565b505050509050016040525050509150915060008061250c8484612e18565b9150915060005b82518110156125e25782818151811061252857fe5b60200260200101516001600160a01b031663095ea7b3600160009054906101000a90046001600160a01b031684848151811061256057fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156125ae57600080fd5b505af11580156125c2573d6000803e3d6000fd5b505050506040513d60208110156125d857600080fd5b5050600101612513565b50600154604051635e2a002360e01b8152604481018890526060600482019081528451606483015284516000936001600160a01b031692635e2a002392879287928d929182916024810191608490910190602080890191028083838e5b8381101561265757818101518382015260200161263f565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561269657818101518382015260200161267e565b5050505090500195505050505050602060405180830381600087803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b505050506040513d60208110156126e857600080fd5b50516001546040805163a9059cbb60e01b81523360048201526024810184905290519293506001600160a01b039091169163a9059cbb916044808201926020929091908290030181600087803b15801561274157600080fd5b505af1158015612755573d6000803e3d6000fd5b505050506040513d602081101561276b57600080fd5b50516127be576040805162461bcd60e51b815260206004820152601860248201527f6661696c656420746f2073656e64206261636b206779726f0000000000000000604482015290519081900360640190fd5b604051819033907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688590600090a398975050505050505050565b6000546001600160a01b03163314612844576040805162461bcd60e51b815260206004820181905260248201526000805160206130a6833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b6000546001600160a01b031633146128ea576040805162461bcd60e51b815260206004820181905260248201526000805160206130a6833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051638f7873ed60e01b815290516060926001600160a01b031691638f7873ed916004808301926000929190829003018186803b15801561295157600080fd5b505afa158015612965573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561298e57600080fd5b8101908080516040519392919084600160201b8211156129ad57600080fd5b9083019060208201858111156129c257600080fd5b82518660208202830111600160201b821117156129de57600080fd5b82525081516020918201928201910280838360005b83811015612a0b5781810151838201526020016129f3565b50505050905001604052505050905090565b6000546001600160a01b031690565b6001546001600160a01b031681565b60025460408051634fb4dc1f60e11b815260048101918252845160448201528451600093849384936001600160a01b0390921692639f69b83e928992899290918291602482019160640190602080880191028083838d5b83811015612aaa578181015183820152602001612a92565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015612ae9578181015183820152602001612ad1565b5050505090500194505050505060006040518083038186803b158015612b0e57600080fd5b505afa158015612b22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612b4b57600080fd5b8101908080516040519392919084600160201b821115612b6a57600080fd5b908301906020820185811115612b7f57600080fd5b82518660208202830111600160201b82111715612b9b57600080fd5b82525081516020918201928201910280838360005b83811015612bc8578181015183820152602001612bb0565b5050505090500160405260200180516040519392919084600160201b821115612bf057600080fd5b908301906020820185811115612c0557600080fd5b82518660208202830111600160201b82111715612c2157600080fd5b82525081516020918201928201910280838360005b83811015612c4e578181015183820152602001612c36565b5050505090500160405250505091509150600080612c6c8484612e18565b60015460405163a3767d0f60e01b8152600a604482018190526060600483019081528551606484015285519597509395506000946001600160a01b039093169363a3767d0f9388938893929182916024810191608490910190602080890191028083838e83156117e65781810151838201526020016117ce565b60015460408051634f5548bb60e01b815290516060926001600160a01b031691634f5548bb916004808301926000929190829003018186803b15801561295157600080fd5b6000546001600160a01b03163314612d78576040805162461bcd60e51b815260206004820181905260248201526000805160206130a6833981519152604482015290519081900360640190fd5b6001600160a01b038116612dbd5760405162461bcd60e51b81526004018080602001828103825260268152602001806130806026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060806000600160009054906101000a90046001600160a01b03166001600160a01b0316638f7873ed6040518163ffffffff1660e01b815260040160006040518083038186803b158015612e6b57600080fd5b505afa158015612e7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612ea857600080fd5b8101908080516040519392919084600160201b821115612ec757600080fd5b908301906020820185811115612edc57600080fd5b82518660208202830111600160201b82111715612ef857600080fd5b82525081516020918201928201910280838360005b83811015612f25578181015183820152602001612f0d565b5050505090500160405250505090506000815167ffffffffffffffff81118015612f4e57600080fd5b50604051908082528060200260200182016040528015612f78578160200160208202803683370190505b50905060005b8651811015613073576000805b845181101561301757888381518110612fa057fe5b60200260200101516001600160a01b0316858281518110612fbd57fe5b60200260200101516001600160a01b0316141561300f57878381518110612fe057fe5b6020026020010151848281518110612ff457fe5b60200260200101818151019150818152505060019150613017565b600101612f8b565b508061306a576040805162461bcd60e51b815260206004820152601960248201527f636f756c64206e6f742066696e642076616c696420706f6f6c00000000000000604482015290519081900360640190fd5b50600101612f7e565b5090959094509250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726661696c656420746f207472616e7366657220746f6b656e732066726f6d204779726f46756e6420746f204772796f526f75746572a2646970667358221220c232213be59fd4e87e6407755c4cf6a38f1912d6eae96ab3532e216e8c7bea6b64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "estimateMintedGyro(address[],uint256[])": {
        "params": {
          "_amountsIn": "the amount of each token to use",
          "_tokensIn": "the tokens to use for minting"
        },
        "returns": {
          "_0": "the estimated amount of Gyro dolars minted"
        }
      },
      "estimateRedeemedGyro(address[],uint256[])": {
        "params": {
          "_amountsOut": "the amount of each token to receive",
          "_tokensOut": "the tokens receive back"
        },
        "returns": {
          "_0": "the estimated amount of Gyro dolars redeemed"
        }
      },
      "getReserveValues()": {
        "returns": {
          "_0": "the current values of the Gyro fund's reserve"
        }
      },
      "getSupportedPools()": {
        "returns": {
          "_0": "the list of Balance pools supported by the Gyro fund"
        }
      },
      "getSupportedTokens()": {
        "returns": {
          "_0": "the list of tokens supported by the Gyro fund"
        }
      },
      "mintFromUnderlyingTokens(address[],uint256[],uint256)": {
        "params": {
          "_amountsIn": "the amount of each token to use",
          "_minAmountOut": "the minimum number of Gyro dollars wanted, used to prevent against slippage",
          "_tokensIn": "a list of tokens to use to mint Gyro dollars"
        },
        "returns": {
          "_0": "the amount of Gyro dollars minted"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeemToUnderlyingTokens(address[],uint256[],uint256)": {
        "params": {
          "_amountsOut": "the amount of each token to receive",
          "_maxRedeemed": "the maximum number of Gyro dollars to redeem",
          "_tokensOut": "the tokens to receive in exchange for redeeming Gyro dollars"
        },
        "returns": {
          "_0": "the amount of Gyro dollar redeemed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "wouldMintChecksPass(address[],uint256[],uint256)": {
        "params": {
          "_amountsIn": "the amount of each token to use",
          "_minGyroMinted": "the minimum number of Gyro dollars wanted",
          "_tokensIn": "a list of tokens to use to mint Gyro dollars"
        },
        "returns": {
          "_0": "an error code if the call would fail, otherwise 0 See GyroFundV1 for the meaning of each error code"
        }
      },
      "wouldRedeemChecksPass(address[],uint256[],uint256)": {
        "params": {
          "_amountsOut": "the amount of each token to receive",
          "_maxGyroRedeemed": "the maximum number of Gyro dollars to redeem",
          "_tokensOut": "the tokens to receive in exchange for redeeming Gyro dollars"
        },
        "returns": {
          "_0": "an error code if the call would fail, otherwise 0"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimateMintedGyro(address[],uint256[])": {
        "notice": "This functions approximates how many Gyro dollars would be minted given `_tokensIn` and `_amountsIn`. See the documentation of `mintFromUnderlyingTokens` for more details about these parameters"
      },
      "estimateRedeemedGyro(address[],uint256[])": {
        "notice": "This functions approximates how many Gyro dollars would be redeemed given `_tokensOut` and `_amountsOut`. See the documentation of `redeemToUnderlyingTokens` for more details about these parameters"
      },
      "mintFromUnderlyingTokens(address[],uint256[],uint256)": {
        "notice": "Mints at least `_minAmountOut` Gyro dollars by using the tokens and amounts passed in `_tokensIn` and `_amountsIn`. `_tokensIn` and `_amountsIn` must be the same length and `_amountsIn[i]` is the amount of `_tokensIn[i]` to use to mint Gyro dollars. This contract should be approved to spend at least the amount given for each token of `_tokensIn`"
      },
      "redeemToUnderlyingTokens(address[],uint256[],uint256)": {
        "notice": "Redeems at most `_maxRedeemed` to receive exactly `_amountsOut[i]` of each `_tokensOut[i]`. `_tokensOut[i]` and  `_amountsOut[i]` must be the same length and `_amountsOut[i]` is the amount desired of `_tokensOut[i]` This contract should be allowed to spend the amount of Gyro dollars redeemed which is at most `_maxRedeemed`"
      },
      "wouldMintChecksPass(address[],uint256[],uint256)": {
        "notice": "Checks if a call to `mintFromUnderlyingTokens` with the given `_tokensIn`, `_amountsIn and `_minGyroMinted` would succeed or not, and returns the potential error code"
      },
      "wouldRedeemChecksPass(address[],uint256[],uint256)": {
        "notice": "Checks if a call to `redeemToUnderlyingTokens` with the given `_tokensOut`, `_amountsOut and `_maxGyroRedeemed` would succeed or not, and returns the potential error code"
      }
    },
    "notice": "GyroLib is a contract used to add functionality around the GyroFund to allow users to exchange assets for Gyro rather than having to use already minted Balancer Pool Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8450,
        "contract": "contracts/GyroLib.sol:GyroLib",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7099,
        "contract": "contracts/GyroLib.sol:GyroLib",
        "label": "fund",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GyroFundV1)7077"
      },
      {
        "astId": 7101,
        "contract": "contracts/GyroLib.sol:GyroLib",
        "label": "externalTokensRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(BalancerExternalTokenRouter)3592"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BalancerExternalTokenRouter)3592": {
        "encoding": "inplace",
        "label": "contract BalancerExternalTokenRouter",
        "numberOfBytes": "20"
      },
      "t_contract(GyroFundV1)7077": {
        "encoding": "inplace",
        "label": "contract GyroFundV1",
        "numberOfBytes": "20"
      }
    }
  }
}