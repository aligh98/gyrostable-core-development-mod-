{
  "address": "0x3675318Bf01864993C93b2d486f34bb96254D81C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenFaucets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_mintAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "mintAllAsOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "mintAsOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restoreAllFaucetsOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "restoreFaucetOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "setMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenFaucets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbaa6c546b3ee307ff83d4e65c462057297719f5ab4b39203efc084f26887d71b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x94e3d92264097A750E7500B6B45545a1A6EDD45B",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "917057",
    "logsBloom": "0x
    "blockHash": "0xfb255fb36a5118ff00226a268459e6d570d37be0575f1d37a54049dcdf0ad808",
    "transactionHash": "0xbaa6c546b3ee307ff83d4e65c462057297719f5ab4b39203efc084f26887d71b",
    "logs": [],
    "blockNumber": 24225688,
    "cumulativeGasUsed": "1066440",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x741E34176508fEd00aa98908d4CdF366e9808640",
      "0x17D484e98402321551d39CF4A0050B18a343780F",
      "0x8028693F15502721629B2C75fa30ECeDadB3573d",
      "0x23C587972b49d593531E56C8c659A8D22b12EC1E",
      "0x06dd97f996f19A12F372488a1dD39B687AE525D2"
    ],
    [
      1,
      1000,
      1000,
      1000,
      1000
    ]
  ],
  "solcInputHash": "717c99a73178467e422787f551025a5b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenFaucets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mintAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"mintAllAsOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"mintAsOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreAllFaucetsOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"restoreFaucetOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenFaucets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFaucet.sol\":\"MetaFaucet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function initializeOwner() external {\\n        require(_owner == address(0), \\\"owner already initialized\\\");\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x8ce2fd266470f41ea749996d52c28d3486ed19766178a46e9991683b60129bb7\",\"license\":\"MIT\"},\"contracts/TokenFaucet.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\n// Test Token\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract TokenFaucet is Ownable {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    address private _owner;\\n\\n    uint256 internal _totalSupply;\\n\\n    mapping(address => uint256) private _balance;\\n    mapping(address => mapping(address => uint256)) private _allowance;\\n    mapping(address => uint256) private lastAccessTime;\\n\\n    uint256 private constant waitTime = 30 minutes;\\n    uint256 public mintAmt;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    // Math\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= a);\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a);\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        uint256 _mintAmt\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        mintAmt = _mintAmt;\\n    }\\n\\n    function setMintAmount(uint256 _mintAmount) external onlyOwner {\\n        mintAmt = _mintAmount;\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BALANCE\\\");\\n        _balance[src] = sub(_balance[src], amt);\\n        _balance[dst] = add(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n\\n    function _mint(address dst, uint256 amt) internal {\\n        _balance[dst] = add(_balance[dst], amt);\\n        _totalSupply = add(_totalSupply, amt);\\n        emit Transfer(address(0), dst, amt);\\n    }\\n\\n    function allowance(address src, address dst) external view returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function mintAsOwner(address dst, uint256 amt) public onlyOwner returns (bool) {\\n        _mint(dst, amt);\\n        return true;\\n    }\\n\\n    function allowedToMint(address whom) internal view returns (bool) {\\n        if (lastAccessTime[whom] == 0) {\\n            return true;\\n        } else if (block.timestamp >= lastAccessTime[whom] + waitTime) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function mint() public returns (bool) {\\n        require(allowedToMint(msg.sender));\\n        lastAccessTime[msg.sender] = block.timestamp;\\n        _mint(msg.sender, mintAmt * 10**decimals);\\n        return true;\\n    }\\n\\n    function burn(uint256 amt) public returns (bool) {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = sub(_balance[address(this)], amt);\\n        _totalSupply = sub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = sub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\\ncontract MetaFaucet is Ownable {\\n    event Mint(address indexed account, address indexed token, uint256 indexed amount);\\n\\n    address[] public tokenFaucets;\\n    mapping(address => uint256) public mintAmounts;\\n\\n    constructor(address[] memory _tokenFaucets, uint256[] memory _mintAmounts) {\\n        tokenFaucets = _tokenFaucets;\\n        for (uint256 i = 0; i < _tokenFaucets.length; i++) {\\n            mintAmounts[_tokenFaucets[i]] = _mintAmounts[i];\\n        }\\n    }\\n\\n    function mintAllAsOwner(address dst) public onlyOwner returns (bool) {\\n        address[] memory _tokenFaucets = tokenFaucets;\\n        for (uint256 i = 0; i < _tokenFaucets.length; i++) {\\n            TokenFaucet faucet = TokenFaucet(_tokenFaucets[i]);\\n            uint256 amount = mintAmounts[address(faucet)] * 10**faucet.decimals();\\n            TokenFaucet(_tokenFaucets[i]).mintAsOwner(dst, amount);\\n            emit Mint(msg.sender, _tokenFaucets[i], amount);\\n        }\\n        return true;\\n    }\\n\\n    function mintAsOwner(\\n        address token,\\n        address dst,\\n        uint256 amt\\n    ) public onlyOwner returns (bool) {\\n        return TokenFaucet(token).mintAsOwner(dst, amt);\\n    }\\n\\n    function setMintAmount(address token, uint256 amt) external onlyOwner {\\n        mintAmounts[token] = amt;\\n    }\\n\\n    function restoreFaucetOwnership(address token) public onlyOwner {\\n        TokenFaucet(token).transferOwnership(msg.sender);\\n    }\\n\\n    function restoreAllFaucetsOwnership() external onlyOwner {\\n        address[] memory _tokenFaucets = tokenFaucets;\\n        for (uint256 i = 0; i < _tokenFaucets.length; i++) {\\n            TokenFaucet(_tokenFaucets[i]).transferOwnership(msg.sender);\\n        }\\n    }\\n\\n    function getTokens() external view returns (address[] memory) {\\n        address[] memory _tokenFaucets = tokenFaucets;\\n        return _tokenFaucets;\\n    }\\n}\\n\",\"keccak256\":\"0xc2d090cca3a8c462a96e30d20705acb2ee1987934c01b7a5c918dab6028edd1a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000da838038062000da8833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b5050505090500160405260200180516040519392919084640100000000821115620000e557600080fd5b908301906020820185811115620000fb57600080fd5b82518660208202830111640100000000821117156200011957600080fd5b82525081516020918201928201910280838360005b83811015620001485781810151838201526020016200012e565b5050505091909101604052505083516200016c9250600191506020850190620001d6565b5060005b8251811015620001cd578181815181106200018757fe5b602002602001015160026000858481518110620001a057fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205560010162000170565b50505062000257565b8280548282559060005260206000209081019282156200022e579160200282015b828111156200022e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001f7565b506200023c92915062000240565b5090565b5b808211156200023c576000815560010162000241565b610b4180620002676000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638218fb57116100715780638218fb571461018d5780638da5cb5b14610195578063a1119867146101b9578063aa6ca808146101f1578063ed83df2414610249578063f2fde38b14610266576100b4565b80631c029ea5146100b957806350bcb11f146100f3578063528002e3146101215780635f53837f14610147578063715018a61461014f578063790385a514610157575b600080fd5b6100df600480360360208110156100cf57600080fd5b50356001600160a01b031661028c565b604080519115158252519081900360200190f35b61011f6004803603604081101561010957600080fd5b506001600160a01b0381351690602001356104eb565b005b61011f6004803603602081101561013757600080fd5b50356001600160a01b0316610554565b61011f610603565b61011f610675565b6100df6004803603606081101561016d57600080fd5b506001600160a01b0381358116916020810135909116906040013561070c565b61011f6107e5565b61019d610927565b604080516001600160a01b039092168252519081900360200190f35b6101df600480360360208110156101cf57600080fd5b50356001600160a01b0316610936565b60408051918252519081900360200190f35b6101f9610948565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023557818101518382015260200161021d565b505050509050019250505060405180910390f35b61019d6004803603602081101561025f57600080fd5b50356109ae565b61011f6004803603602081101561027c57600080fd5b50356001600160a01b03166109d8565b600080546001600160a01b031633146102da576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561033257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610314575b5050505050905060005b81518110156104e157600082828151811061035357fe5b602002602001015190506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d60208110156103c257600080fd5b50516001600160a01b038316600090815260026020526040902054855160ff909216600a0a0291508490849081106103f657fe5b60200260200101516001600160a01b0316635a05f11187836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b505050506040513d602081101561047e57600080fd5b50508351819085908590811061049057fe5b60200260200101516001600160a01b0316336001600160a01b03167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f860405160405180910390a4505060010161033c565b5060019392505050565b6000546001600160a01b03163314610538576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6001600160a01b03909116600090815260026020526040902055565b6000546001600160a01b031633146105a1576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6040805163f2fde38b60e01b815233600482015290516001600160a01b0383169163f2fde38b91602480830192600092919082900301818387803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031615610661576040805162461bcd60e51b815260206004820152601960248201527f6f776e657220616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600080546001600160a01b03191633179055565b6000546001600160a01b031633146106c2576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080546001600160a01b0316331461075a576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b836001600160a01b0316635a05f11184846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b505050506040513d60208110156107db57600080fd5b5051949350505050565b6000546001600160a01b03163314610832576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561088a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161086c575b5050505050905060005b8151811015610923578181815181106108a957fe5b60200260200101516001600160a01b031663f2fde38b336040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156108ff57600080fd5b505af1158015610913573d6000803e3d6000fd5b5050600190920191506108949050565b5050565b6000546001600160a01b031690565b60026020526000908152604090205481565b6060600060018054806020026020016040519081016040528092919081815260200182805480156109a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610984575b50939550505050505090565b600181815481106109be57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610a25576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6001600160a01b038116610a6a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610ac66026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d88aeeca5d4fcd4a595ae63fb5ce580f54445c0ecc7361ab6c1785ba54a55a5064736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638218fb57116100715780638218fb571461018d5780638da5cb5b14610195578063a1119867146101b9578063aa6ca808146101f1578063ed83df2414610249578063f2fde38b14610266576100b4565b80631c029ea5146100b957806350bcb11f146100f3578063528002e3146101215780635f53837f14610147578063715018a61461014f578063790385a514610157575b600080fd5b6100df600480360360208110156100cf57600080fd5b50356001600160a01b031661028c565b604080519115158252519081900360200190f35b61011f6004803603604081101561010957600080fd5b506001600160a01b0381351690602001356104eb565b005b61011f6004803603602081101561013757600080fd5b50356001600160a01b0316610554565b61011f610603565b61011f610675565b6100df6004803603606081101561016d57600080fd5b506001600160a01b0381358116916020810135909116906040013561070c565b61011f6107e5565b61019d610927565b604080516001600160a01b039092168252519081900360200190f35b6101df600480360360208110156101cf57600080fd5b50356001600160a01b0316610936565b60408051918252519081900360200190f35b6101f9610948565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023557818101518382015260200161021d565b505050509050019250505060405180910390f35b61019d6004803603602081101561025f57600080fd5b50356109ae565b61011f6004803603602081101561027c57600080fd5b50356001600160a01b03166109d8565b600080546001600160a01b031633146102da576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561033257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610314575b5050505050905060005b81518110156104e157600082828151811061035357fe5b602002602001015190506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d60208110156103c257600080fd5b50516001600160a01b038316600090815260026020526040902054855160ff909216600a0a0291508490849081106103f657fe5b60200260200101516001600160a01b0316635a05f11187836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b505050506040513d602081101561047e57600080fd5b50508351819085908590811061049057fe5b60200260200101516001600160a01b0316336001600160a01b03167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f860405160405180910390a4505060010161033c565b5060019392505050565b6000546001600160a01b03163314610538576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6001600160a01b03909116600090815260026020526040902055565b6000546001600160a01b031633146105a1576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6040805163f2fde38b60e01b815233600482015290516001600160a01b0383169163f2fde38b91602480830192600092919082900301818387803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031615610661576040805162461bcd60e51b815260206004820152601960248201527f6f776e657220616c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600080546001600160a01b03191633179055565b6000546001600160a01b031633146106c2576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080546001600160a01b0316331461075a576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b836001600160a01b0316635a05f11184846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b505050506040513d60208110156107db57600080fd5b5051949350505050565b6000546001600160a01b03163314610832576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561088a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161086c575b5050505050905060005b8151811015610923578181815181106108a957fe5b60200260200101516001600160a01b031663f2fde38b336040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156108ff57600080fd5b505af1158015610913573d6000803e3d6000fd5b5050600190920191506108949050565b5050565b6000546001600160a01b031690565b60026020526000908152604090205481565b6060600060018054806020026020016040519081016040528092919081815260200182805480156109a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610984575b50939550505050505090565b600181815481106109be57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610a25576040805162461bcd60e51b81526020600482018190526024820152600080516020610aec833981519152604482015290519081900360640190fd5b6001600160a01b038116610a6a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610ac66026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d88aeeca5d4fcd4a595ae63fb5ce580f54445c0ecc7361ab6c1785ba54a55a5064736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8450,
        "contract": "contracts/TokenFaucet.sol:MetaFaucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9176,
        "contract": "contracts/TokenFaucet.sol:MetaFaucet",
        "label": "tokenFaucets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9180,
        "contract": "contracts/TokenFaucet.sol:MetaFaucet",
        "label": "mintAmounts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}